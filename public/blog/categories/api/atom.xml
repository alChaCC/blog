<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: API | AlohaCC]]></title>
  <link href="http://ccaloha.cc/blog/categories/api/atom.xml" rel="self"/>
  <link href="http://ccaloha.cc/"/>
  <updated>2016-11-24T17:48:02+08:00</updated>
  <id>http://ccaloha.cc/</id>
  <author>
    <name><![CDATA[Aloha]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[API Request Limitation Using Rack-Throttle and Doorkeeper]]></title>
    <link href="http://ccaloha.cc/blog/2016/11/24/api-request-limitation-using-rack-throttle-and-doorkeeper/"/>
    <updated>2016-11-24T12:52:06+08:00</updated>
    <id>http://ccaloha.cc/blog/2016/11/24/api-request-limitation-using-rack-throttle-and-doorkeeper</id>
    <content type="html"><![CDATA[<p>When it comes to open API to external users, we need to consider the number of requests we allowed. Most of API-as-a-service platforms have different payment plans. Due to different levels of payment, it can make sure that our service resource can be used fairly - advanced plan users can make more requests than normal users.</p>

<p>In order to achieve this goal, we need to find a way recording the number of requests. Intuitively, we can creata a <code>request_record</code> table, before controller process the request, by comparing the number in database and client's request limitation, we can either allow or deny the requests. <br/>
However, we don't need to build like this way.</p>

<p>Thanks to Ruby gems, you are able to find some libraries can do the trick. In this article,
I choose <code>rack-throttle</code> to help me count the requests. The reasons I prefer
<code>rack-throttle</code> are:</p>

<ol>
<li>To limit by defining a maximum number of allowed HTTP requests per a given time period</li>
<li>Compatible with any Rack application and any Rack-based framework.</li>
<li>Compatible with the memcached, memcache-client, memcache and redis gems.</li>
<li>Well documented and the most important thing is that codes are easy to read!</li>
</ol>


<!--more-->


<p>Different from recording, we still need to identify which client makes this request for deciding to allow or not. Here I use <code>Doorkeeper</code> to tell me which user is.</p>

<p>In this article, I will not show you how to setup <code>Doorkeeper</code>, but you are about to see how to customize your own limiter.</p>

<p>So, That's go!</p>

<h2>Requirements</h2>

<p>My targets show as below:</p>

<ol>
<li>Different clients has its limitation.</li>
<li>Should limit by second, minute, hour, day and month.</li>
<li>Support whitelist</li>
</ol>


<h2>Gemfile</h2>

<p>At first, we need to add libraries, the most important gem is <code>rack-throttle</code>. Depend on which places you want to store your counting data, you might need to add other gems. For me, I prefer <code>redis</code>. So, I added as below.</p>

<p>```</p>

<h1>Api limit</h1>

<p>gem 'rack-throttle'
gem 'redis'
```</p>

<h2>Customize your throttler</h2>

<p>Wait wait, before we start implementing, we should understand some mechnisms and terms.</p>

<h3>First, <code>rack</code>!</h3>

<p>you might notice that the gem we use called <code>rack-throttle</code>. Yes! this lib is built as a <code>Rack middleware</code> that provides logic for rate-limiting incoming HTTP requests to Rack applications.</p>

<p>Ok, so what's <code>Rack</code> ?</p>

<p>according to <a href="http://rack.github.io/">rack official website</a>,</p>

<blockquote><p>Rack provides a minimal interface between webservers that support Ruby and Ruby frameworks.</p>

<p>To use Rack, provide an <code>app</code>: an object that responds to the <code>call</code> method, taking the environment hash as a parameter, and returning an Array with three elements:</p>

<p>The HTTP response code</p>

<p>A Hash of headers</p>

<p>The response body, which must respond to each</p></blockquote>

<p>So, <code>Rack</code> can help you handle the HTTP request. And due to <code>Rack</code> take <code>the environment hash</code> and also can "return" fix format: <code>array with code, headers and body</code>. It's very easy for you to add <code>middleware</code> which can help you do cacheing, authencation, ...etc. In our case, gem <code>rack-throttle</code> will help you adding middleware easily.</p>

<p>After we briefly understand how <code>Rack</code> works, now let's take a look how <code>rack-throttle</code>'s core class: <a href="https://github.com/dryruby/rack-throttle/blob/master/lib/rack/throttle/limiter.rb"><code>limiter</code></a>.</p>

<p>Why it work as <code>Rack middilewate</code>?</p>

<p>The key point is:</p>

<p>```
def initialize(app, options = {})
  @app, @options = app, options
end</p>

<p>def call(env)
  request = Rack::Request.new(env)
  allowed?(request) ? app.call(env) : rate_limit_exceeded(request)
end
```</p>

<p>So, after we add this middleware into our Rack, every time we receive the requests it will be invoked by <code>call</code> method. Then we check is allowed or not, if is allowed, we pass to next Rack middleware, otherwise we stop in this middleware.</p>

<h3>Since I need to customize the throttler, I can inherit from <code>Rack::Throttle::Limiter</code>.</h3>

<p>Let's check the final code first.</p>

<p>```</p>

<h1>lib/api_limitation/application_throttler.rb</h1>

<p>require 'rack/throttle'
module ApiLimitation
  class ApplicationThrottler &lt; Rack::Throttle::Limiter</p>

<pre><code>attr_accessor :client, :ip

def initialize(app, options = {})
  super
end

def client_identifier(request)
  if request.env['HTTP_AUTHORIZATION'] || request.params['access_token']
    token        = request.env['HTTP_AUTHORIZATION'].present? ? request.env['HTTP_AUTHORIZATION'].split(' ')[-1] : request.params['access_token']
    access_token = Doorkeeper::AccessToken.where(token: token).first
    @client = access_token ? User.find(access_token.resource_owner_id) : nil
  end
  @ip = request.ip.to_s
end

def max_per_second
  @client.try(:limitation).try(:second) || 1
end

def max_per_minute
  @client.try(:limitation).try(:minute) || 60
end

def max_per_hourly
  @client.try(:limitation).try(:hourly) || 3_600
end

def max_per_daily
  @client.try(:limitation).try(:daily) || 86_400
end

def max_per_monthly
  @client.try(:limitation).try(:monthly) || 2_592_000
end

def allowed?(request)
  client_identifier(request)
  return true if whitelisted?(request)

  ['second', 'minute', 'hourly', 'daily', 'monthly'].all? { |timeslot| send("#{timeslot}_check".to_sym) }
end

def whitelisted?(request)
  @client.try(:email).in? ['YOUR_WHITE_LIST']
end

protected

['second', 'minute', 'hourly', 'daily', 'monthly'].each do |timeslot|
  define_method("#{timeslot}_check".to_sym) do
    count = cache_get(key = send("#{timeslot}_cache_key".to_sym)).to_i + 1 rescue 1
    allowed = count &lt;= send("max_per_#{timeslot}".to_sym).to_i
    begin
      cache_set(key, count)
      allowed
    rescue =&gt; e
      allowed = true
    end
  end
end

def second_cache_key
  [@client.try(:id) || @ip, Time.now.strftime('%Y-%m-%dT%H:%M:%S')].join(':')
end

def minute_cache_key
  [@client.try(:id) || @ip, Time.now.strftime('%Y-%m-%dT%H:%M')].join(':')
end

def hourly_cache_key
  [@client.try(:id) || @ip, Time.now.strftime('%Y-%m-%dT%H')].join(':')
end

def daily_cache_key
  [@client.try(:id) || @ip, Time.now.strftime('%Y-%m-%d')].join(':')
end

def monthly_cache_key
  [@client.try(:id) || @ip, Time.now.strftime('%Y-%m')].join(':')
end
</code></pre>

<p>  end
end</p>

<p>```</p>

<p>The most important function is <code>allowed?(request)</code>.</p>

<p>```
def allowed?(request)</p>

<pre><code>client_identifier(request)
return true if whitelisted?(request)

['second', 'minute', 'hourly', 'daily', 'monthly'].all? { |timeslot| send("#{timeslot}_check".to_sym) }
</code></pre>

<p>end
```
Let's check each functions.</p>

<h4>First, <code>client_identifier(request)</code>.</h4>

<p>```
def client_identifier(request)</p>

<pre><code>if request.env['HTTP_AUTHORIZATION'] || request.params['access_token']
</code></pre>

<p>   token        = request.env['HTTP_AUTHORIZATION'].present? ? request.env['HTTP_AUTHORIZATION'].split(' ')[-1] : request.params['access_token']
   access_token = Doorkeeper::AccessToken.where(token: token).first
   @client = access_token ? User.find(access_token.resource_owner_id) : nil</p>

<pre><code>  end
</code></pre>

<p>   @ip = request.ip.to_s
 end
```</p>

<p>We used <code>doorkeeper</code> for Oauth2 authentication.</p>

<p>So, each requests might have <code>HTTP_AUTHORIZATION</code> in header or <code>access_token</code> in url. Then we need to use the <code>access_token</code> to find who he is.</p>

<h4>Second, <code>whitelisted?(request)</code></h4>

<p><code>
def whitelisted?(request)
  @client.try(:email).in? ['YOUR_WHITE_LIST']
end
</code></p>

<p>Simple! Right?, because we already have @client from <code>client_identifier(request)</code>. I just try to find its email in list or not.</p>

<h4>Finall part, <code>['second', 'minute', 'hourly', 'daily', 'monthly'].all? { |timeslot| send("#{timeslot}_check".to_sym) }</code></h4>

<p>here I use <a href="https://www.toptal.com/ruby/ruby-metaprogramming-cooler-than-it-sounds"><code>metaprogramming</code></a> to avoid writing too many duplicate codes which call these functions: <code>second_check</code>, <code>minute_check</code>, ...etc.</p>

<p>And you can't find these functions in codes, which is because I also use metaprogramming method to implement class's instance methods.</p>

<p>```
['second', 'minute', 'hourly', 'daily', 'monthly'].each do |timeslot|
  define_method("#{timeslot}_check".to_sym) do</p>

<pre><code>count = cache_get(key = send("#{timeslot}_cache_key".to_sym)).to_i + 1 rescue 1
allowed = count &lt;= send("max_per_#{timeslot}".to_sym).to_i
begin
  cache_set(key, count)
  allowed
rescue =&gt; e
  allowed = true
end
</code></pre>

<p>  end
end
```</p>

<p>Ok, so here I try to get count number from cache(for me, I used Redis) by <code>cache_get</code> which is in base class: <code>Rack::Throttle::Limiter</code>. And the cache keys are either client's id or ip with timestamp. for example: <code>12345:2016-11-24</code> or <code>127.0.0.1:2016-11-24</code>.</p>

<p><code>
def second_cache_key
  [@client.try(:id) || @ip, Time.now.strftime('%Y-%m-%dT%H:%M:%S')].join(':')
end
...
</code></p>

<p>After we get the number of count we can compare it  to client's limitation and add counting number as well.</p>

<p>And how do we get client's limitation?</p>

<p>In our database design, user has one <code>limitation</code> which include these columns: <code>second</code>, <code>minute</code>...etc.
So, I can easily get it by <code>@client.limitation.XXX</code></p>

<p><code>
def max_per_second
  @client.try(:limitation).try(:second) || 1
end
....
</code></p>

<p>That's it. it's not too hard right?</p>

<h2>Add your throttler into Rack.</h2>

<p>This part is super easy, just follow <a href="https://github.com/dryruby/rack-throttle"><code>rack-throttle</code>'s README</a>.</p>

<p>because I built it for Rails application.</p>

<p>I need to add this line into <code>config/application.rb</code></p>

<p>```
module YOUR_AWESOME_APPLICATION
  class Application &lt; Rails::Application
   ...</p>

<pre><code>config.middleware.use ::ApiLimitation::ApplicationThrottler, cache: Redis.new(host: YOUR_REDIS_HOST), key_prefix: :awesome_throttle, message: 'Rate Limit Exceeded, please upgrade your plan to get more requests'
</code></pre>

<p>  end
end
```</p>

<p>Do you remember that I mentioned I use <code>Redis</code> for caching count? Here is the magic.</p>

<p>I initialize <code>@cache</code> in here. So that it can be accessed in class.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Integrate Ruby on Rails with Google Analytics API]]></title>
    <link href="http://ccaloha.cc/blog/2015/04/09/integrate-ruby-on-rails-with-google-analytics-api/"/>
    <updated>2015-04-09T22:32:24+08:00</updated>
    <id>http://ccaloha.cc/blog/2015/04/09/integrate-ruby-on-rails-with-google-analytics-api</id>
    <content type="html"><![CDATA[<p>In this article, I try to get some Google Analytics data via Google API. Then, I saved data into MongoDB waiting for further calculation.</p>

<p>And you are able to learn</p>

<ol>
<li>How I do Google API pagination</li>
<li>How I use module to build flexible function</li>
<li>How I use Google Query Explorer to speed up development</li>
<li>How to apply for google API access</li>
</ol>


<p>Let's check it out.</p>

<!-- more -->


<h2>Step 1. Apply Google Analytics API access authorization</h2>

<h3>1-1 go to <a href="https://code.google.com/apis/console/">Google API console</a></h3>

<h3>1-2 Find Google Analytics API</h3>

<p> <img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/Integrate%20Ruby%20on%20Rails%20with%20Google%20Analytics%20API/find_google_api.png" alt="find google api"></p>

<h3>1-3 Enable Google Analytics API</h3>

<p> <img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/Integrate%20Ruby%20on%20Rails%20with%20Google%20Analytics%20API/Enable%20Google%20Analytic%20API.png" alt="enable google analytics API"></p>

<h3>1-4 Create New Client ID</h3>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/Integrate%20Ruby%20on%20Rails%20with%20Google%20Analytics%20API/Create%20New%20Client%20ID.png" alt="Create New Client ID"></p>

<h3>1-5 Choose client type</h3>

<p>Since this is for server-to-server usage, I choose this</p>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/Integrate%20Ruby%20on%20Rails%20with%20Google%20Analytics%20API/Choose%20client%20type.png" alt="Choose client type"></p>

<h3>1-6 Download key</h3>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/Integrate%20Ruby%20on%20Rails%20with%20Google%20Analytics%20API/download%20key.png" alt="download key"></p>

<p>ps. Since I use Ruby on Rails, so I put it in <strong>config/ga_api_key_20150408.p12</strong></p>

<h3>1-7 Add API user into your GA user group</h3>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/Integrate%20Ruby%20on%20Rails%20with%20Google%20Analytics%20API/Add%20API%20user%20into%20your%20GA%20user%20group.png"></p>

<h2>2. [TIPS] Use Google Query Explorer to speed up development</h2>

<h3>1. Go to <a href="https://ga-dev-tools.appspot.com/query-explorer/">Google Query Explorer</a></h3>

<h3>2. Get your view id</h3>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/Integrate%20Ruby%20on%20Rails%20with%20Google%20Analytics%20API/Get%20your%20view%20id.png"></p>

<h3>3. Try your query parameter first and know how your data look like</h3>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/Integrate%20Ruby%20on%20Rails%20with%20Google%20Analytics%20API/Try%20your%20query%20parameter%20first.png"></p>

<p>And it provides a easy tool that you don't need to remember any parameters.</p>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/Integrate%20Ruby%20on%20Rails%20with%20Google%20Analytics%20API/parameter%20tool.png"></p>

<h2>3. Let's write a sample code</h2>

<h3>3-1 Add gem to Gemfile</h3>

<pre><code>gem 'google-api-client'
</code></pre>

<h3>3-2 create a rb file</h3>

<p>I update some codes copied from this page.<a href="https://gist.github.com/joost/5344705">https://gist.github.com/joost/5344705</a></p>

<pre><code>  require 'google/api_client'
  require 'date'

  client = Google::APIClient.new(:application_name =&gt; 'Urcosme-GA-sync', :application_version =&gt; '1')

  key_file = File.join("#{Rails.root}/config", 'ga_api_key_20150408.p12')
  key = Google::APIClient::PKCS12.load_key(key_file, 'notasecret')
  service_account = Google::APIClient::JWTAsserter.new(
      'hello@developer.gserviceaccount.com',
      ['https://www.googleapis.com/auth/analytics.readonly', 'https://www.googleapis.com/auth/prediction'],
      key)
  client.authorization = service_account.authorize

  analytics = client.discovered_api('analytics', 'v3')

  parameters = {
        'ids'         =&gt; "ga:12345",
        'start-date'  =&gt; (Date.today - 30).strftime("%Y-%m-%d"),
        'end-date'    =&gt; Time.now.strftime("%Y-%m-%d"),
        'metrics'     =&gt; "ga:avgTimeOnPage",
        'filters'     =&gt; "ga:pagePath=~/"
      }
  result = client.execute(:api_method =&gt; analytics.data.ga.get, :parameters =&gt; parameters)
</code></pre>

<p>This sample code demonstrates how <strong>google-api-client</strong> work.
However, I need to fetch different kinds of data such as specific pageviews, event, and campaign. I have to refactor it.</p>

<h2>4. Let's build a flexible code</h2>

<h2>4-1 create a module file: "ga.rb" in /lib/</h2>

<p>In above code, it can be seperated to 2 parts. One is uniform part, the other is variable part.</p>

<p>Unchange part</p>

<pre><code>@client = Google::APIClient.new(:application_name =&gt; 'Urcosme-GA-sync', :application_version =&gt; '1')
key_file = File.join("#{Rails.root}/config", 'ga_api_key_20150408.p12')
key = Google::APIClient::PKCS12.load_key(key_file, 'notasecret')
service_account = Google::APIClient::JWTAsserter.new(
          'hello@developer.gserviceaccount.com',
          ['https://www.googleapis.com/auth/analytics.readonly', 'https://www.googleapis.com/auth/prediction'],
          key)
@client.authorization = service_account.authorize
@analytics = @client.discovered_api('analytics', 'v3')
</code></pre>

<p>Change part. In this code, I already write some default parameters.
But, it can be rewrite in other place.</p>

<pre><code>@data_date = Date.today - 1
@parameters = {
    'ids'         =&gt; "ga:12345",
    'start-date'  =&gt; @data_date.strftime("%Y-%m-%d"),
    'end-date'    =&gt; @data_date.strftime("%Y-%m-%d"),
    'metrics'     =&gt; "",
    'dimensions'  =&gt; "",
    'max-results' =&gt; "10000"
}
</code></pre>

<p>And the whole code show as below.</p>

<p><strong>lib/ga.rb</strong></p>

<pre><code>require 'google/api_client'
require 'date'
module GoogleAnalytic

  # 每一個GA API執行前，需要初始化
  def initialize_ga
    @client = Google::APIClient.new(:application_name =&gt; 'Urcosme-GA-sync', :application_version =&gt; '1')
    key_file = File.join("#{Rails.root}/config", 'ga_api_key_20150408.p12')
    key = Google::APIClient::PKCS12.load_key(key_file, 'notasecret')
    service_account = Google::APIClient::JWTAsserter.new(
      'hello@developer.gserviceaccount.com',
      ['https://www.googleapis.com/auth/analytics.readonly', 'https://www.googleapis.com/auth/prediction'],
      key)
    @client.authorization = service_account.authorize
    @analytics = @client.discovered_api('analytics', 'v3')
    @data_date = Date.today - 1
    @parameters = {
        'ids'         =&gt; "ga:12345",
        'start-date'  =&gt; @data_date.strftime("%Y-%m-%d"),
        'end-date'    =&gt; @data_date.strftime("%Y-%m-%d"),
        'metrics'     =&gt; "",
        'dimensions'  =&gt; "",
        'max-results' =&gt; "10000"
      }
  end

  # 將資料儲存到MongoDB，請複寫我
  def sync_to_db(result)
  end
end
</code></pre>

<h2>4-2 let's Rails application know our lib</h2>

<p><strong>config/application.rb</strong></p>

<pre><code>module MyAwesomeApp
  class Application &lt; Rails::Application
    config.autoload_paths += %W(#{config.root}/lib)   end
end
</code></pre>

<h2>4-3 create a model to save API data</h2>

<p>Now I want to get all our campaign data. So I create ...</p>

<p>ps. I use MongoDB as database.</p>

<p><strong>app/models/ga_campaign.rb</strong></p>

<pre><code>class GACampaign
  include GoogleAnalytic
  include Mongoid::Document
  include Mongoid::Timestamps
  field :campaign_name, type: String      # 廣告活動名稱
  field :campaign_source, type: String    # 廣告活動來源    
  field :campaign_medium, type: String    # 廣告活動媒介
  field :campaign_content, type: String   # 廣告活動內容
  field :session, type: Integer
  field :pageview, type: Integer
  field :data_date, type: Date            # 原始資料的時間

  def get_campaign_from_ga_api
    initialize_ga
    @parameters['metrics'] = "ga:pageviews,ga:sessions"
    @parameters['dimensions'] = "ga:campaign,ga:source,ga:medium,ga:adContent"
    @parameters['filters'] = "ga:campaign!=(not set)"
    sync_to_db(@parameters)
  end

  def sync_to_db(parameters)
     request = {
        :api_method =&gt; @analytics.data.ga.get,
        :parameters =&gt; parameters
     }
    result = @client.execute(request)
    result.data.rows.each do |array_data|
        GACampaign.create(campaign_name:    array_data[0], 
                          campaign_source:  array_data[1], 
                          campaign_medium:  array_data[2],
                          campaign_content: array_data[3],
                          session:          array_data[4],
                          pageview:         array_data[5],
                          data_date:        @data_date)
    end
  end
end
</code></pre>

<p>But.... if result is more than max-result (according to google, maximun is 10000 <a href="https://developers.google.com/analytics/devguides/reporting/core/v3/reference#maxResults">see google doc</a>)</p>

<p>How can I do paginate?</p>

<h2>4-4 Google API pagination</h2>

<p>Since, this method will be used in every "GA model" so I put it in <strong>lib/ga.rb</strong></p>

<p>according to GA document</p>

<blockquote><p>If not supplied, the starting index is 1. (Result indexes are 1-based. That is, the first row is row 1, not row 0.) Use this parameter as a pagination mechanism along with the max-results parameter for situations when totalResults exceeds 10,000 and you want to retrieve rows indexed at 10,001 and beyond.</p></blockquote>

<p>here is my method. Not quiet good, but it's working.</p>

<pre><code>def query_paginate(parameters)
     request = {
      :api_method =&gt; @analytics.data.ga.get,
      :parameters =&gt; parameters
    }
    count = 0
    loop do
      result = @client.execute(request)
      sync_to_db(result)
      max_count = result.data.total_results / parameters["max-results"].to_i
      break if count == max_count
      count += 1
      request[:parameters]["start-index"] = parameters["max-results"].to_i * count + 1
    end
  end
</code></pre>

<p>let's see full code.</p>

<pre><code>require 'google/api_client'
require 'date'
module GoogleAnalytic

def initialize_ga
    @client = Google::APIClient.new(:application_name =&gt; 'Urcosme-GA-sync', :application_version =&gt; '1')
    key_file = File.join("#{Rails.root}/config", 'ga_api_key_20150408.p12')
    key = Google::APIClient::PKCS12.load_key(key_file, 'notasecret')
    service_account = Google::APIClient::JWTAsserter.new(
      'hello@developer.gserviceaccount.com',
      ['https://www.googleapis.com/auth/analytics.readonly', 'https://www.googleapis.com/auth/prediction'],
      key)
    @client.authorization = service_account.authorize
    @analytics = @client.discovered_api('analytics', 'v3')
    @data_date = Date.today - 1
    @parameters = {
        'ids'         =&gt; "ga:12345",
        'start-date'  =&gt; @data_date.strftime("%Y-%m-%d"),
        'end-date'    =&gt; @data_date.strftime("%Y-%m-%d"),
        'metrics'     =&gt; "",
        'dimensions'  =&gt; "",
        'max-results' =&gt; "10000"
      }
  end

  # 將資料儲存到MongoDB，請複寫我
  def sync_to_db(result)
  end

  # 如果API存取，外加換頁功能，因為GA一次request最多一萬筆資料
  def query_paginate(parameters)
     request = {
      :api_method =&gt; @analytics.data.ga.get,
      :parameters =&gt; parameters
    }
    count = 0
    loop do
      result = @client.execute(request)
      sync_to_db(result)
      max_count = result.data.total_results / parameters["max-results"].to_i
      break if count == max_count
      count += 1
      request[:parameters]["start-index"] = parameters["max-results"].to_i * count + 1
    end
  end
end
</code></pre>

<h3>4-5 refactor <strong>app/models/ga_campaign.rb</strong></h3>

<pre><code>class GACampaign
  include GoogleAnalytic
  include Mongoid::Document
  include Mongoid::Timestamps
  field :campaign_name, type: String      # 廣告活動名稱
  field :campaign_source, type: String    # 廣告活動來源
  field :campaign_medium, type: String    # 廣告活動媒介
  field :campaign_content, type: String   # 廣告活動內容
  field :session, type: Integer
  field :pageview, type: Integer
  field :data_date, type: Date            # 原始資料的時間

  def get_campaign_from_ga_api
    initialize_ga
    @parameters['metrics'] = "ga:pageviews,ga:sessions"
    @parameters['dimensions'] = "ga:campaign,ga:source,ga:medium,ga:adContent"
    @parameters['filters'] = "ga:campaign!=(not set)"
    query_paginate(@parameters)
  end

  def sync_to_db(result)
        result.data.rows.each do |array_data|
        GACampaign.create(campaign_name:    array_data[0], 
                          campaign_source:  array_data[1], 
                          campaign_medium:  array_data[2],
                          campaign_content: array_data[3],
                          session:          array_data[4],
                          pageview:         array_data[5],
                          data_date:        @data_date)
    end
  end
end
</code></pre>

<h3>4-6 how to use</h3>

<pre><code>ga_campaign = GACampaign.new
ga_campaign.get_campaign_from_ga_api
</code></pre>

<h3>4-7 other example: fetch GA Event data</h3>

<p>The things I have to change are <strong>@parameters</strong> and <strong>sync_to_db</strong></p>

<p>It's easy, right~</p>

<p><strong>app/models/ga_event.rb</strong></p>

<pre><code>class GAEvent
  include GoogleAnalytic
  include Mongoid::Document
  include Mongoid::Timestamps
  field :event_category, type: String      # 事件類別
  field :event_label, type: String         # 事件標籤
  field :event_action, type: String        # 事件動作
  field :total_events, type: Integer       
  field :unique_events, type: Integer
  field :data_date, type: Date            # 原始資料的時間

  def get_event_from_ga_api
    initialize_ga
    @parameters['metrics'] = "ga:totalEvents,ga:uniqueEvents"
    @parameters['dimensions'] = "ga:eventCategory,ga:eventLabel,ga:eventAction"
    @parameters['filters'] = "ga:eventCategory==test"
    query_paginate(@parameters)
  end

  def sync_to_db(result)
    result.data.rows.each do |array_data|
      GAEvent.create(event_category:      array_data[0], 
                     event_label:        array_data[1], 
                     event_action:       array_data[2],
                     total_events:       array_data[3],
                     unique_events:      array_data[4],
                     data_date:        @data_date)

    end
  end

end
</code></pre>
]]></content>
  </entry>
  
</feed>
