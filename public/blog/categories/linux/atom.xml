<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | AlohaCC]]></title>
  <link href="http://ccaloha.cc/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://ccaloha.cc/"/>
  <updated>2016-11-24T17:48:02+08:00</updated>
  <id>http://ccaloha.cc/</id>
  <author>
    <name><![CDATA[Aloha]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[HOWTO-Setup-Ubuntu-from-0-to-1]]></title>
    <link href="http://ccaloha.cc/blog/2013/04/22/howto-setup-ubuntu-from-0-to-1/"/>
    <updated>2013-04-22T15:11:00+08:00</updated>
    <id>http://ccaloha.cc/blog/2013/04/22/howto-setup-ubuntu-from-0-to-1</id>
    <content type="html"><![CDATA[<h3>先升級</h3>

<pre><code>sudo apt-get update
sudo apt-get upgrade
</code></pre>

<p>ps. 如果update失敗的話，請到</p>

<p>Ubuntu Software Center -> Edit -> Software Sources</p>

<p>把Download from 改成其他國家(我是把它改成Server for United States)</p>

<p>在試一次</p>

<h3>安裝vim</h3>

<pre><code>sudo apt-get install vim
</code></pre>

<h3>安裝Chrome</h3>

<pre><code>連到google 網址點選下載再安裝
</code></pre>

<!--more-->


<p></p>

<h3>安裝virtualbox</h3>

<pre><code>到Ubuntu Software Center 搜尋並安裝
</code></pre>

<h3>安裝vmplayer</h3>

<pre><code>sudo apt-get install build-essential linux-headers-$(uname -r)

Download the latest VMware player e.g. VMware-Player-3.1.4-385536.i386.bundle 

gksudo bash ./Downloads/VMware-Player-3.1.4-385536.i386.bundle

*如果需要解除安裝* vmware-installer -u vmware-player
</code></pre>

<h3>安裝顯示卡驅動程式</h3>

<pre><code>sudo apt-get install nvidia-current
</code></pre>

<p>ps. 之後，我螢幕就變得很漂亮了XD 我沒有做任設定</p>

<h3>安裝svn</h3>

<pre><code>sudo apt-get intsall subversion
</code></pre>

<h3>安裝pidgin</h3>

<p>聊天室功能 要有oc功能</p>

<pre><code>sido apt-get install pidgin  pidgin-sipe
</code></pre>

<p>ps. 因為現在lync 有bug , 所以在執行pidgin時，要先執行</p>

<pre><code>export NSS_SSL_CBC_RANDOM_IV=0
</code></pre>

<h3>安裝vnc server</h3>

<pre><code>sudo apt-get install vnc4server
</code></pre>

<h3>安裝vsftp</h3>

<pre><code>sudo apt-get install vsftp
</code></pre>

<h3>安裝retext</h3>

<pre><code>sudo apt-get install retext
</code></pre>

<h3>安裝foxitReader</h3>

<pre><code>請參考[How to Make Foxit Reader Work in Ubuntu 12.04 &amp; 11.10 Oneiric Ocelot?](http://www.hecticgeek.com/2012/02/foxit-reader-work-ubuntu-linux/)

PS.注意你是不是跟我一樣 用64 Bit
</code></pre>

<h3>安裝RoR</h3>

<p><a href="https://www.digitalocean.com/community/articles/how-to-install-ruby-on-rails-on-ubuntu-12-04-lts-precise-pangolin-with-rvm">How to Install Ruby on Rails on Ubuntu 12.04 LTS (Precise Pangolin) with RVM</a></p>

<pre><code>echo "source ~/.rvm/scripts/rvm" &gt;&gt; ~/.bashrc 
</code></pre>

<p>ps. 之後可能用到<a href="https://www.digitalocean.com/community/articles/how-to-install-rails-apache-and-mysql-on-ubuntu-with-passenger">How to Install Rails, Apache, and MySQL on Ubuntu with Passenger</a></p>

<p>如果bundle install時,遇到An error occured while installing pg (0.12.2)</p>

<pre><code>sudo apt-get install libpq-dev
</code></pre>

<h3>安裝TextMate-liked</h3>

<p><a href="http://blog.sudobits.com/2011/04/02/textmate-for-ubuntu-linux/">TextMate for Ubuntu Linux</a></p>

<p><a href="http://blog.sudobits.com/2012/03/06/top-10-gedit-plugins-for-programmers/">Top 10 gedit plugins for Programmers</a></p>

<h3>如果突然網路不通</h3>

<pre><code>sudo ifup -a
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RobotFramework for dummies]]></title>
    <link href="http://ccaloha.cc/blog/2012/02/04/robotframework-first-time-cook-book/"/>
    <updated>2012-02-04T22:16:00+08:00</updated>
    <id>http://ccaloha.cc/blog/2012/02/04/robotframework-first-time-cook-book</id>
    <content type="html"><![CDATA[<h2>1. 總體注意事項！</h2>

<ol type="a">
<li><p>每個變化！都要空兩格！ 不然都屬於一個變化</p></li>
<li><p>如果keyword的輸入變數要設成有default值的話，要寫在最後面！(後面的範例有)</p></li>
</ol>


<p> <!--more--></p>

<h2>2. 跑RF的執行檔 -  run.sh檔</h2>

<p>指令要跑的檔案為 <strong>my_TestCase.txt</strong></p>

<p>指定跑的log放在哪裡  還有可以設定輸出的檔名</p>

<p>以及指定這次跑的test case 是那些 (可以用關鍵字[Tags]來分,用include是代表"要跑"的tag,exclude是代表"不要跑"哪些)</p>

<pre><code>OUTDIR=test_result
COMMON_FLAGS="-d $OUTDIR"
pybot $COMMON_FLAGS -l my_log -r my_report -o my_output  --exclude=no_run $* my_TestCase.txt
</code></pre>

<p><strong>使用方式</strong></p>

<p>在放test case的資料夾底下執行！</p>

<h2>3. 善用__init__.txt檔</h2>

<p>將所有你會用到的資源！通通寫在這邊～以便管理</p>

<p>而且test case只要include這個檔案即可！其他keyword的txt檔都不需要在寫Setting</p>

<pre><code>*** Settings ***
Variables       resource/variable/my_variables.py
Library         OperatingSystem
Library         SSHLibrary   ${EMPTY}   ${EMPTY}   ${PROMPT}
Library         DatabaseLibrary
Library         StringLibrary
Resource        resource/variable/constant_var.txt
Resource        resource/keyword/keyword_local.txt
</code></pre>

<h2>4. Variable 寫法</h2>

<p>TXT檔(通常我會取名variable_XXX.txt)的寫法如下：</p>

<pre><code>*** Variables ***
${hello}            hahaha
#如果你要空格的話呢？
${hello_have_space} \ hahaha
</code></pre>

<p>PY檔(通常我會取名variable_XXX.py)的寫法如下：</p>

<pre><code>HOST =  "xx.xx.xx.xx"
SQL_SERVER = "xx.xx.xx.xx"
USERNAME =  "aloha"
PASSWORD =  "XXXXX"
PROMPT   =  "#"
</code></pre>

<h2>5. Keyword 寫法</h2>

<h4>a. 如果你的keyword需要帶參數,請服用 [Arguments]  參數名稱  …   …</h4>

<h4>b. 如果你的keyword需要回傳參數,請服用 [Return]  參數名稱  …   …</h4>

<h4>c. 如果你的keyword需要說明,請服用 [Documentation]  你的說明</h4>

<h4>d. 你會發現,keyword 裡頭也可以包其他keyword</h4>

<pre><code>*** Keywords ***
Login As Valid User
    Open Connection To Test Host
    Login  ${USERNAME}  ${PASSWORD}

Open Connection To Test Host
    Open Connection  ${HOST}

Set Test Case Keyword   [Arguments] ${keyword_name}
    Set Suite Variable  ${test_case_keyword}    ${keyword_name} 

Connect to Database
[Documentation]  連接到Database Server
Connect To Database  MySQLdb  要用的資料庫名稱  登入帳號  登入密碼  ${SQL_SERVER}  埠口 

Get ID from Database by element Name and table name
    [Arguments]  ${element_Name}  ${table_name}  ${limit script}=null
    Connect to Database
    ${queryResult_no_script} =  Run Keyword If  "${limit script}" == "null"  Query  select ${table_name}_id from ${table_name} where name='${element_Name}'
    ${queryResult_have_script} =  Run Keyword Unless  "${limit script}" == "null"  Query  select ${table_name}_id from ${table_name} where name='${element_Name}' ${limit script}
    ${queryResults} =  Set Variable If  "${limit script}" == "null"   ${queryResult_no_script}   ${queryResult_have_script} 
    Log  ${queryResults[0][0]}
    Disconnect From Database
    [Return]  ${queryResults[0][0]} 

To interact to HOST 
    [Arguments]  ${USERNAME}
    Login As Valid User 
    Write  cd /tmp
    Write  ls 
    Write  rm -f XXX
    Witre  sh what_is_your_name.sh
    Read Until  Input username :
    Write  ${USERNAME}
    SSHLibrary.Get File  /tmp/你的檔案位置  ${CURDIR}/你要放的位置  

To Get Time now and Using Operating_System_Library Modify file
    [Arguments]   ${txt_name}  ${cur_day}  ${next_hour}  ${input_user_id}  
    ${yyyy} ${mm}   ${dd} = Get Time  year,month,day
    ${cur_day} =  Run Keyword If  '${cur_day}' == 'today'  Get Time  day
    ${cur_hour} =  Get Time  hour
    ${tmp_hour} =  Convert To Integer  ${cur_hour}
    ${next_hour}=  Run Keyword If  '${next_hour}' == 'next_hour' Evaluate  ${tmp_hour}+${1}
    ${tmp_day}=   Convert To Integer  ${cur_day}
    ${next_day}=  Evaluate  ${tmp_day}+${1} 
    Run  sed -i \'s/Time = /Time = ${tmp_day} ${next_day} ${input_user_id}/g\' ${CURDIR}/${txt_name}

Using Selenium_Library Get Key
    [Setup]  Start Selenium Server
    Open Browser  ${login address}
    Maximize Browser Window
    call selenium api  click  //div[contains(@class,'XXXX')][text()='Show Key']
    ${Key}=  Get Text  //div[contains(@id,'Key')]
    Close Browser
    [Teardown]  Stop Selenium Server

Using String_Library replace escape char
    [Arguments]  ${KEY}
    ${after_reg}=  Replace String Using Regexp  ${KEY}  \/  \\/
    Log  ${after_reg}
</code></pre>

<h3>常用的keyword</h3>

<ol>
<li><p>Built-in Library</p>

<pre><code> Run Keyword If  /  Run Keyword Unless
 Set Variable If 
 Set Suite Variable
 Evaluate
 Get Time
 Convert To Integer
</code></pre></li>
<li><p>SSH Library</p>

<pre><code> Login
 Open Connection
 Write 
 Read Until
 Get File
</code></pre></li>
<li><p>Selenium Library</p>

<pre><code> Start Selenium Server  /  Stop Selenium Server
 Open Browser  /  Close Browser
 call selenium api 
</code></pre></li>
<li><p>String Library</p>

<pre><code> Replace String Using Regexp
</code></pre></li>
<li><p>Operating_System_Library</p>

<pre><code> Run 
</code></pre></li>
</ol>


<h2>6. TestCase寫法</h2>

<p><strong>盡量把test case 寫成可讀性高的描述！這也意味著可能你的keyword會變多～XD</strong></p>

<pre><code>Combine All Keywords in One Test Case 
    [Tags]  critical_test
    [Documentation]  使用DatabaseLibrary找尋我的username在user這個table，然後搜尋條件之一就是is_appear='1'
    ${MyUserNameID} =  Get ID from Database by element Name and table name  ${username}  user  and is_appear='1'
    [Documentation]  取得時間，使用OS Library調整我的test.txt檔  
    To Get Time now and Using Operating_System_Library Modify file  test.txt  today  next_hour  ${MyUserNameID}
    [Documentation]  用SSH Library 登入到Host 然後輸入文字my name is aloha
    To interact to HOST  my name is aloha
    [Documentation]  使用Selenium Library 取得網站的key
    Using Selenium_Library Get Key
    [Documentation]  使用String Library找出字串jadfksal;fed;lfsjfljsa\fdsa的跳脫字元
    Using String_Library replace escape char  jadfksal;fed;lfsjfljsa\fdsa
</code></pre>

<h2>最後的資料夾結構規劃</h2>

<pre><code>My_test_case_folder
    -&gt; my_TestCase.txt
    -&gt; __init__.txt
    -&gt; resource
        -&gt;keyword
            -&gt;keyword_local.txt
        -&gt;variable
            -&gt;variable_local.py
            -&gt;variable_constant.txt
    -&gt;test_result
</code></pre>

<p>後續會一直加....</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HOW-TO: Using Sikuli and RobotFramework in Linux Platform ]]></title>
    <link href="http://ccaloha.cc/blog/2012/01/05/how-to-using-sikuli-and-robotframework-in-linux-platform/"/>
    <updated>2012-01-05T13:38:00+08:00</updated>
    <id>http://ccaloha.cc/blog/2012/01/05/how-to-using-sikuli-and-robotframework-in-linux-platform</id>
    <content type="html"><![CDATA[<blockquote><p>首先，你必須先看過這篇文章 抓好 Sikuli <a href="http://ccaloha.cc/blog/2011/12/17/install-sikuli-in-ubuntu/">搞搞 Sikuli 在你的 Ubuntu</a></p></blockquote>

<p><strong>我會使用 windows RDP, 作為一個範例,在這之前,請先確保你的linux可以使用 # rdesktop</strong></p>

<blockquote><p>以下為我的簡單感想 , 在robot framework底下使用sikuli , 就是使用一個擴充的library</p></blockquote>

<!--more-->


<p></p>

<h2>目標 使用Sikuli，遠端登入到window桌面，進行format volume的動作</h2>

<ol>
<li><p>使用sikuli ide 把要點選的照片拍下來 (我個人覺得這個很費工....囧)</p>

<pre><code> sh /你的sikuli路徑/sikuli-ide.ti
</code></pre></li>
<li><p>建立個資料夾吧</p>

<pre><code> mkdir RobotSikuli
</code></pre></li>
<li><p>把剛剛拍的照片放到winFormatImage裡</p>

<pre><code>cd RobotSikuli
mkdir winFormatImage
mv 你剛剛用sikuli拍的照片檔路徑 winFormatImage   
</code></pre></li>
<li><p>開始撰寫你的library (因為要run在不同的三種window版本，所以寫得比較麻煩…科科)</p>

<pre><code> cd ..
 cd RobotSikuli
 mkdir WindowRDPFormatLibrary
 vim Format.py
</code></pre></li>
</ol>


<p><strong>python程式碼如下(這是小弟第一次寫python,請見諒)</strong></p>

<pre><code>    #coding=utf-8
    from __future__ import with_statement
    from sikuli.Sikuli import *

    addImagePath("winFormatImage")

"""
1. 在python2.6中，with正式成為了關鍵字所以在python2.5以前,要利用with的話,需要使用:Python代碼from __future__ import with_statement 
from __future__ import with_statement 它的原理如下:所有實現上下文協議的對像都包含以下三種方法:__context__()它返回一個自我管理的上下文對象
或者一個真正意義的上下文管理器__enter()__進入上下文管理器,開始迭代當with語句結束的時候,無論是正常結束還是拋出異常,都會執行__exit__(),該方法用於關閉資源連接
2. Your project is created. Add at least one you-name-it.py file to the source folder and put from sikuli.Sikuli import * as the first line.

"""
__version__ = '0.1'

class VolumeFormat(object):
    ROBOT_LIBRARY_SCOPE = 'GLOBAL'
    ROBOT_LIBRARY_VERSION = __version__

def __init__(self, platform):

    self.start_pictures = {'win2003' : "start2003.png" , 'winxp' : "startxp.png" , 'win2008' : "start2008.png"}
    self.start_picture = self.start_pictures[platform]

    self.control_panels = {'win2003' : "control_panel_2003.png" , "winxp" : "control_panel_xp.png" , 'win2008' : "control_panel_2008.png"}
    self.control_panel  = self.control_panels[platform]

    self.administrator_tools = {'win2003' : "administrator_tool2003.png" , 'winxp' : "administrator_toolxp.png" , 'win2008' : "administrator_tool2008.png"}
    self.administrator_tool = self.administrator_tools[platform]

    self.computer_managements = {'win2003' : "computer_management2003.png" , 'winxp' : "computer_managementxp.png" , 'win2008' : "computer_management2008.png"}
    self.computer_management = self.computer_managements[platform]

    self.disk_management =  {'win2003' : "disk_management2003.png" , 'winxp' : "disk_managementxp.png" , 'win2008' : "disk_management2008.png"} 
    self.disk_management = self.disk_management[platform]

    self.full_screens = {'win2003' : "full_screen2003.png" , 'winxp' : "full_screenxp.png" , 'win2008' : "full_screen2008.png"}
    self.full_screen = self.full_screens[platform]

    self.disk_unknowns = {'win2003' : "disk_unknown2003.png" , 'winxp' : "disk_unknownxp.png" , 'win2008' : "disk_unknown2008.png"}
    self.disk_unknown = self.disk_unknowns[platform]

    self.initial_disks = {'win2003' : "initial_disk2003.png" , 'winxp' : "initial_diskxp.png" , 'win2008' : "initial_disk2008.png"}
    self.initial_disk = self.initial_disks[platform]

    self.oks = {'win2003' : "ok2003.png" , 'winxp' : "okxp.png" , 'win2008' : "ok2008.png"}
    self.ok = self.oks[platform]

    self.link_volumes = {'win2003' : "link_vol2003.png" , 'winxp' : "link_volxp.png" , 'win2008' : "link_vol2008.png"}
    self.link_volume = self.link_volumes[platform]

    self.unformat_infos = {'win2003' : "unformat_info2003.png" , 'winxp' : "unformat_infoxp.png" , 'win2008' : "unformat_info2008.png"}
    self.unformat_info = self.unformat_infos[platform]

    self.new_partitions = {'win2003' : "new_partition2003.png" , 'winxp' : "new_partitionxp.png" , 'win2008' : "new_partition2008.png"}
    self.new_partition = self.new_partitions[platform]

    self.cancel_auto_partitions = {'win2003' : "cancel_auto_partition2003.png" , 'winxp' : "cancel_auto_partitionxp.png" , 'win2008' : "cancel_auto_partition2008.png"}
            self.cancel_auto_partition = self.cancel_auto_partitions[platform]

    self.next_bottoms = {'win2003' : "next2003.png" , 'winxp' : "nextxp.png" , 'win2008' : "next2008.png"}
    self.next_bottom = self.next_bottoms[platform]

    self.finishs = {'win2003' : "finish2003.png" , 'winxp' : "finishxp.png" , 'win2008' : "finish2008.png"}
    self.finish = self.finishs[platform]

    self.closes = {'win2003' : "close2003.png" , 'winxp' : "closexp.png" , 'win2008' : "close2008.png"}
    self.close = self.closes[platform]

def click_start(self):
    self._click(self.start_picture)

def click_control_panel(self):
    self._click(self.control_panel)

def click_administrator_tool(self, how_to_click = "click"):
    self._click(self.administrator_tool, how_to_click)

def click_computer_manager(self):
    self._click(self.computer_management)

def click_disk_management(self):
    self._click(self.disk_management)

def click_cancel_initial(self):
    self._click(self.cancel_auto_partition)

def click_full_screen(self):
    self._click(self.full_screen)

def click_link_vol(self):
    self._click(self.link_volume)

def click_right_for_initail_info(self):
    self._click(self.disk_unknown, how_to_click = "rightClick") 

def click_initial_Disk(self):
    self._click(self.initial_disk)

def click_ok(self):
    self._click(self.ok)

def click_right_for_new_partition(self):
    self._click(self.unformat_info, how_to_click = "rightClick")

def click_new_partion(self):
    self._click(self.new_partition)

def click_next(self):
    self._click(self.next_bottom)


def click_finish(self):
    self._click(self.finish)    

def click_close(self):
    self._click(self.close)

def click_what(self , image_name):
    self._click(image_name)

def _click(self,icon,icon_2 = None ,how_to_click="click"):

    findAll(Pattern(icon).similar(0.9))       
    allmatchs = getLastMatches()
    sort_allmatchs = sorted(allmatchs,key=lambda allmatchs:allmatchs.getScore())
    sort_allmatchs.reverse()
    match = sort_allmatchs[0]
    self.appCoordinates = (match.getX(), match.getY(), match.getW(), match.getH())
            appRegion = Region(*self.appCoordinates)        

    if how_to_click == "click":
        appRegion.click(icon)
            elif how_to_click == "doubleclick":
                    appRegion.doubleClick(icon)
    elif how_to_click == "rightClick": 
        appRegion.rightClick(icon)
    elif how_to_click == "hover":
        appRegion.hover(icon)
    elif how_to_click == "dragDrop":
        appRegion.doubleClick(icon_start,icon_stop)
</code></pre>

<ol>
<li><p>建立robotframework的測試碼</p>

<pre><code> cd ..
 mkdir robotCode
 cd robotCode
 vim format_win2008.txt
</code></pre></li>
</ol>


<p>程式碼如下：</p>

<p>因為我在python檔有寫__int__ 所以我在一開始就先丟個初始值給他(請看下句)</p>

<p>Library  Format.VolumeFormat  win2008</p>

<pre><code>    ***Settings***
    Library  Format.VolumeFormat  win2008
    Library  OperatingSystem

    ***Test Cases***
    Format Win2008 Volume
        Start Process  rdesktop -u 遠端VM的名字 -p 你的密碼 遠端的IP位置
        sleep  30
        click_start
        click_administrator_tool
        click_computer_manager
        sleep  10
        click_disk_management
        sleep  10
        [Documentation]  click_cancel_initial
        click_cancel_initial
        click_right_for_initail_info
        click_link_vol
        click_right_for_initail_info
        click_initial_Disk
        click_ok
        click_right_for_new_partition
        click_new_partion
        click_next
        click_next
        click_next
        click_next
        click_finish
        click_close
        [Teardown]      Stop All Processes
</code></pre>

<p><strong>重要的來了</strong></p>

<ol>
<li><p>寫執行檔！！！！這邊就是要告訴robot我還有其他lib要用～還有sikuli的jar檔要include進來</p>

<pre><code> vim run.sh
</code></pre></li>
</ol>


<p>程式碼如下：</p>

<pre><code>    #!/bin/bash
    export CLASSPATH="/home/alohacc/Sikuli-X-1.0rc3-r905-linux-i686/Sikuli-IDE/sikuli-script.jar"  

    export JYTHONPATH="$CLASSPATH/Lib"

    jybot --pythonpath WindowRDPFormatLibrary --outputdir results --loglevel TRACE -l Format_log -r Format_report -o Format_output $* robotCode
</code></pre>

<ol>
<li><p>我run.sh的程式碼 有一個輸出的dir位置，我先建一個給他</p>

<pre><code> mkdir results
</code></pre></li>
</ol>


<p>To sum up :</p>

<p>資料夾結構如下：</p>

<pre><code>RobotSikuli
  -&gt;results
  -&gt;WindowRDPFormatLibrary
        -&gt; Format.py
  -&gt;robotCode
        -&gt; format_win2008.txt
        -&gt; run.sh
  -&gt;winFormatImage
        -&gt; administrator_tool2003.png 
           change_to_original_view.png  
           control_panel_xp.png                             
            ……etc 
</code></pre>

<p>執行的話，就是下</p>

<pre><code>sh robotCode/run.sh
</code></pre>

<p>恭喜完成！！！</p>

<p>主要參考為</p>

<p><a href="http://blog.mykhailo.com/2011/02/how-to-sikuli-and-robot-framework.html">How-To: Sikuli and Robot Framework Integration</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HOWTO:AWS EC2 + AWS SES 迸出 Mail Server]]></title>
    <link href="http://ccaloha.cc/blog/2011/12/30/howto-aws-ec2-plus-aws-ses-equals-easy-mail-server/"/>
    <updated>2011-12-30T10:07:00+08:00</updated>
    <id>http://ccaloha.cc/blog/2011/12/30/howto-aws-ec2-plus-aws-ses-equals-easy-mail-server</id>
    <content type="html"><![CDATA[<p>主要參考兩篇文章</p>

<ol>
<li><p><a href="http://www.orderingdisorder.com/was/ses/">Simple Email Service</a></p>

<blockquote><p>注意別忘了下載，上面文章中的PHP檔</p></blockquote></li>
<li><p><a href="http://www.buildwebsite4u.com/advanced/php.shtml">Simple PHP mail script</a></p>

<blockquote><p>這邊我有改一個小地方</p></blockquote></li>
</ol>


<!--more-->


<p>
我的步驟如下</p>

<blockquote><p>在這之前 我已經申請好了EC2以及取得Access Key和Secret Key</p></blockquote>

<ol>
<li><p>申請SES服務</p></li>
<li><p>點選verify a New Sender</p></li>
<li><p>到你剛剛輸入的信箱 認證一下！</p></li>
<li><p>登入到你的EC2，然後到htdocs底下 (因為我是用SUSE)</p>

<pre><code> cd /src/www/htdocs/ 
</code></pre></li>
<li><p>開始先寫個index.html   -> vim index.html</p>

<pre><code> &lt;!DOCTYPE html&gt;
 &lt;html&gt;
 &lt;head&gt;&lt;title&gt;Send Mail to YOURSELF&lt;/title&gt;&lt;/head&gt;
 &lt;body&gt;
 &lt;form action="mail.php" method="POST"&gt;
 &lt;b&gt;Mail&lt;/b&gt;&lt;br&gt;
 &lt;input type="text" name="email" size=40&gt;
 &lt;p&gt;&lt;b&gt;Subject&lt;/b&gt;&lt;br&gt;
 &lt;input type="text" name="subject" size=40&gt;
 &lt;p&gt;&lt;b&gt;Message&lt;/b&gt;&lt;br&gt;
 &lt;textarea cols=40 rows=10 name="message"&gt;&lt;/textarea&gt;
 &lt;p&gt;&lt;input type="submit" value=" Send "&gt;
 &lt;/form&gt;
 &lt;/body&gt;
 &lt;/html&gt;
</code></pre></li>
<li><p>在寫個mail.php  -> vim mail.php</p>

<pre><code> &lt;html&gt;
 &lt;head&gt;&lt;title&gt;PHP Mail Sender Test&lt;/title&gt;&lt;/head&gt;
 &lt;body&gt;
 &lt;?php
 require_once('ses.php');
 $ses = new SimpleEmailService('你在AWS使用的Access Key', '你在AWS使用的Secret Key');

 $m = new SimpleEmailServiceMessage();

 /* All form fields are automatically passed to the PHP script through the array $HTTP_POST_VARS. */

 $email = $_REQUEST['email'];
 $subject = $_REQUEST['subject'];
 $message = $_REQUEST['message'];

 /* PHP form validation: the script checks that the Email field contains a valid email address and the Subject field isn't empty. preg_match performs a regular expression match. It's a very powerful PHP function to validate form fields and other strings - see PHP manual for details. */

 if (!preg_match("/\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*/", $email)) {
 echo "&lt;h4&gt;Invalid email address&lt;/h4&gt;";
 echo "&lt;a href='javascript:history.back(1);'&gt;Back&lt;/a&gt;";}
 elseif ($subject == "") {
 echo "&lt;h4&gt;No subject&lt;/h4&gt;";
 echo "&lt;a href='javascript:history.back(1);'&gt;Back&lt;/a&gt;";}
 /* Sends the mail and outputs the "Thank you" string if the mail is successfully sent, or the error string otherwise. */

 $m-&gt;addTo($email);
 $m-&gt;setFrom('helpitree@gmail.com');
 $m-&gt;setSubject($subject);
 $m-&gt;setMessageFromString($message);
 print_r($ses-&gt;sendEmail($m));

 ?&gt;
 &lt;/body&gt;
 &lt;/html&gt;
</code></pre></li>
<li><p>在把剛剛下載下來的PHP檔放上去</p>

<p> 你可以用scp 或是 直接複製貼上 …等</p></li>
<li><p>小功告成！</p></li>
</ol>


<p>ps. 因為我有出現curl.init() error的問題</p>

<p>我發現可能是因為我沒有安裝 php5-curl 所以中間我有灌了點東西</p>

<pre><code>zypper ref
zypper install php5-crul  
</code></pre>

<p>灌完之後就把apache server重開</p>

<pre><code>/etc/init.d/apache2 restart
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[安裝phpMyAdmin in AWS(SUSE 11 sp1)]]></title>
    <link href="http://ccaloha.cc/blog/2011/12/20/install-phpmyadmin-in-aws-suse-11-sp1/"/>
    <updated>2011-12-20T22:34:00+08:00</updated>
    <id>http://ccaloha.cc/blog/2011/12/20/install-phpmyadmin-in-aws-suse-11-sp1</id>
    <content type="html"><![CDATA[<p>以下真的是用倒推的方式去灌出來的…科科</p>

<p>不知道為甚麼 平台就是一堆有的沒的都沒有…囧</p>

<pre><code>zypper install phpMyAdmin
</code></pre>

<p>找不到phpMyAdmin的package！</p>

<p>於是乎</p>

<pre><code>zypper addrepo http://download.opensuse.org/repositories/server:/php:/applications/SLE_11/server:php:applications.repo
</code></pre>

<p>在執行一次</p>

<pre><code>zypper install phpMyAdmin
</code></pre>

<!--more-->


<p></p>

<p>出現</p>

<pre><code>問題： 無法提供 php-mysql (phpMyAdmin-3.4.8-27.1.noarch 需要此項目)
</code></pre>

<p>所以…</p>

<pre><code>zypper addrepo http://download.opensuse.org/repositories/server:/php/SLE_11/server:php.repo
</code></pre>

<p>然後再試看看</p>

<pre><code>zypper install php5-mysql
</code></pre>

<p>咦～看起來好像都ＯＫ，所以就繼續安裝phpMyAdmin吧…結果…</p>

<pre><code>zypper install phpMyAdmin

問題： phpMyAdmin-3.4.8-27.1.noarch 需要 php-mcrypt，但無法提供此需求
</code></pre>

<p>囧......所以我就又安裝了</p>

<pre><code>zypper install php5-mcrypt
</code></pre>

<p>結果…</p>

<pre><code>問題： 無法提供 libltdl.so.7 (php5-mcrypt-5.3.8-120.1.i586 需要此項目)
</code></pre>

<p>挖哩勒，所以我又</p>

<pre><code>zypper addrepo http://download.opensuse.org/repositories/Base:/System/SLE_11_SP1/Base:System.repo

zypper update libltdl7
</code></pre>

<p>但是他建議我安裝，所以我又改成了下面那行</p>

<pre><code>zypper install libltdl7-2.4.2-45.1.x86_64
</code></pre>

<p>ＯＫ～繼續Go吧…剛剛裝到php5-mcrypt</p>

<pre><code>zypper install php5-mcrypt
</code></pre>

<p>又來了…</p>

<pre><code>問題： 無法提供 libmcrypt.so.4 (php5-mcrypt-5.3.8-120.1.i586 需要此項目)
</code></pre>

<p>所以我又裝了</p>

<pre><code>zypper addrepo http://download.opensuse.org/repositories/security:/privacy/SLE_11_SP1/security:privacy.repo

zypper install libmcrypt
</code></pre>

<p>之後再回來裝</p>

<pre><code>zypper install php5-mcrypt
</code></pre>

<p>耶！成功了～</p>

<p>ＯＫ～繼續來</p>

<pre><code>zypper install phpMyAdmin
</code></pre>

<p>幹</p>

<pre><code>問題： phpMyAdmin-3.4.8-27.1.noarch 需要 php-gd，但無法提供此需求
</code></pre>

<p>於是我裝了</p>

<pre><code>zypper install php5-gd
</code></pre>

<p>結果…</p>

<pre><code>問題： 無法提供 libt1.so.5 (php5-gd-5.3.8-120.1.i586 需要此項目)
</code></pre>

<p>於是我又</p>

<pre><code>zypper addrepo http://download.opensuse.org/repositories/devel:/libraries:/c_c++/SLE_11/devel:libraries:c_c++.repo

zypper install t1lib
</code></pre>

<p>再來回到剛剛的安裝</p>

<pre><code>zypper install php5-gd
</code></pre>

<p>最後</p>

<pre><code>zypper install phpMyAdmin
</code></pre>

<p>終於！大功告成了…科科</p>

<blockquote><p>Sum up :</p></blockquote>

<pre><code>zypper addrepo http://download.opensuse.org/repositories/server:/php:/applications/SLE_11/server:php:applications.repo

zypper addrepo http://download.opensuse.org/repositories/server:/php/SLE_11/server:php.repo

zypper addrepo http://download.opensuse.org/repositories/devel:/libraries:/c_c++/SLE_11/devel:libraries:c_c++.repo

zypper addrepo http://download.opensuse.org/repositories/security:/privacy/SLE_11_SP1/security:privacy.repo

zypper addrepo http://download.opensuse.org/repositories/Base:/System/SLE_11_SP1/Base:System.repo

zypper install php5-mysql

zypper install libltdl7-2.4.2-45.1.x86_64   

zypper install libmcrypt

zypper install t1lib

zypper install php5-mcrypt

zypper install php5-gd

zypper install phpMyAdmin
</code></pre>
]]></content>
  </entry>
  
</feed>
