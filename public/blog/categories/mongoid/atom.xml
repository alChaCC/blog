<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Mongoid | AlohaCC]]></title>
  <link href="http://ccaloha.cc/blog/categories/mongoid/atom.xml" rel="self"/>
  <link href="http://ccaloha.cc/"/>
  <updated>2016-01-06T14:02:52+08:00</updated>
  <id>http://ccaloha.cc/</id>
  <author>
    <name><![CDATA[Aloha]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails Development Using Mongoid 5.0.0 - 2. How to use Aggregation to get pageview data]]></title>
    <link href="http://ccaloha.cc/blog/2016/01/06/ruby-on-rails-development-using-mongoid-5-dot-0-0-2-how-to-use-aggregation-to-get-pageview-data/"/>
    <updated>2016-01-06T13:57:37+08:00</updated>
    <id>http://ccaloha.cc/blog/2016/01/06/ruby-on-rails-development-using-mongoid-5-dot-0-0-2-how-to-use-aggregation-to-get-pageview-data</id>
    <content type="html"><![CDATA[<p>What is Aggregation ?</p>

<blockquote><p>Aggregations are operations that process data records and return computed results.</p></blockquote>

<p>In my opinion, it just like queries but it can do some operations step by step when processing the query just like a pipeline.</p>

<p><img src='https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/Ruby%20on%20Rails%20Development%20Using%20Mongoid%20-%202%20How%20to%20use%20Aggregation%20to%20get%20pageview%20data/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202016-01-05%2017.31.06.png' alt='MongoDB Aggregation'></p>

<p>if you want more details, please check <a href="https://docs.mongodb.org/manual/core/aggregation-introduction/">official documents</a></p>

<!--more-->


<p>Here are my models,</p>

<p><img src='https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/Ruby%20on%20Rails%20Development%20Using%20Mongoid%20-%202%20How%20to%20use%20Aggregation%20to%20get%20pageview%20data/model.png' alt='aggregation model example'></p>

<h2>Get Data using "match"</h2>

<p>If I want to find pageview from 2016/1/1 to 2016/1/5</p>

<p>```
sort_stage = {</p>

<pre><code>    '$sort' =&gt; { 'created_at' =&gt; 1 }
}
</code></pre>

<p>match_stage = {</p>

<pre><code>      '$match' =&gt; {
        "created_at" =&gt; {
          "$gte" =&gt; Time.parse('2016-01-01').beginning_of_day, 
          "$lte" =&gt; Time.parse('2016-01-05').end_of_day
        }
      }
    }
</code></pre>

<p>result = PageTracking.collection.aggregate([sort_stage,match_stage])
result.each do |page|
  puts page
end
```
Here is my result:</p>

<p><code>
{"_id"=&gt;BSON::ObjectId('568a1ef77db99bc968000002'), "pathname"=&gt;"/", "daily_total_count"=&gt;2, "created_at"=&gt;2016-01-03 16:00:00 UTC, "user_id"=&gt;BSON::ObjectId('568a1ef77db99bc968000000'), "updated_at"=&gt;2016-01-04 07:27:51 UTC }
{"_id"=&gt;BSON::ObjectId('568b28ad7db99b1ae8000002'), "pathname"=&gt;"/", "daily_total_count"=&gt;1, "created_at"=&gt;2016-01-04 16:00:00 UTC, "user_id"=&gt;BSON::ObjectId('568b28ad7db99b1ae8000000'), "updated_at"=&gt;2016-01-05 02:21:33 UTC}
{"_id"=&gt;BSON::ObjectId('568b28e67db99b1ae8000005'), "pathname"=&gt;"/", "daily_total_count"=&gt;3, "created_at"=&gt;2016-01-04 16:00:00 UTC, "user_id"=&gt;BSON::ObjectId('568b28e67db99b1ae8000003'), "updated_at"=&gt;2016-01-05 02:22:30 UTC}
{"_id"=&gt;BSON::ObjectId('568b7d307db99b9a30000011'), "pathname"=&gt;"/activities", "daily_total_count"=&gt;1, "created_at"=&gt;2016-01-04 16:00:00 UTC, "user_id"=&gt;BSON::ObjectId('568b28e67db99b1ae8000003'), "updated_at"=&gt;2016-01-05 08:22:08 UTC}
{"_id"=&gt;BSON::ObjectId('568b7d8e7db99b9a30000013'), "pathname"=&gt;"/activities/hadalabo01", "daily_total_count"=&gt;1, "created_at"=&gt;2016-01-04 16:00:00 UTC, "user_id"=&gt;BSON::ObjectId('568b28e67db99b1ae8000003'), "updated_at"=&gt;2016-01-05 08:23:42 UTC}
{"_id"=&gt;BSON::ObjectId('568b7e5e7db99b9a30000017'), "pathname"=&gt;"/beautybuzz", "daily_total_count"=&gt;1, "created_at"=&gt;2016-01-04 16:00:00 UTC, "user_id"=&gt;BSON::ObjectId('568b28e67db99b1ae8000003'), "updated_at"=&gt;2016-01-05 08:27:10 UTC}
{"_id"=&gt;BSON::ObjectId('568b78c07db99b9a30000001'), "pathname"=&gt;"/beautynews", "daily_total_count"=&gt;1, "created_at"=&gt;2016-01-04 16:00:00 UTC, "user_id"=&gt;BSON::ObjectId('568b28e67db99b1ae8000003'), "updated_at"=&gt;2016-01-05 08:03:12 UTC}
</code></p>

<p>ps. I add a sort stage in front of match stage due to the official suggestion.<a href="https://docs.mongodb.org/manual/core/aggregation-pipeline-optimization/#sort-match-sequence-optimization">Aggregation Pipeline Optimization</a></p>

<h2>Group Data using "group"</h2>

<p>Oops, in fact, I want all records with <strong>pathname => '/'</strong> should be summed up to one record just like <strong>group_by</strong> in MySQL</p>

<p>So, we can add a new stage</p>

<p>```
group_stage = {</p>

<pre><code>      "$group" =&gt; {
        "_id" =&gt; {
          "pathname" =&gt; "$pathname"
        },
        "page_count" =&gt; { "$sum" =&gt; "$daily_total_count" }
      }
     }
</code></pre>

<p>result = PageTracking.collection.aggregate([sort_stage,match_stage,group_stage])</p>

<p>result.each do |page|
  puts page
end</p>

<p>```</p>

<p>which mean we can group by "pathname" and when we do grouping we can sum all daily_total_count into "page_count"</p>

<p>Here is my result</p>

<p><code>
{"_id"=&gt;{"pathname"=&gt;"/beautybuzz"}, "page_count"=&gt;1}
{"_id"=&gt;{"pathname"=&gt;"/activities/hadalabo01"}, "page_count"=&gt;1}
{"_id"=&gt;{"pathname"=&gt;"/activities"}, "page_count"=&gt;1}
{"_id"=&gt;{"pathname"=&gt;"/beautynews"}, "page_count"=&gt;1}
{"_id"=&gt;{"pathname"=&gt;"/"}, "page_count"=&gt;6}
</code></p>

<h2>Add more information while grouping Data using "push"</h2>

<p>Ok, great! But, I got an another requirement, Hi, Aloha, Can you tell me that who see each pages?</p>

<p>Easy, let's add some codes in group_stage</p>

<p>```
group_stage = {</p>

<pre><code>      "$group" =&gt; {
        "_id" =&gt; {
          "pathname" =&gt; "$pathname"
        },
        "page_count" =&gt; { "$sum" =&gt; "$daily_total_count" },
        "users" =&gt; {
          "$push" =&gt; {
            "user" =&gt; "$user_id"
          }
        }
      }
     }
</code></pre>

<p>result = PageTracking.collection.aggregate([sort_stage,match_stage,group_stage])</p>

<p>result.each do |page|
  puts page
end</p>

<p>```</p>

<p>Here is my result</p>

<p><code>
{"_id"=&gt;{"pathname"=&gt;"/beautybuzz"}, "page_count"=&gt;1, "users"=&gt;[{"user"=&gt;BSON::ObjectId('568b28e67db99b1ae8000003')}]}
{"_id"=&gt;{"pathname"=&gt;"/activities/hadalabo01"}, "page_count"=&gt;1, "users"=&gt;[{"user"=&gt;BSON::ObjectId('568b28e67db99b1ae8000003')}]}
{"_id"=&gt;{"pathname"=&gt;"/activities"}, "page_count"=&gt;1, "users"=&gt;[{"user"=&gt;BSON::ObjectId('568b28e67db99b1ae8000003')}]}
{"_id"=&gt;{"pathname"=&gt;"/beautynews"}, "page_count"=&gt;1, "users"=&gt;[{"user"=&gt;BSON::ObjectId('568b28e67db99b1ae8000003')}]}
{"_id"=&gt;{"pathname"=&gt;"/"}, "page_count"=&gt;6, "users"=&gt;[{"user"=&gt;BSON::ObjectId('568a1ef77db99bc968000000')}, {"user"=&gt;BSON::ObjectId('568b28ad7db99b1ae8000000')}, {"user"=&gt;BSON::ObjectId('568b28e67db99b1ae8000003')}]}
</code></p>

<p>Cool, our aggregation run smoothly.</p>

<h2>Aggregate Big Data</h2>

<p>After 3 months, we found that some fetch pageview operations will fail.</p>

<p>Oops, since these fetch operations use big time range (ex: get pageview data from 2015/9/1 ~ 2016/1/1)</p>

<p>```
match_stage = {</p>

<pre><code>      '$match' =&gt; {
        "created_at" =&gt; {
          "$gte" =&gt; Time.parse('2015-09-01').beginning_of_day, 
          "$lte" =&gt; Time.parse('2016-01-01').end_of_day
        }
      }
    }
</code></pre>

<p>result = PageTracking.collection.aggregate([sort_stage,match_stage,group_stage])</p>

<p>result.each do |page|
  puts page
end</p>

<p>```</p>

<p>I got this error message:</p>

<p><code>
aggregate | FAILED | exception: Exceeded memory limit for $group, but didn't allow external sort. Pass allowDiskUse:true to opt in. (16945) | 9.955263s
Mongo::Error::OperationFailure: exception: Exceeded memory limit for $group, but didn't allow external sort. Pass allowDiskUse:true to opt in. (16945)
</code></p>

<p>How can we solve this problem?</p>

<p>Just like message says, add <strong>allowDiskUse:true</strong> to it.</p>

<p>```
result = PageTracking.collection.aggregate(</p>

<pre><code>        [sort_stage,match_stage,group_stage],
        :allow_disk_use =&gt; true
      )
</code></pre>

<p>result.each do |page|
  puts page
end
```</p>

<p>Yay, bug fixed.</p>

<p><code>
...
you will got a lots of data ....
...
</code></p>

<h2>Limit data using "limit"</h2>

<p>if you just want 1000 data pass to next stage</p>

<p>```
sort_stage = {</p>

<pre><code>    '$sort' =&gt; { 'created_at' =&gt; -1 }
}
</code></pre>

<p>limit_stage = {</p>

<pre><code>  '$limit' =&gt; 1000
}
</code></pre>

<p>result = UserPageTracking.collection.aggregate(</p>

<pre><code>  [sort_stage, limit_stage , match_stage, group_stage],
  :allow_disk_use =&gt; true
)
</code></pre>

<p>result.each do |page|
  puts page
end
```</p>

<h2>Only want some specific data using "project"</h2>

<p>If fact, we don't need created_at, updated_at attributes in group stage, so we can ...</p>

<p>```
project_stage =</p>

<pre><code>  { 
    "$project" =&gt; { user_id: 1, pathname: 1, daily_total_count: 1}
  }
</code></pre>

<p>result = PageTracking.collection.aggregate(</p>

<pre><code>        [sort_stage,match_stage, project_stage, group_stage]
      )
</code></pre>

<p>result.each do |page|
  puts page
end</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails Development using Mongoid 5.0.0 - 1. Setup MongoDB]]></title>
    <link href="http://ccaloha.cc/blog/2015/10/03/ruby-on-rails-using-mongoid-5-dot-0-0-setup-mongodb/"/>
    <updated>2015-10-03T22:33:34+08:00</updated>
    <id>http://ccaloha.cc/blog/2015/10/03/ruby-on-rails-using-mongoid-5-dot-0-0-setup-mongodb</id>
    <content type="html"><![CDATA[<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/Ruby%20on%20Rails%20Development%20using%20Mongoid%205.0.0%20-%20Setup%20MongoDB/MongoDB-Logo.png" alt="MongoDB"></p>

<p>This tutorial series will help you start your Rails project with MongoDB.</p>

<p>And I use Mongoid 5.0.0 as an example.</p>

<p>In this tutorial, you will be able to see how to</p>

<ol>
<li><p>Install MongoDB in Mac OSX</p></li>
<li><p>Create Some Database Users in MongoDB</p></li>
<li><p>Setup Rails Projects</p></li>
</ol>


<p>(Tips)</p>

<ol>
<li><p>Dump Data</p></li>
<li><p>Restore Data</p></li>
</ol>


<p>Let's go !</p>

<!--more-->


<h2>Install MongoDB in Mac OSX</h2>

<p>```</p>

<h1>Intall Homebrew (Mac OSX package manager)</h1>

<p>ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"</p>

<h1>Update the Hombrew packages first</h1>

<p>brew update</p>

<h1>Install MongoDB</h1>

<p>brew install MongoDB
```</p>

<p>If you want to see where MongoDB is installed</p>

<p><code>
brew ls mongodb
</code></p>

<h2>Create Some Database Users in MongoDB</h2>

<p>Since I want to enable access control on a MongoDB instance, just like Mysql, I have to use username and password to access MongoDB.</p>

<p>First, you must to know where you can setup MongoDB.</p>

<p>```</p>

<h1>In MacOSX</h1>

<p>vim /usr/local/etc/mongod.conf</p>

<h1>In Ubuntu</h1>

<p>vim /etc/mongod.conf
```</p>

<p>Second, you have to make sure that authorization is disable.</p>

<p>In MacOSX</p>

<p>```</p>

<h1>/usr/local/etc/mongod.conf</h1>

<p>systemLog:
  destination: file
  path: /usr/local/var/log/mongodb/mongo.log
  logAppend: true
storage:
  dbPath: /usr/local/var/mongodb
net:
  bindIp: 127.0.0.1
security:
  authorization: disabled
```</p>

<p>In Ubuntu</p>

<p>```</p>

<h1>/etc/mongod.conf</h1>

<p>...</p>

<p>noauth = true
...</p>

<p>```</p>

<p>Then (re)start MongoDB</p>

<p>```</p>

<h1>In Ubuntu</h1>

<p>sudo service mongod restart</p>

<h1>In Mac OSX</h1>

<p>mongod --config /usr/local/etc/mongod.conf
```</p>

<p>Ok, now you are a super user, you can access any database and perform any action. let's create an administrator named 'siteUserAdmin' and he has "userAdminAnyDatabase" role first.</p>

<p><code>
$ mongo
$ use admin
$ db.createUser(
 {
  user: 'siteUserAdmin',
  pwd: '1234567890',
  roles: [ { role: "userAdminAnyDatabase", db: "admin" } ]
 }
)
</code></p>

<p>Ok, now we can enable authorization mode.</p>

<p>In MacOSX</p>

<p>```</p>

<h1>vim /usr/local/etc/mongod.conf</h1>

<p>...</p>

<p>security:
  authorization: enabled
```</p>

<p>In Ubuntu</p>

<p>```</p>

<h1>/etc/mongod.conf</h1>

<p>...</p>

<p>auth = true
...</p>

<p>```</p>

<p>And don't forgot restart MongoDB.</p>

<p>Then we now have to use user name and password to access database.</p>

<p><code>
mongo --host localhost --port 27017 --username siteUserAdmin --password  --authenticationDatabase admin
</code></p>

<p>Now, we will create an user  named 'dbadmin' who has 'dbOwner' role.</p>

<p>```</p>

<h1>assume your project will use database: 'your_awesome_project_development'</h1>

<p>use your_awesome_project_development</p>

<p>db.createUser(</p>

<pre><code>{
    user: 'dbadmin',
    pwd: '1234567890',
    roles: [ { role: "dbOwner", db: "your_awesome_project_development" } ]
}
</code></pre>

<p>)
```</p>

<p>if you want to update user's setting.</p>

<p>```
db.updateUser(</p>

<pre><code>"dbadmin",
{
    pwd: 'aloha',
    roles: 
      [
          {role: "read", db: "your_awesome_project_development"}
      ]
}
</code></pre>

<p>)
```</p>

<p>if you want to know which roles can perform which  actions, you can find anwser here:</p>

<p><a href="http://docs.mongodb.org/master/reference/built-in-roles/#userAdmin">http://docs.mongodb.org/master/reference/built-in-roles/#userAdmin</a></p>

<h2>Setup Rails Projects</h2>

<h3>1. create a project without active-record</h3>

<p><code>
rails new your_awesome_project --skip-active-record
</code></p>

<h3>2. add Mongoid to Gemfile</h3>

<p>```</p>

<h1>Gemfile</h1>

<p>gem 'mongoid', '~> 5.0.0'
```</p>

<h3>3. Create a mongoid.yml</h3>

<p><code>
bundle install
rails g mongoid:config
</code></p>

<h3>4. Update yout mongoid.yml</h3>

<p>```
development:
  clients:</p>

<pre><code>default:
  database: your_awesome_project_development
  hosts:
    - localhost:27017
  options:
    user: 'dbadmin'
    password: '1234567890'
    roles:
      - 'dbOwner'
</code></pre>

<p>test:
  clients:</p>

<pre><code>default:
  database: your_awesome_project_test
  hosts:
    - localhost:27017
  options:
    max_retries: 1
    retry_interval: 0
    user: 'dbadmin_tester'
    password: '1234567890'
    roles:
      - 'dbOwner'
</code></pre>

<p>```</p>

<h2>Dump Data</h2>

<p>Please make sure that you have backup role in production MongoDB.</p>

<p>I use 'readWriteAnyDatabase' role.</p>

<p>Assume that you need to dump data from production data and restore to local mongo server.</p>

<p><code>
mongodump --host your.production.mongo.server.ip --port 37017 --username user --password --out /Users/AlohaCC/Desktop/production-mongodump-2015-10-04
</code></p>

<h2>Restore Data</h2>

<p>Please make sure that you have backup role in local MongoDB.</p>

<p><code>
mongorestore --host localhost --port 3017 --username user --password  /Users/AlohaCC/Desktop/production-mongodump-2015-10-04
</code></p>
]]></content>
  </entry>
  
</feed>
