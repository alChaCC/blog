<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Google Analytics | AlohaCC]]></title>
  <link href="http://ccaloha.cc/blog/categories/google-analytics/atom.xml" rel="self"/>
  <link href="http://ccaloha.cc/"/>
  <updated>2015-06-14T15:31:37+08:00</updated>
  <id>http://ccaloha.cc/</id>
  <author>
    <name><![CDATA[Aloha]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[howto] Using Google Analytics Enhanced Ecommerce Tracking your awesome website via Ruby on Rails 如何在Ruby on Rails使用Google Analytics 進階電子商務追蹤]]></title>
    <link href="http://ccaloha.cc/blog/2015/04/13/howto-use-google-analytics-enhanced-ecommerce-tracking-via-ruby-on-rails/"/>
    <updated>2015-04-13T12:15:58+08:00</updated>
    <id>http://ccaloha.cc/blog/2015/04/13/howto-use-google-analytics-enhanced-ecommerce-tracking-via-ruby-on-rails</id>
    <content type="html"><![CDATA[<blockquote><p>i-TRUE 的目標是成為全世界最棒的專業型Database Media Company</p>

<p>我每週一早上負責跟同事們介紹Google Analytics，這是其中一個介紹投影片！</p>

<p>陸續更新中...</p></blockquote>

<iframe id="iframe_container" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen="" width="550" height="400" src="https://prezi.com/embed/w0azjc2vz3tf/?bgcolor=ffffff&amp;lock_to_path=0&amp;autoplay=0&amp;autohide_ctrls=0#"></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Integrate Ruby on Rails with Google Analytics API]]></title>
    <link href="http://ccaloha.cc/blog/2015/04/09/integrate-ruby-on-rails-with-google-analytics-api/"/>
    <updated>2015-04-09T22:32:24+08:00</updated>
    <id>http://ccaloha.cc/blog/2015/04/09/integrate-ruby-on-rails-with-google-analytics-api</id>
    <content type="html"><![CDATA[<p>In this article, I try to get some Google Analytics data via Google API. Then, I saved data into MongoDB waiting for further calculation.</p>

<p>And you are able to learn</p>

<ol>
<li>How I do Google API pagination</li>
<li>How I use module to build flexible function</li>
<li>How I use Google Query Explorer to speed up development</li>
<li>How to apply for google API access</li>
</ol>


<p>Let's check it out.</p>

<!-- more -->


<h2>Step 1. Apply Google Analytics API access authorization</h2>

<h3>1-1 go to <a href="https://code.google.com/apis/console/">Google API console</a></h3>

<h3>1-2 Find Google Analytics API</h3>

<p> <img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/Integrate%20Ruby%20on%20Rails%20with%20Google%20Analytics%20API/find_google_api.png" alt="find google api"></p>

<h3>1-3 Enable Google Analytics API</h3>

<p> <img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/Integrate%20Ruby%20on%20Rails%20with%20Google%20Analytics%20API/Enable%20Google%20Analytic%20API.png" alt="enable google analytics API"></p>

<h3>1-4 Create New Client ID</h3>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/Integrate%20Ruby%20on%20Rails%20with%20Google%20Analytics%20API/Create%20New%20Client%20ID.png" alt="Create New Client ID"></p>

<h3>1-5 Choose client type</h3>

<p>Since this is for server-to-server usage, I choose this</p>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/Integrate%20Ruby%20on%20Rails%20with%20Google%20Analytics%20API/Choose%20client%20type.png" alt="Choose client type"></p>

<h3>1-6 Download key</h3>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/Integrate%20Ruby%20on%20Rails%20with%20Google%20Analytics%20API/download%20key.png" alt="download key"></p>

<p>ps. Since I use Ruby on Rails, so I put it in <strong>config/ga_api_key_20150408.p12</strong></p>

<h3>1-7 Add API user into your GA user group</h3>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/Integrate%20Ruby%20on%20Rails%20with%20Google%20Analytics%20API/Add%20API%20user%20into%20your%20GA%20user%20group.png"></p>

<h2>2. [TIPS] Use Google Query Explorer to speed up development</h2>

<h3>1. Go to <a href="https://ga-dev-tools.appspot.com/query-explorer/">Google Query Explorer</a></h3>

<h3>2. Get your view id</h3>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/Integrate%20Ruby%20on%20Rails%20with%20Google%20Analytics%20API/Get%20your%20view%20id.png"></p>

<h3>3. Try your query parameter first and know how your data look like</h3>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/Integrate%20Ruby%20on%20Rails%20with%20Google%20Analytics%20API/Try%20your%20query%20parameter%20first.png"></p>

<p>And it provides a easy tool that you don't need to remember any parameters.</p>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/Integrate%20Ruby%20on%20Rails%20with%20Google%20Analytics%20API/parameter%20tool.png"></p>

<h2>3. Let's write a sample code</h2>

<h3>3-1 Add gem to Gemfile</h3>

<pre><code>gem 'google-api-client'
</code></pre>

<h3>3-2 create a rb file</h3>

<p>I update some codes copied from this page.<a href="https://gist.github.com/joost/5344705">https://gist.github.com/joost/5344705</a></p>

<pre><code>  require 'google/api_client'
  require 'date'

  client = Google::APIClient.new(:application_name =&gt; 'Urcosme-GA-sync', :application_version =&gt; '1')

  key_file = File.join("#{Rails.root}/config", 'ga_api_key_20150408.p12')
  key = Google::APIClient::PKCS12.load_key(key_file, 'notasecret')
  service_account = Google::APIClient::JWTAsserter.new(
      'hello@developer.gserviceaccount.com',
      ['https://www.googleapis.com/auth/analytics.readonly', 'https://www.googleapis.com/auth/prediction'],
      key)
  client.authorization = service_account.authorize

  analytics = client.discovered_api('analytics', 'v3')

  parameters = {
        'ids'         =&gt; "ga:12345",
        'start-date'  =&gt; (Date.today - 30).strftime("%Y-%m-%d"),
        'end-date'    =&gt; Time.now.strftime("%Y-%m-%d"),
        'metrics'     =&gt; "ga:avgTimeOnPage",
        'filters'     =&gt; "ga:pagePath=~/"
      }
  result = client.execute(:api_method =&gt; analytics.data.ga.get, :parameters =&gt; parameters)
</code></pre>

<p>This sample code demonstrates how <strong>google-api-client</strong> work.
However, I need to fetch different kinds of data such as specific pageviews, event, and campaign. I have to refactor it.</p>

<h2>4. Let's build a flexible code</h2>

<h2>4-1 create a module file: "ga.rb" in /lib/</h2>

<p>In above code, it can be seperated to 2 parts. One is uniform part, the other is variable part.</p>

<p>Unchange part</p>

<pre><code>@client = Google::APIClient.new(:application_name =&gt; 'Urcosme-GA-sync', :application_version =&gt; '1')
key_file = File.join("#{Rails.root}/config", 'ga_api_key_20150408.p12')
key = Google::APIClient::PKCS12.load_key(key_file, 'notasecret')
service_account = Google::APIClient::JWTAsserter.new(
          'hello@developer.gserviceaccount.com',
          ['https://www.googleapis.com/auth/analytics.readonly', 'https://www.googleapis.com/auth/prediction'],
          key)
@client.authorization = service_account.authorize
@analytics = @client.discovered_api('analytics', 'v3')
</code></pre>

<p>Change part. In this code, I already write some default parameters.
But, it can be rewrite in other place.</p>

<pre><code>@data_date = Date.today - 1
@parameters = {
    'ids'         =&gt; "ga:12345",
    'start-date'  =&gt; @data_date.strftime("%Y-%m-%d"),
    'end-date'    =&gt; @data_date.strftime("%Y-%m-%d"),
    'metrics'     =&gt; "",
    'dimensions'  =&gt; "",
    'max-results' =&gt; "10000"
}
</code></pre>

<p>And the whole code show as below.</p>

<p><strong>lib/ga.rb</strong></p>

<pre><code>require 'google/api_client'
require 'date'
module GoogleAnalytic

  # 每一個GA API執行前，需要初始化
  def initialize_ga
    @client = Google::APIClient.new(:application_name =&gt; 'Urcosme-GA-sync', :application_version =&gt; '1')
    key_file = File.join("#{Rails.root}/config", 'ga_api_key_20150408.p12')
    key = Google::APIClient::PKCS12.load_key(key_file, 'notasecret')
    service_account = Google::APIClient::JWTAsserter.new(
      'hello@developer.gserviceaccount.com',
      ['https://www.googleapis.com/auth/analytics.readonly', 'https://www.googleapis.com/auth/prediction'],
      key)
    @client.authorization = service_account.authorize
    @analytics = @client.discovered_api('analytics', 'v3')
    @data_date = Date.today - 1
    @parameters = {
        'ids'         =&gt; "ga:12345",
        'start-date'  =&gt; @data_date.strftime("%Y-%m-%d"),
        'end-date'    =&gt; @data_date.strftime("%Y-%m-%d"),
        'metrics'     =&gt; "",
        'dimensions'  =&gt; "",
        'max-results' =&gt; "10000"
      }
  end

  # 將資料儲存到MongoDB，請複寫我
  def sync_to_db(result)
  end
end
</code></pre>

<h2>4-2 let's Rails application know our lib</h2>

<p><strong>config/application.rb</strong></p>

<pre><code>module MyAwesomeApp
  class Application &lt; Rails::Application
    config.autoload_paths += %W(#{config.root}/lib)   end
end
</code></pre>

<h2>4-3 create a model to save API data</h2>

<p>Now I want to get all our campaign data. So I create ...</p>

<p>ps. I use MongoDB as database.</p>

<p><strong>app/models/ga_campaign.rb</strong></p>

<pre><code>class GACampaign
  include GoogleAnalytic
  include Mongoid::Document
  include Mongoid::Timestamps
  field :campaign_name, type: String      # 廣告活動名稱
  field :campaign_source, type: String    # 廣告活動來源    
  field :campaign_medium, type: String    # 廣告活動媒介
  field :campaign_content, type: String   # 廣告活動內容
  field :session, type: Integer
  field :pageview, type: Integer
  field :data_date, type: Date            # 原始資料的時間

  def get_campaign_from_ga_api
    initialize_ga
    @parameters['metrics'] = "ga:pageviews,ga:sessions"
    @parameters['dimensions'] = "ga:campaign,ga:source,ga:medium,ga:adContent"
    @parameters['filters'] = "ga:campaign!=(not set)"
    sync_to_db(@parameters)
  end

  def sync_to_db(parameters)
     request = {
        :api_method =&gt; @analytics.data.ga.get,
        :parameters =&gt; parameters
     }
    result = @client.execute(request)
    result.data.rows.each do |array_data|
        GACampaign.create(campaign_name:    array_data[0], 
                          campaign_source:  array_data[1], 
                          campaign_medium:  array_data[2],
                          campaign_content: array_data[3],
                          session:          array_data[4],
                          pageview:         array_data[5],
                          data_date:        @data_date)
    end
  end
end
</code></pre>

<p>But.... if result is more than max-result (according to google, maximun is 10000 <a href="https://developers.google.com/analytics/devguides/reporting/core/v3/reference#maxResults">see google doc</a>)</p>

<p>How can I do paginate?</p>

<h2>4-4 Google API pagination</h2>

<p>Since, this method will be used in every "GA model" so I put it in <strong>lib/ga.rb</strong></p>

<p>according to GA document</p>

<blockquote><p>If not supplied, the starting index is 1. (Result indexes are 1-based. That is, the first row is row 1, not row 0.) Use this parameter as a pagination mechanism along with the max-results parameter for situations when totalResults exceeds 10,000 and you want to retrieve rows indexed at 10,001 and beyond.</p></blockquote>

<p>here is my method. Not quiet good, but it's working.</p>

<pre><code>def query_paginate(parameters)
     request = {
      :api_method =&gt; @analytics.data.ga.get,
      :parameters =&gt; parameters
    }
    count = 0
    loop do
      result = @client.execute(request)
      sync_to_db(result)
      max_count = result.data.total_results / parameters["max-results"].to_i
      break if count == max_count
      count += 1
      request[:parameters]["start-index"] = parameters["max-results"].to_i * count + 1
    end
  end
</code></pre>

<p>let's see full code.</p>

<pre><code>require 'google/api_client'
require 'date'
module GoogleAnalytic

def initialize_ga
    @client = Google::APIClient.new(:application_name =&gt; 'Urcosme-GA-sync', :application_version =&gt; '1')
    key_file = File.join("#{Rails.root}/config", 'ga_api_key_20150408.p12')
    key = Google::APIClient::PKCS12.load_key(key_file, 'notasecret')
    service_account = Google::APIClient::JWTAsserter.new(
      'hello@developer.gserviceaccount.com',
      ['https://www.googleapis.com/auth/analytics.readonly', 'https://www.googleapis.com/auth/prediction'],
      key)
    @client.authorization = service_account.authorize
    @analytics = @client.discovered_api('analytics', 'v3')
    @data_date = Date.today - 1
    @parameters = {
        'ids'         =&gt; "ga:12345",
        'start-date'  =&gt; @data_date.strftime("%Y-%m-%d"),
        'end-date'    =&gt; @data_date.strftime("%Y-%m-%d"),
        'metrics'     =&gt; "",
        'dimensions'  =&gt; "",
        'max-results' =&gt; "10000"
      }
  end

  # 將資料儲存到MongoDB，請複寫我
  def sync_to_db(result)
  end

  # 如果API存取，外加換頁功能，因為GA一次request最多一萬筆資料
  def query_paginate(parameters)
     request = {
      :api_method =&gt; @analytics.data.ga.get,
      :parameters =&gt; parameters
    }
    count = 0
    loop do
      result = @client.execute(request)
      sync_to_db(result)
      max_count = result.data.total_results / parameters["max-results"].to_i
      break if count == max_count
      count += 1
      request[:parameters]["start-index"] = parameters["max-results"].to_i * count + 1
    end
  end
end
</code></pre>

<h3>4-5 refactor <strong>app/models/ga_campaign.rb</strong></h3>

<pre><code>class GACampaign
  include GoogleAnalytic
  include Mongoid::Document
  include Mongoid::Timestamps
  field :campaign_name, type: String      # 廣告活動名稱
  field :campaign_source, type: String    # 廣告活動來源
  field :campaign_medium, type: String    # 廣告活動媒介
  field :campaign_content, type: String   # 廣告活動內容
  field :session, type: Integer
  field :pageview, type: Integer
  field :data_date, type: Date            # 原始資料的時間

  def get_campaign_from_ga_api
    initialize_ga
    @parameters['metrics'] = "ga:pageviews,ga:sessions"
    @parameters['dimensions'] = "ga:campaign,ga:source,ga:medium,ga:adContent"
    @parameters['filters'] = "ga:campaign!=(not set)"
    query_paginate(@parameters)
  end

  def sync_to_db(result)
        result.data.rows.each do |array_data|
        GACampaign.create(campaign_name:    array_data[0], 
                          campaign_source:  array_data[1], 
                          campaign_medium:  array_data[2],
                          campaign_content: array_data[3],
                          session:          array_data[4],
                          pageview:         array_data[5],
                          data_date:        @data_date)
    end
  end
end
</code></pre>

<h3>4-6 how to use</h3>

<pre><code>ga_campaign = GACampaign.new
ga_campaign.get_campaign_from_ga_api
</code></pre>

<h3>4-7 other example: fetch GA Event data</h3>

<p>The things I have to change are <strong>@parameters</strong> and <strong>sync_to_db</strong></p>

<p>It's easy, right~</p>

<p><strong>app/models/ga_event.rb</strong></p>

<pre><code>class GAEvent
  include GoogleAnalytic
  include Mongoid::Document
  include Mongoid::Timestamps
  field :event_category, type: String      # 事件類別
  field :event_label, type: String         # 事件標籤
  field :event_action, type: String        # 事件動作
  field :total_events, type: Integer       
  field :unique_events, type: Integer
  field :data_date, type: Date            # 原始資料的時間

  def get_event_from_ga_api
    initialize_ga
    @parameters['metrics'] = "ga:totalEvents,ga:uniqueEvents"
    @parameters['dimensions'] = "ga:eventCategory,ga:eventLabel,ga:eventAction"
    @parameters['filters'] = "ga:eventCategory==test"
    query_paginate(@parameters)
  end

  def sync_to_db(result)
    result.data.rows.each do |array_data|
      GAEvent.create(event_category:      array_data[0], 
                     event_label:        array_data[1], 
                     event_action:       array_data[2],
                     total_events:       array_data[3],
                     unique_events:      array_data[4],
                     data_date:        @data_date)

    end
  end

end
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Google Analytics for Email Click Tracking And Open Rate Tracking in Ruby on Rails]]></title>
    <link href="http://ccaloha.cc/blog/2015/02/27/using-google-analytics-for-email-click-tracking-and-open-rate-tracking-in-ruby-on-rails/"/>
    <updated>2015-02-27T23:34:39+08:00</updated>
    <id>http://ccaloha.cc/blog/2015/02/27/using-google-analytics-for-email-click-tracking-and-open-rate-tracking-in-ruby-on-rails</id>
    <content type="html"><![CDATA[<h2>Requirement</h2>

<ol>
<li><p>每個連結的點擊數</p></li>
<li><p>開信率</p></li>
</ol>


<h2>Google Analytics</h2>

<p>這是一個電子報，基本上屬於一種廣告！</p>

<p>那GA怎麼那麼厲害知道誰點了什麼？</p>

<p>該不會Google 大神，連Email也滲透？！</p>

<p>ps. 我猜他應該也差不多都知道我們在Email上的一舉一動，只要你用Gmail...</p>

<h3>那GA要怎麼紀錄？</h3>

<blockquote><p>基本上就是將<strong>連結網址</strong>帶上一些"參數"，當使用者點了這個連結之後，就你就會被帶到那個<strong>連結網址</strong>，這時候那個網站一定有埋GA的javascript
，這就是他的Key~ GA透過js爬到你的網址，當他發現你有帶某些參數，他就知道你是從哪裡來的！</p></blockquote>

<!-- more -->


<p>我剛剛提到了好幾次<strong>參數</strong></p>

<p>沒錯！這就是關鍵！</p>

<p>讓我們來看一下 有哪些參數</p>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/utm%E8%A8%AD%E8%A8%88.png"></p>

<p>GA在有文件說明<a href="https://support.google.com/analytics/answer/1033863">網址要如何使用</a></p>

<p>而且，GA還很貼心的幫大家準備了 <a href="https://support.google.com/analytics/answer/1033867?hl=zh-Hant">網址產生器</a></p>

<p>來看一下，實際上會產生什麼樣的連結：</p>

<p>假設我們追蹤</p>

<pre><code>透過Email點擊，來到首頁的人
</code></pre>

<p>Url 原本是長這樣</p>

<pre><code>www.urcosme.com
</code></pre>

<p>ps. urcosme.com小弟目前待的公司 XDDDDD廣告一下！</p>

<p>經過<del>我的</del>GA的巧手，它會長這樣</p>

<pre><code>www.urcosme.com/?utm_source=%E9%9B%BB%E5%AD%90%E5%A0%B1&amp;utm_medium=%E9%9B%BB%E5%AD%90%E9%83%B5%E4%BB%B6&amp;utm_content=%E6%B8%AC%E8%A9%A6%E6%B8%AC%E8%A9%A6&amp;utm_campaign=%E6%88%91%E5%A5%BD%E5%B8%A5
</code></pre>

<p>案....這是....!？</p>

<p>讓我幫你翻譯一下</p>

<pre><code>www.urcosme.com/?utm_source=電子報&amp;utm_medium=電子郵件&amp;utm_content=測試測試&amp;utm_campaign=我好帥
</code></pre>

<p>當我把連結改成這樣後，基本上使用者也是會點到你的首頁，但是對於GA而言，他就知道你是從電子郵件過來</p>

<p>但! 身為一個有責任感又假掰的IT，</p>

<p>我們當然希望讓系統自動幫行銷的同仁帶入這些參數，讓正妹同事覺得沒有你不行～</p>

<h2>1. Rails 要如何實作“點擊追蹤”</h2>

<p>其實很簡單，我們要寫一個 小小小爬蟲，把內容爬過一次</p>

<p>把有 &lt;a> 的找出來，然後把資訊加進去就好了！</p>

<p>那...爬蟲要怎麼寫？</p>

<p>各位，既然是來到 Rails ，Rails什麼不多，鐵路最多，歐不～ 是輪子最多！</p>

<p>跟大家介紹個 Gem : <strong><a href="http://www.nokogiri.org/">Nokogiri</a></strong></p>

<p>我們就直接用實作，來說明他可以幹麻</p>

<p>直接來看的程式碼：</p>

<p>這是我寫在 <strong>app/models/edm.rb</strong> 的code</p>

<p>這個model資訊是這樣</p>

<pre><code># == Schema Information
#
# Table name: edms
#
#  id                 :integer          not null, primary key
#  name               :string
#  send_at            :datetime
#  title              :string(255)
#  state              :string(255)
#  content            :text
#  created_at         :datetime
#  updated_at         :datetime
#


def parse_link_in_email(user_id)
    # 讀進email html
    html =  Nokogiri::HTML(self.content)
    # 找出所有 a 
    a_nodes = html.css('a')
    a_nodes.each do |a|
      # 抓出href 並且加上GA 追蹤
      tracking_a = a['href'] +  "?utm_source=#{self.name}-#{CGI.escape(a['href'])}" + 
                                "&amp;utm_medium=email" +
                                "&amp;utm_content=#{self.id}-#{user_id}" + 
                                "&amp;utm_campaign=#{self.title}"
      a['href'] = tracking_a
    end
    return html.to_html
 end
</code></pre>

<p>幾個重點：</p>

<ol>
<li>使用<strong>Nokogiri::HTML(self.content)</strong>  => 讀HTML進來</li>
<li><strong>html.css('a')</strong> => 抓出所有&lt;a></li>
<li><strong>a['href']</strong>     => 抓出這個&lt;a>，裡頭的屬性href</li>
<li><strong>html.to_html</strong>  => 轉回HTML</li>
</ol>


<p>Done !</p>

<p>所以當使用者點擊信件的link時，GA就會看到.....</p>

<p><strong>攬客 >> 廣告活動 >> 所有廣告活動</strong></p>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/GA_email_click_tracking.png" alt="GA email click tracking demo"></p>

<h2>2. Rails 要如何實作“開信率”</h2>

<p>開信率我是參考這篇<a href="http://dyn.com/blog/tracking-email-opens-via-google-analytics/">Blog</a>來實作</p>

<p>簡單來說，我們需要埋一個image tag，然而那個tag</p>

<p>會帶上一些<strong>參數</strong>，讓GA知道這幹嘛的！</p>

<p>為什麼要使用這種標籤的方式紀錄呢？</p>

<p>假設使用者打開信之後，並且點了一個連結，</p>

<p>因為這個點了連結的動作，我們知道他一定有開信，歐噎～ 做完了～</p>

<p>But...........</p>

<p>那如果他只有打開信，沒有點擊勒？ 如果他打開信，點了N個連結，那開信不就也被多紀錄了很多次？(ps.點擊紀錄是每點一次就紀錄一次)</p>

<blockquote><p>所以我們必須透過從 Google Analytics <strong>"GET"</strong> 一個標記(就是圖片啦)，當我們跟GA要圖的時候，可以告訴GA一些<strong>參數</strong>，嘿嘿，這樣就有辦法紀錄了！</p></blockquote>

<p>各位，又看到<strong>參數</strong>兩個字</p>

<p>那又有哪些可以用勒？ (這邊我只列我目前有在用的，詳細可以參考<a href="https://developers.google.com/analytics/devguides/collection/protocol/v1/parameters#events">GA collections parameters</a>)</p>

<table>
<thead>
<tr>
<th></th>
<th> 參數                                                                                 </th>
<th> 說明                                                                   </th>
<th> 舉例                                                                                 </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> tid </td>
<td> 要放GA的ID</td>
<td> UA-1234567-8 |</td>
</tr>
<tr>
<td></td>
<td> uid </td>
<td>Unique的ID(因為我們要寄信給User我是使用該User的ID)</td>
<td> 1 |</td>
</tr>
<tr>
<td></td>
<td> t   </td>
<td> 告訴GA這是個什麼類型的紀錄(基本上我查到都使用event) </td>
<td> event |</td>
</tr>
<tr>
<td></td>
<td> ec  </td>
<td> 告訴GA這個Event的Category </td>
<td> email-測試 |</td>
</tr>
<tr>
<td></td>
<td> ea  </td>
<td> 告訴GA這個Event的Action </td>
<td> Open |</td>
</tr>
<tr>
<td></td>
<td> el  </td>
<td> 告訴GA這個Event的Label </td>
<td> user_id-1 |</td>
</tr>
<tr>
<td></td>
<td> cs  </td>
<td> 廣告活動的來源 </td>
<td> Email標題 |</td>
</tr>
<tr>
<td></td>
<td> cm  </td>
<td> 廣告活動的媒介 </td>
<td> edm |</td>
</tr>
<tr>
<td></td>
<td> cn  </td>
<td> 廣告活動名稱   </td>
<td> 電子報第0期 | </td>
</tr>
</tbody>
</table>


<p>那我們就不看sample，直接來看實作code</p>

<pre><code>def parse_link_in_email(user_id)

    ... 

    body = html.at_css("body")
    img_node = Nokogiri::XML::Node.new("img",body)
    img_node['src'] = "https://www.google-analytics.com/collect?v=1" + 
                      "&amp;tid=#{Settings.google_analytics_key}" + 
                      "&amp;uid=#{user_id}"+
                      "&amp;t=event" +
                      "&amp;ec=email-#{self.name}-#{self.title}" + 
                      "&amp;ea=open" + 
                      "&amp;el=user_id-#{user_id}" + 
                      "&amp;cs=#{self.name}" + 
                      "&amp;cm=email" + 
                      "&amp;cn=#{self.title}"
    body &lt;&lt; img_node

    ...
end
</code></pre>

<p>幾個重點：</p>

<ol>
<li>使用<strong>Nokogiri::XML::Node.new("img",body)</strong>  => 新增一個&lt;img>標籤</li>
<li><strong>img_node['src']</strong>     => 設定這個&lt;img>，裡頭的屬性src</li>
<li><strong>body &lt;&lt; img_node</strong>  => 將code埋到body裡面</li>
</ol>


<p>那在GA你會看到什麼勒？</p>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/GA_email_open_tracking.png" alt="GA email open rate tracking demo"></p>

<h2>3. Rails Mailer、its View and model</h2>

<p> 剩下我沒提到的部份，不過這些就是基本寄信的功能，我就不贅述了</p>

<p> <strong>app/models/edm.rb</strong></p>

<pre><code>has_many :edm_user_ships  # 假設你有要寄信的清單
has_many :users, :through =&gt; :edm_user_ships
def send_mail
    self.users.each do |user|
        EdmMailer.delay.send_edm(self, user.email, user.id)
    end
end
</code></pre>

<p><strong>app/mailers/edm_mailer.rb</strong></p>

<pre><code>class EdmMailer &lt; ActionMailer::Base
  default from: "service@urcosme.com"

  def send_edm(e_notify, email, user_id = nil)
    @e_notify = e_notify
    @user_id = user_id

    mail to: email, subject: e_notify.title
  end
end
</code></pre>

<p><strong>app/views/edm_mailer/send_edm.html.slim</strong></p>

<pre><code>= raw @e_notify.parse_link_in_email(@user_id)
</code></pre>

<h2>Done</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[HowTo] Get Google Analytics Engagement Using R]]></title>
    <link href="http://ccaloha.cc/blog/2014/12/26/howto-get-google-analytics-engagement-using-r/"/>
    <updated>2014-12-26T08:17:04+08:00</updated>
    <id>http://ccaloha.cc/blog/2014/12/26/howto-get-google-analytics-engagement-using-r</id>
    <content type="html"><![CDATA[<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/get%20google%20analytics%20engagement%20using%20R/2014%E5%B9%B4engagement-pageviews%E5%9C%96.png" alt="every months google analytic engagement(pageviews X session Duration) in 2014 using R"></p>

<p><strong>使用者在網站上的參與程度</strong>，是我一直滿好奇的指標！</p>

<p>在GA裡，網站參與度，如下圖</p>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/get%20google%20analytics%20engagement%20using%20R/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-12-22%20%E4%B8%8A%E5%8D%883.13.48.png" alt=“google analytics engagement”></p>

<p>這系列的文章，我的target是 我想知道今年(2014)整體使用者參與度的變化與趨勢</p>

<p>此篇文章是focus 在如何透過R抓取資料並分析成和 GA view一樣的資料！</p>

<p>之後，再看看可以看到什麼樣比較有意義的資料～</p>

<p>let's go !</p>

<!-- more -->


<h2>Google Analytic API 申請</h2>

<p>在做GA之前，別忘記要申請<strong><a href="http://ccaloha.herokuapp.com/blog/2014/12/24/howto-get-google-analytics-using-r-rgoogleanalytics-using-users-pageviews-time-as-an-example/">GA API權限</a></strong></p>

<h2>Google Query Explorer <a href="https://ga-dev-tools.appspot.com/explorer/">link</a></h2>

<p>Google 提供的工具，我覺得還滿好用的！</p>

<p>在使用API之前，使用 explorer 可以讓你先有Fu大概知道會拿到什麼樣的資料！</p>

<p>大概看一下怎麼用吧</p>

<h3>Step1. 先登入Google Analytics的帳號</h3>

<h3>Step2. 回到Google Query Explorer，重新refresh</h3>

<p>點選認證</p>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/get%20google%20analytics%20engagement%20using%20R/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-12-25%20%E4%B8%8A%E5%8D%888.16.31.png" alt="點選 Click Here to authorize"></p>

<p>你就可以看到</p>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/get%20google%20analytics%20engagement%20using%20R/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-12-25%20%E4%B8%8A%E5%8D%888.20.28.png" alt="Google Query Explorer 取得GA權限後頁面"></p>

<p>其中，<strong>account</strong> /  <strong>Property</strong> / <strong>View(Profile)</strong> 就是</p>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/get%20google%20analytics%20engagement%20using%20R/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-12-25%20%E4%B8%8A%E5%8D%888.24.24.png" alt="對應GA"></p>

<h3>Step3. 看一下哪些GA View 對應到API的名稱</h3>

<p>請到 <a href="https://developers.google.com/analytics/devguides/reporting/core/dimsmets">Google Analytics Dimensions &amp; Metrics Reference</a></p>

<p>我們要找的就是</p>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/get%20google%20analytics%20engagement%20using%20R/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-12-26%20%E4%B8%8A%E5%8D%887.46.24.png" alt="Sessions"></p>

<p>點進去<strong>"ga:sessionDurationBucket"</strong></p>

<p>你會看到 <strong>“web view name: Session Duration”</strong> 沒錯！ 那個就是對應到GA View的名稱！</p>

<p>耶～～找到了～～</p>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/get%20google%20analytics%20engagement%20using%20R/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-12-26%20%E4%B8%8A%E5%8D%887.48.45.png" alt="ga:sessionDurationBucket definition"></p>

<h3>Step4. 找到之後，趕緊來Google Query Explorer試試抓數據的感覺</h3>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/get%20google%20analytics%20engagement%20using%20R/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-12-22%20%E4%B8%8A%E5%8D%883.20.14.png" alt="fetch data from google query explorer"></p>

<p>ya~~~拿到資料了！</p>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/get%20google%20analytics%20engagement%20using%20R/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-12-26%20%E4%B8%8A%E5%8D%887.54.52.png" alt="get ga:sessionDurationBucket , ga:sessions and ga:sessionDuration from Google Query Explorer"></p>

<p>咦！那個<strong>ga:sessionDurationBucket</strong>好像有點怪怪的～</p>

<p>各位人客，請不要緊張～</p>

<p>那是因為他吐回來的資料是<strong>String</strong>，所以他的排序才是這樣～</p>

<h3>Step5. R</h3>

<p>說明都寫在裡面！</p>

<p>ps. 由於小弟我還是R新手，寫的鳥鳥的地方，還請見諒，如果可以的話，可以留言告訴我，哪裡怎麼寫會比較好～ 感謝！</p>

<p><a href="https://gist.github.com/alChaCC/4fee2a25a422dceb40f5">點我看比較漂亮的gist</a></p>

<pre><code>setwd("r-playground/R/ga_engagement") #設定你要的操作順序
list.of.packages &lt;- c("rjson", "RCurl","RGoogleAnalytics")
new.packages &lt;- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
require(rjson)
require(RCurl)
require(RGoogleAnalytics)
require(ggplot2)
token &lt;- Auth('YOUR API USER ID','YOUR API USER PASSWORD')
save(token,file="./token_file")
profile &lt;- GetProfiles(token) # show all your profile 
#          id                               name
#    XXXXXX                      HELLO (All)
#  YYYYYYYY                      COOL
#   ....

# Your profile number (not the GA ID number)
my_profile    &lt;- profile[profile$name == 'HELLO (All)',1] 

time_start_seq &lt;- as.Date(ISOdate(2014,seq(1,12),1))
#[1] "2014-01-01" "2014-02-01" "2014-03-01" "2014-04-01" "2014-05-01" "2014-06-01"
#[7] "2014-07-01" "2014-08-01" "2014-09-01" "2014-10-01" "2014-11-01" "2014-12-01"
time_end_seq &lt;- seq(as.Date("2014-02-01"), length=12, by="1 month") - 1
# [1] "2014-01-31" "2014-02-28" "2014-03-31" "2014-04-30" "2014-05-31" "2014-06-30"
# [7] "2014-07-31" "2014-08-31" "2014-09-30" "2014-10-31" "2014-11-30" "2014-12-31"

# 為了做資料紀錄
every_month_2014 &lt;- list()
all_data &lt;- data.frame()

for ( i in 1:length(time_start_seq)) {

  query.list &lt;- Init(start.date = as.character(time_start_seq[i]),
                     end.date = as.character(time_end_seq[i]),
                     dimensions = "ga:sessionDurationBucket",
                     metrics = "ga:sessions,ga:pageviews",
                     sort = "ga:sessionDurationBucket",
                     max.results = 10000,
                     table.id = paste("ga:",my_profile,sep="",collapse=",")
                     )

  # 建立一個query等一下就是透過這個query與token拿資料！
  ga.query &lt;- QueryBuilder(query.list)

  # 向GA抓取資料，存成data frame
  ga.data &lt;- GetReportData(ga.query, token) 
  # ga.data &lt;- GetReportData(ga.query, token,split_daywise = T,paginate_query = TRUE)  另外一種拿法也work


  # 資料處理部分，由於抓回來的 “data$sessionDurationBucket” 是個string，所要把它轉成 數字
  less_than_10_seconds &lt;- ga.data[as.numeric(ga.data$sessionDurationBucket) &lt;= 10,]
  between_11_to_30     &lt;- ga.data[as.numeric(ga.data$sessionDurationBucket) &gt; 10 &amp; as.numeric(ga.data$sessionDurationBucket) &lt;= 30,]
  between_31_to_60     &lt;- ga.data[as.numeric(ga.data$sessionDurationBucket) &gt; 30 &amp; as.numeric(ga.data$sessionDurationBucket) &lt;= 60,]
  between_61_to_180    &lt;- ga.data[as.numeric(ga.data$sessionDurationBucket) &gt; 60 &amp; as.numeric(ga.data$sessionDurationBucket) &lt;= 180,]
  between_181_to_600   &lt;- ga.data[as.numeric(ga.data$sessionDurationBucket) &gt; 180 &amp; as.numeric(ga.data$sessionDurationBucket) &lt;= 600,]
  between_601_to_1800  &lt;- ga.data[as.numeric(ga.data$sessionDurationBucket) &gt; 600 &amp; as.numeric(ga.data$sessionDurationBucket) &lt;= 1800,]
  more_than_1801       &lt;- ga.data[as.numeric(ga.data$sessionDurationBucket) &gt; 1800,]

  # 處理後資料長這樣
  #     sessionDurationBucket sessions pageviews
  #                        0   342840    341561
  #                        1     1445      1906
  #                       10     2567      4392
  #                        2     2210      2704
  #                        3     2283      2934
  #                        4     2309      3133
  #                        5     2368      3384


  # 資料整併
  every_month_2014[[i]] &lt;- rbind(colSums(less_than_10_seconds[,-1]),colSums(between_11_to_30[,-1]),
                                 colSums(between_31_to_60[,-1]),colSums(between_61_to_180[,-1]),
                                 colSums(between_181_to_600[,-1]),colSums(between_601_to_1800[,-1]),
                                 colSums(more_than_1801[,-1]))
  #       sessions pageviews
  #[1,]   365814    375361
  #[2,]    44857     92466
  #[3,]    48003    133645
  #[4,]    96890    423865
  #[5,]   107373    872529
  #[6,]    78404   1057353
  #[7,]    28183    812783


  # 補上一欄時間區間
  month_all_data &lt;- cbind(c(as.character(i)),c("&lt; 10s","11 ~ 30","31~60","61~180","181~600","601~1800","&gt;1801"),every_month_2014[[i]])
  #                     sessions pageviews
  #[1,] "12" "&lt; 10s"    "365814" "375361" 
  #[2,] "12" "11 ~ 30"  "44857"  "92466"  
  #[3,] "12" "31~60"    "48003"  "133645" 
  #[4,] "12" "61~180"   "96890"  "423865" 
  #[5,] "12" "181~600"  "107373" "872529" 
  #[6,] "12" "601~1800" "78404"  "1057353"
  #[7,] "12" "&gt;1801"    "28183"  "812783" 

  # 將每一年的統整資料放在一起，作圖需要
  all_data &lt;- rbind(all_data,month_all_data)
}


# 補上欄位名稱
colnames(all_data) &lt;- c("month","time_interval","sessions","pageviews")


# 先畫pageviews
# 將資料的型態改正，因為上面建立的時候，會將每個欄位的屬性變成"factor"，這會對畫圖趙成莫大影響！
all_data &lt;- transform(all_data, 
    time_interval = factor(time_interval, levels = 
        c('&lt; 10s','11 ~ 30','31~60', '61~180','181~600', '601~1800','&gt;1801')),
    pageviews = as.numeric(as.character(pageviews)))

# 作圖
plot &lt;- ggplot(data = all_data, aes(x = month, y = pageviews, fill = time_interval)) +  
    geom_bar(stat = "identity", position = "dodge", colour = "black")

# 將圖存出
ggsave(plot,file=paste("2014年engagement-pageviews圖.png",sep=""),width=15, height=10)


# 再畫sessions
all_data &lt;- transform(all_data, 
    time_interval = factor(time_interval, levels = 
        c('&lt; 10s','11 ~ 30','31~60', '61~180','181~600', '601~1800','&gt;1801')),
    sessions = as.numeric(as.character(sessions)))

plot &lt;- ggplot(data = all_data, aes(x = month, y = sessions, fill = time_interval)) +  
    geom_bar(stat = "identity", position = "dodge", colour = "black")

ggsave(plot,file=paste("2014年engagement-sessions圖.png",sep=""),width=15, height=10)
</code></pre>

<h3>Done</h3>

<p>先來看 2014年每月 pageview 與 使用者平均在線時間 的 bar chart</p>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/get%20google%20analytics%20engagement%20using%20R/2014%E5%B9%B4engagement-pageviews%E5%9C%96.png" alt="every months google analytic engagement(pageviews X session Duration) in 2014 using R"></p>

<p>再來看 2014年每月 sessions 與 使用者平均在線時間 的 bar chart</p>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/get%20google%20analytics%20engagement%20using%20R/2014%E5%B9%B4engagement-sessions%E5%9C%96.png" alt="every months google analytic engagement(sessions X session Duration) in 2014 using R"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[HOWTO]- 立馬拋棄Excel！利用R，取得Google Analytics的資料 -以使用者流量的時間畫heatmap為example]]></title>
    <link href="http://ccaloha.cc/blog/2014/12/24/howto-get-google-analytics-using-r-rgoogleanalytics-using-users-pageviews-time-as-an-example/"/>
    <updated>2014-12-24T10:24:04+08:00</updated>
    <id>http://ccaloha.cc/blog/2014/12/24/howto-get-google-analytics-using-r-rgoogleanalytics-using-users-pageviews-time-as-an-example</id>
    <content type="html"><![CDATA[<blockquote><p>學習一個東西，最快的方式，就是....</p>

<blockquote><p>just do it !</p></blockquote></blockquote>

<p>由於我想要成為一個酷炫的資料科學家！</p>

<p>不學習R這樣對嗎～</p>

<p>既然要學習R，那從每週的<strong>Google Analytics</strong>開始著手！</p>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/HowTo-%20get%20google%20analytics%20using%20R%28RGoogleAnalytics%29%20using%20user%27s%20pageviews%20time%20as%20an%20example/Rplot.png" alt="traffic heatmap using R (RGoogleAnalytics)"></p>

<!-- more -->


<p>首先，在開始之前，為了要有個map !</p>

<p>所以，當然是先看人家怎麼做</p>

<p>瞭解一下機制和 那個Fu~~</p>

<p>我主要是參考這篇：<a href="http://viget.com/inspire/how-to-build-a-traffic-heatmap-using-google-analytics-and-r">Building a Traffic Heatmap with Google Analytics and R</a></p>

<p>但是由於他使用的 RGoogleAnalytics 是舊版的，而且，google 現在的API都需要使用 OAuth 2.0</p>

<p>所以....做法上還是有點不同，不過完成整個設定後，擷取資料與分析，就跟他的內容大同小異了！</p>

<p>廢話不多說，那就開始吧！</p>

<h2>Step 1. 申請API使用權限</h2>

<h3>1. 登入到 <a href="http://cloud.google.com/console">Google Developer Console</a></h3>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/HowTo-%20get%20google%20analytics%20using%20R%28RGoogleAnalytics%29%20using%20user%27s%20pageviews%20time%20as%20an%20example/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-12-24%20%E4%B8%8B%E5%8D%8811.16.19.png" alt="建立專案"></p>

<h3>2. 選擇啟用API</h3>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/HowTo-%20get%20google%20analytics%20using%20R%28RGoogleAnalytics%29%20using%20user%27s%20pageviews%20time%20as%20an%20example/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-12-24%20%E4%B8%8B%E5%8D%8811.16.31.png" alt="設定啟用API"></p>

<h3>3. 選擇要啟用的API 為 google analytics</h3>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/HowTo-%20get%20google%20analytics%20using%20R%28RGoogleAnalytics%29%20using%20user%27s%20pageviews%20time%20as%20an%20example/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-12-24%20%E4%B8%8B%E5%8D%8811.16.35.png" alt="選擇要請用的API為 Analytics API"></p>

<h3>4. 新增API存取所需的憑證</h3>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/HowTo-%20get%20google%20analytics%20using%20R%28RGoogleAnalytics%29%20using%20user%27s%20pageviews%20time%20as%20an%20example/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-12-24%20%E4%B8%8B%E5%8D%8811.16.45.png" alt="建立API憑證"></p>

<h3>5. 輸入相關資訊</h3>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/HowTo-%20get%20google%20analytics%20using%20R%28RGoogleAnalytics%29%20using%20user%27s%20pageviews%20time%20as%20an%20example/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-12-24%20%E4%B8%8B%E5%8D%8811.16.52.png" alt="輸入這個憑證的相關訊息"></p>

<h3>6. 記錄下來你的用戶ID與用戶密碼</h3>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/HowTo-%20get%20google%20analytics%20using%20R%28RGoogleAnalytics%29%20using%20user%27s%20pageviews%20time%20as%20an%20example/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-12-24%20%E4%B8%8B%E5%8D%8811.17.02.png" alt="記錄下來吧！"></p>

<h2>Step2. 寫R</h2>

<p>請看我裡面的註解吧</p>

<pre><code># 安裝套件
install.packages('rjson')
install.packages('RCurl')
install.packages('RColorBrewer')
install.packages('RGoogleAnalytics')
require(rjson)
require(RCurl)
require(RColorBrewer)
require(RGoogleAnalytics)

# 由於 google api 現在規定使用oauth2.0 來存取
# R語言使用 "&lt;-" 當作變數指派
token &lt;- Auth('用戶端ID','用戶端密碼')

# 找到目前有哪些views
profile &lt;- GetProfiles(token)

## 上面那一行你會看到這樣的結果，使用data.frame格式儲存，data frame是R語言裡頭很常見的資料型態，你就把它想成是excel裡面的tab
## id name
## 85712839 所有網站資料

# 編寫要搜尋的參數，這邊是關鍵！
# R： 取得data frame 列(row)裡頭一個變數
my_profile &lt;- profile[profile$name == '所有網站資料',1]
query.list &lt;- Init(start.date = "2014-10-01",
          end.date = "2014-12-14",
          dimensions = "ga:dayOfWeek, ga:hour",
          metrics = "ga:pageviews",
          max.results = 10000,
          table.id = paste("ga:",my_profile,sep="",collapse=",")
)

# 建立一個query等一下就是透過這個query與token拿資料！
ga.query &lt;- QueryBuilder(query.list)

# 向GA抓取資料，存成data frame
ga.data &lt;- GetReportData(ga.query, token)

# 看一下ga.data長什麼樣子
## dayOfWeek hour pageviews
## 0 00 19734
## 0 01 11244
## 0 02 6286
## 0 03 3528
## 0 04 1830
## 0 05 1316
## 0 06 910
## 0 07 2168
## 0 08 4547
## ....


# 把ga.data裡頭dayOfWeek的 0 轉換成 sunday, 1轉成 Monday..and so on..
ga.data$dayOfWeek &lt;- as.character(ga.data$dayOfWeek)
ga.data$dayOfWeek[ga.data$dayOfWeek == "0"] &lt;- "Sunday"
ga.data$dayOfWeek[ga.data$dayOfWeek == "1"] &lt;- "Monday"
ga.data$dayOfWeek[ga.data$dayOfWeek == "2"] &lt;- "Tuesday"
ga.data$dayOfWeek[ga.data$dayOfWeek == "3"] &lt;- "Wednesday"
ga.data$dayOfWeek[ga.data$dayOfWeek == "4"] &lt;- "Thursday"
ga.data$dayOfWeek[ga.data$dayOfWeek == "5"] &lt;- "Friday"
ga.data$dayOfWeek[ga.data$dayOfWeek == "6"] &lt;- "Saturday"

# 資料排序調整(y軸)，寫了這個factor後，他會以 sunday, monday....等方式排序呈現資料
ga.data$dayOfWeek &lt;- factor(ga.data$dayOfWeek, levels = c("Sunday",
              "Monday",
              "Tuesday",
              "Wednesday",
              "Thursday",
              "Friday",
              "Saturday"))
ga.data[order(ga.data$dayOfWeek),]

# 將 data frame 轉成 xtab.
heatmap_data &lt;- xtabs(pageviews ~ dayOfWeek + hour, data=ga.data)

# heatmap_data長這樣
# hour
#dayOfWeek 00 01 02 03 04 05 06 07 08 09 10 11 12
# Sunday 19734 11244 6286 3528 1830 1316 910 2168 4547 5991 10653 11380 13414
# Monday 15170 9317 5120 2252 578 536 860 1605 3127 6175 10248 12287 12654
# Tuesday 11958 7445 3438 1582 893 784 904 1566 3268 6106 7925 7577 9336
# Wednesday 11178 7898 3529 1338 1177 536 844 1250 2575 6104 8051 8910 8732
# Thursday 28735 19955 9645 5246 2498 2072 3379 6070 9987 17166 22617 22780 23911
# Friday 31564 16496 8220 3603 2209 1626 2028 3015 6750 12871 17537 18307 18358
# Saturday 19325 12335 6011 2808 1253 1416 1090 1981 4114 7257 9239 10438 11733


# 畫圖 ---------------------------------------------------------------------
heatmap(heatmap_data,
col=colorRampPalette(brewer.pal(9,"Reds"))(100), # Use ColorBrewer's nicer color palettes.
revC=TRUE, # Start the week at the top of the Y axis.
scale="none", # Map color density to entire week, not a day or hour slice.
Rowv=NA, Colv=NA, # Don't use a dendogram.
main="Pageviews by Day and Hour", # Title.
xlab="Hour") # X-axis label. 
</code></pre>

<h2>Done</h2>

<p>執行指令，</p>

<pre><code>source('r_ga_heatmap.R')
</code></pre>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/HowTo-%20get%20google%20analytics%20using%20R%28RGoogleAnalytics%29%20using%20user%27s%20pageviews%20time%20as%20an%20example/Rplot.png" alt="traffic heatmap using R (RGoogleAnalytics)"></p>
]]></content>
  </entry>
  
</feed>
