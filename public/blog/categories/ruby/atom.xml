<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | AlohaCC]]></title>
  <link href="http://ccaloha.cc/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://ccaloha.cc/"/>
  <updated>2016-11-30T15:51:36+08:00</updated>
  <id>http://ccaloha.cc/</id>
  <author>
    <name><![CDATA[Aloha]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to setup a simple standalone faye websocket server using SSL and Ruby]]></title>
    <link href="http://ccaloha.cc/blog/2016/06/16/how-to-setup-standalone-faye-websocket-server-using-ssl-and-ruby/"/>
    <updated>2016-06-16T12:08:11+08:00</updated>
    <id>http://ccaloha.cc/blog/2016/06/16/how-to-setup-standalone-faye-websocket-server-using-ssl-and-ruby</id>
    <content type="html"><![CDATA[<p><img src='https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/websocket/How%20to%20setup%20a%20simple%20standalone%20faye%20websocket%20server%20using%20SSL%20and%20Ruby.png' alt='Demo faye websocket server using Ruby'></p>

<p>References:</p>

<p><a href="https://www.driftingruby.com/episodes/faye-websockets-part-1">faye-websockets-part-1</a></p>

<p><a href="https://www.driftingruby.com/episodes/faye-websockets-part-2">faye-websockets-part-2</a></p>

<p><a href="http://code.tutsplus.com/tutorials/how-to-use-faye-as-a-real-time-push-server-in-rails--net-22600">How to Use Faye as a Real-Time Push Server in Rails</a></p>

<p><strong>====================================================</strong></p>

<p><strong>In your remote Ubuntu server</strong></p>

<p><strong>====================================================</strong></p>

<h2>Step1. Install Ruby environment in Ubuntu</h2>

<p>Reference: <a href="https://gorails.com/deploy/ubuntu/14.04">https://gorails.com/deploy/ubuntu/14.04</a></p>

<h3>Add user</h3>

<p><code>
sudo adduser deploy
sudo adduser deploy sudo
su deploy
</code></p>

<h3>Make sure you can login using new user</h3>

<p><code>
cd ~
mkdir .ssh
cd .ssh
vim authorized_keys
</code>
then put the content in <code>~/.ssh/id_rsa.pub</code> in your <em>local machine</em> into it.</p>

<h3>Install Ruby and RVM</h3>

<p>```
sudo apt-get update</p>

<p>sudo apt-get install git-core curl zlib1g-dev build-essential libssl-dev libreadline-dev libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt1-dev libcurl4-openssl-dev python-software-properties libffi-dev</p>

<p>sudo apt-get install libgdbm-dev libncurses5-dev automake libtool bison libffi-dev</p>

<p>gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3</p>

<p>curl -L https://get.rvm.io | bash -s stable</p>

<p>source ~/.rvm/scripts/rvm</p>

<p>rvm install 2.2.3</p>

<p>gem install bundler
```</p>

<!--more-->


<h3>Create fake SSL for thin server</h3>

<p><code>
mkdir -p /home/deploy/faye-server/shared/thin/ssl
openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /home/deploy/faye-server/shared/thin/ssl/thin.key -out /home/deploy/faye-server/shared/thin/ssl/thin.crt
</code></p>

<h3>Create .env file</h3>

<p><code>vim /home/deploy/faye-server/shared/.env</code></p>

<p>put like this</p>

<p><code>
AUTH_TOKEN: 'your_secret'
</code></p>

<h3>Create thin.yml file</h3>

<p>ps. copied from <code>config/thin.yml.example</code></p>

<p>```
port: 8080
user: deploy
group: deploy
pid: /home/deploy/faye-server/current/faye/pids/thin.pid
timeout: 30
wait: 30
log: /home/deploy/faye-server/current/log/thin.log
max_conns: 4096
require: []
environment: production
max_persistent_conns: 1024
servers: 1
threaded: true
no-epoll: true
daemonize: true
chdir: /home/deploy/faye-server/current
tag: faye
ssl: true
ssl-key-file: /home/deploy/faye-server/current/thin/ssl/thin.key
ssl-cert-file: /home/deploy/faye-server/current/thin/ssl/thin.crt
ssl-disable-verify: true</p>

<p>```</p>

<p><strong>====================================================</strong></p>

<p><strong>In your local machine</strong></p>

<p><strong>====================================================</strong></p>

<h2>Step2. Clone this project</h2>

<p><code>
git clone https://github.com/alChaCC/faye-server.git
</code></p>

<h3>Update Some Configurations</h3>

<p><em>config/deploy/staging.rb</em></p>

<p><code>
server 'your server ip'
</code></p>

<h2>Step3. Deployment</h2>

<p><code>
cap staging deploy
</code></p>

<h2>How to test?</h2>

<p>Before start you have to update the <em>IP</em> in <code>faye-server/test/index.html</code> and <code>faye-server/test/test.rb</code></p>

<p>And also the <strong>secret</strong> in <code>faye-server/test/test.rb</code></p>

<p>And open browser then type: <code>https://your.server.ip:8080/faye/faye.js</code>.</p>

<p>Since we make fake ssl, we need to tell browser to accept it anyway.</p>

<p><img src='https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/websocket/let%20chrome%20allow%20to%20process.png' alt='tell chrome to process anyway'></p>

<p>you have to make sure that you can see this.</p>

<p><img src='https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/websocket/faye%20js%20you%20should%20see.png' alt='faye js you should see'></p>

<p>Then, you can type in console</p>

<p><code>
cd faye-server/test
python -m SimpleHTTPServer 8000
</code></p>

<p>and also</p>

<p><code>
irb
require './test'
t = SimpleTest.new
t.tester(1, 100)
</code></p>

<p>Now you can open browser and type <code>http://localhost:8000/</code></p>

<p><img src='https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/websocket/How%20to%20setup%20a%20simple%20standalone%20faye%20websocket%20server%20using%20SSL%20and%20Ruby.png' alt='Demo faye websocket server using Ruby'></p>
]]></content>
  </entry>
  
</feed>
