<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby on Rails | AlohaCC]]></title>
  <link href="http://ccaloha.cc/blog/categories/ruby-on-rails/atom.xml" rel="self"/>
  <link href="http://ccaloha.cc/"/>
  <updated>2015-02-26T23:39:36+08:00</updated>
  <id>http://ccaloha.cc/</id>
  <author>
    <name><![CDATA[Aloha]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using Google Analytics for Email Click Tracking And Open Rate Tracking in Ruby on Rails]]></title>
    <link href="http://ccaloha.cc/blog/2015/02/27/using-google-analytics-for-email-click-tracking-and-open-rate-tracking-in-ruby-on-rails/"/>
    <updated>2015-02-27T23:34:39+08:00</updated>
    <id>http://ccaloha.cc/blog/2015/02/27/using-google-analytics-for-email-click-tracking-and-open-rate-tracking-in-ruby-on-rails</id>
    <content type="html"><![CDATA[<h2>Requirement</h2>

<ol>
<li><p>每個連結的點擊數</p></li>
<li><p>開信率</p></li>
</ol>


<h2>Google Analytics</h2>

<p>這是一個電子報，基本上屬於一種廣告！</p>

<p>那GA怎麼那麼厲害知道誰點了什麼？</p>

<p>該不會Google 大神，連Email也滲透？！</p>

<p>ps. 我猜他應該也差不多都知道我們在Email上的一舉一動，只要你用Gmail...</p>

<h3>那GA要怎麼紀錄？</h3>

<blockquote><p>基本上就是將<strong>連結網址</strong>帶上一些"參數"，當使用者點了這個連結之後，就你就會被帶到那個<strong>連結網址</strong>，這時候那個網站一定有埋GA的javascript
，這就是他的Key~ GA透過js爬到你的網址，當他發現你有帶某些參數，他就知道你是從哪裡來的！</p></blockquote>

<!-- more -->


<p>我剛剛提到了好幾次<strong>參數</strong></p>

<p>沒錯！這就是關鍵！</p>

<p>讓我們來看一下 有哪些參數</p>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/utm%E8%A8%AD%E8%A8%88.png"></p>

<p>GA在有文件說明<a href="https://support.google.com/analytics/answer/1033863">網址要如何使用</a></p>

<p>而且，GA還很貼心的幫大家準備了 <a href="https://support.google.com/analytics/answer/1033867?hl=zh-Hant">網址產生器</a></p>

<p>來看一下，實際上會產生什麼樣的連結：</p>

<p>假設我們追蹤</p>

<pre><code>透過Email點擊，來到首頁的人
</code></pre>

<p>Url 原本是長這樣</p>

<pre><code>www.urcosme.com
</code></pre>

<p>ps. urcosme.com小弟目前待的公司 XDDDDD廣告一下！</p>

<p>經過<del>我的</del>GA的巧手，它會長這樣</p>

<pre><code>www.urcosme.com/?utm_source=%E9%9B%BB%E5%AD%90%E5%A0%B1&amp;utm_medium=%E9%9B%BB%E5%AD%90%E9%83%B5%E4%BB%B6&amp;utm_content=%E6%B8%AC%E8%A9%A6%E6%B8%AC%E8%A9%A6&amp;utm_campaign=%E6%88%91%E5%A5%BD%E5%B8%A5
</code></pre>

<p>案....這是....!？</p>

<p>讓我幫你翻譯一下</p>

<pre><code>www.urcosme.com/?utm_source=電子報&amp;utm_medium=電子郵件&amp;utm_content=測試測試&amp;utm_campaign=我好帥
</code></pre>

<p>當我把連結改成這樣後，基本上使用者也是會點到你的首頁，但是對於GA而言，他就知道你是從電子郵件過來</p>

<p>但! 身為一個有責任感又假掰的IT，</p>

<p>我們當然希望讓系統自動幫行銷的同仁帶入這些參數，讓正妹同事覺得沒有你不行～</p>

<h2>1. Rails 要如何實作“點擊追蹤”</h2>

<p>其實很簡單，我們要寫一個 小小小爬蟲，把內容爬過一次</p>

<p>把有 &lt;a> 的找出來，然後把資訊加進去就好了！</p>

<p>那...爬蟲要怎麼寫？</p>

<p>各位，既然是來到 Rails ，Rails什麼不多，鐵路最多，歐不～ 是輪子最多！</p>

<p>跟大家介紹個 Gem : <strong><a href="http://www.nokogiri.org/">Nokogiri</a></strong></p>

<p>我們就直接用實作，來說明他可以幹麻</p>

<p>直接來看的程式碼：</p>

<p>這是我寫在 <strong>app/models/edm.rb</strong> 的code</p>

<p>這個model資訊是這樣</p>

<pre><code># == Schema Information
#
# Table name: edms
#
#  id                 :integer          not null, primary key
#  name               :string
#  send_at            :datetime
#  title              :string(255)
#  state              :string(255)
#  content            :text
#  created_at         :datetime
#  updated_at         :datetime
#


def parse_link_in_email(user_id)
    # 讀進email html
    html =  Nokogiri::HTML(self.content)
    # 找出所有 a 
    a_nodes = html.css('a')
    a_nodes.each do |a|
      # 抓出href 並且加上GA 追蹤
      tracking_a = a['href'] +  "?utm_source=#{self.name}-#{CGI.escape(a['href'])}" + 
                                "&amp;utm_medium=email" +
                                "&amp;utm_content=#{self.id}-#{user_id}" + 
                                "&amp;utm_campaign=#{self.title}"
      a['href'] = tracking_a
    end
    return html.to_html
 end
</code></pre>

<p>幾個重點：</p>

<ol>
<li>使用<strong>Nokogiri::HTML(self.content)</strong>  => 讀HTML進來</li>
<li><strong>html.css('a')</strong> => 抓出所有&lt;a></li>
<li><strong>a['href']</strong>     => 抓出這個&lt;a>，裡頭的屬性href</li>
<li><strong>html.to_html</strong>  => 轉回HTML</li>
</ol>


<p>Done !</p>

<p>所以當使用者點擊信件的link時，GA就會看到.....</p>

<p><strong>攬客 >> 廣告活動 >> 所有廣告活動</strong></p>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/GA_email_click_tracking.png" alt="GA email click tracking demo"></p>

<h2>2. Rails 要如何實作“開信率”</h2>

<p>開信率我是參考這篇<a href="http://dyn.com/blog/tracking-email-opens-via-google-analytics/">Blog</a>來實作</p>

<p>簡單來說，我們需要埋一個image tag，然而那個tag</p>

<p>會帶上一些<strong>參數</strong>，讓GA知道這幹嘛的！</p>

<p>為什麼要使用這種標籤的方式紀錄呢？</p>

<p>假設使用者打開信之後，並且點了一個連結，</p>

<p>因為這個點了連結的動作，我們知道他一定有開信，歐噎～ 做完了～</p>

<p>But...........</p>

<p>那如果他只有打開信，沒有點擊勒？ 如果他打開信，點了N個連結，那開信不就也被多紀錄了很多次？(ps.點擊紀錄是每點一次就紀錄一次)</p>

<blockquote><p>所以我們必須透過從 Google Analytics <strong>"GET"</strong> 一個標記(就是圖片啦)，當我們跟GA要圖的時候，可以告訴GA一些<strong>參數</strong>，嘿嘿，這樣就有辦法紀錄了！</p></blockquote>

<p>各位，又看到<strong>參數</strong>兩個字</p>

<p>那又有哪些可以用勒？ (這邊我只列我目前有在用的，詳細可以參考<a href="https://developers.google.com/analytics/devguides/collection/protocol/v1/parameters#events">GA collections parameters</a>)</p>

<table>
<thead>
<tr>
<th></th>
<th> 參數                                                                                 </th>
<th> 說明                                                                   </th>
<th> 舉例                                                                                 </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> tid </td>
<td> 要放GA的ID</td>
<td> UA-1234567-8 |</td>
</tr>
<tr>
<td></td>
<td> uid </td>
<td>Unique的ID(因為我們要寄信給User我是使用該User的ID)</td>
<td> 1 |</td>
</tr>
<tr>
<td></td>
<td> t   </td>
<td> 告訴GA這是個什麼類型的紀錄(基本上我查到都使用event) </td>
<td> event |</td>
</tr>
<tr>
<td></td>
<td> ec  </td>
<td> 告訴GA這個Event的Category </td>
<td> email-測試 |</td>
</tr>
<tr>
<td></td>
<td> ea  </td>
<td> 告訴GA這個Event的Action </td>
<td> Open |</td>
</tr>
<tr>
<td></td>
<td> el  </td>
<td> 告訴GA這個Event的Label </td>
<td> user_id-1 |</td>
</tr>
<tr>
<td></td>
<td> cs  </td>
<td> 廣告活動的來源 </td>
<td> Email標題 |</td>
</tr>
<tr>
<td></td>
<td> cm  </td>
<td> 廣告活動的媒介 </td>
<td> edm |</td>
</tr>
<tr>
<td></td>
<td> cn  </td>
<td> 廣告活動名稱   </td>
<td> 電子報第0期 | </td>
</tr>
</tbody>
</table>


<p>那我們就不看sample，直接來看實作code</p>

<pre><code>def parse_link_in_email(user_id)

    ... 

    body = html.at_css("body")
    img_node = Nokogiri::XML::Node.new("img",body)
    img_node['src'] = "https://www.google-analytics.com/collect?v=1" + 
                      "&amp;tid=#{Settings.google_analytics_key}" + 
                      "&amp;uid=#{user_id}"+
                      "&amp;t=event" +
                      "&amp;ec=email-#{self.name}-#{self.title}" + 
                      "&amp;ea=open" + 
                      "&amp;el=user_id-#{user_id}" + 
                      "&amp;cs=#{self.name}" + 
                      "&amp;cm=email" + 
                      "&amp;cn=#{self.title}"
    body &lt;&lt; img_node

    ...
end
</code></pre>

<p>幾個重點：</p>

<ol>
<li>使用<strong>Nokogiri::XML::Node.new("img",body)</strong>  => 新增一個&lt;img>標籤</li>
<li><strong>img_node['src']</strong>     => 設定這個&lt;img>，裡頭的屬性src</li>
<li><strong>body &lt;&lt; img_node</strong>  => 將code埋到body裡面</li>
</ol>


<p>那在GA你會看到什麼勒？</p>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/GA_email_open_tracking.png" alt="GA email open rate tracking demo"></p>

<h2>3. Rails Mailer、its View and model</h2>

<p> 剩下我沒提到的部份，不過這些就是基本寄信的功能，我就不贅述了</p>

<p> <strong>app/models/edm.rb</strong></p>

<pre><code>has_many :edm_user_ships  # 假設你有要寄信的清單
has_many :users, :through =&gt; :edm_user_ships
def send_mail
    self.users.each do |user|
        EdmMailer.delay.send_edm(self, user.email, user.id)
    end
end
</code></pre>

<p><strong>app/mailers/edm_mailer.rb</strong></p>

<pre><code>class EdmMailer &lt; ActionMailer::Base
  default from: "service@urcosme.com"

  def send_edm(e_notify, email, user_id = nil)
    @e_notify = e_notify
    @user_id = user_id

    mail to: email, subject: e_notify.title
  end
end
</code></pre>

<p><strong>app/views/edm_mailer/send_edm.html.slim</strong></p>

<pre><code>= raw @e_notify.parse_link_in_email(@user_id)
</code></pre>

<h2>Done</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Ruby on Rails] Model Version control using papertrail]]></title>
    <link href="http://ccaloha.cc/blog/2015/02/26/model-version-control-using-papertrail/"/>
    <updated>2015-02-26T16:30:53+08:00</updated>
    <id>http://ccaloha.cc/blog/2015/02/26/model-version-control-using-papertrail</id>
    <content type="html"><![CDATA[<h2>Why use papertrail ?</h2>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/Rails%E5%8A%A0%E5%85%A5Model%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-01-06%20%E4%B8%8A%E5%8D%8811.57.23.png" alt="ruby toolbox - active record versioning"></p>

<h2>Step1. Add lib</h2>

<p><strong>Gemfile</strong></p>

<pre><code>gem 'paper_trail', '~&gt; 3.0.6'
</code></pre>

<h2>Step2. create a migration</h2>

<p><strong>On Terminal</strong></p>

<pre><code>bundle exec rails generate paper_trail:install
</code></pre>

<p>他會建立，一個叫做<strong>versions</strong>的表</p>

<h2>Step3. migrate</h2>

<pre><code>bundle exec rake db:migrate
</code></pre>

<h2>Step4. Done</h2>

<p>把 <strong>has_paper_trail</strong> 加上你想要追蹤的model</p>

<h2>應用部分</h2>

<h3>若是想要不同model使用不同追蹤table?</h3>

<p>假設我想要<strong>product</strong>有自己的versions表</p>

<ul>
<li><p>Step1.</p>

<pre><code>  rails g model product_version 
</code></pre></li>
<li><p>貼上</p>

<pre><code>  class CreateProductVersions &lt; ActiveRecord::Migration
    def change
      create_table :product_versions do |t|
        t.string   :item_type, :null =&gt; false
        t.integer  :item_id,   :null =&gt; false
        t.string   :event,     :null =&gt; false
        t.string   :whodunnit
        t.text     :object
        t.datetime :created_at
        # t.string   :author_username 如果你需要自訂一些欄位讓他記錄，也可以在migration這邊加
      end
      add_index :product_versions, [:item_type, :item_id]
      end
    end
  end
</code></pre></li>
</ul>


<p>ps. 這就是他本身內建會產生的欄位，只是我們手動把它copy一份出來</p>

<ul>
<li><p>別忘了</p>

<pre><code>  bundle exec rake db:migrate
</code></pre></li>
<li><p>改model <strong>ProductVersion</strong></p>

<pre><code>  class ProductVersion &lt; PaperTrail::Version
    self.table_name = :product_versions
  end
</code></pre></li>
<li><p>改model <strong>Product</strong></p>

<pre><code>  class Product &lt; ActiveRecord::Base
      ...
      has_paper_trail class_name: 'ProductVersion'
      ...
  end
</code></pre></li>
</ul>


<h3>若是想要知道誰動了資料?</h3>

<p> 假設你有使用<strong>devise</strong>，然後是寫在後台</p>

<p>請加在 <strong>controller/admin/admin_controller.rb</strong></p>

<pre><code>def user_for_paper_trail
    admin_signed_in? ? current_admin.email : 'System'
end
</code></pre>

<p>假使你在前台，你可能需要這樣寫</p>

<pre><code>def user_for_paper_trail
    user_signed_in? ? current_user.email : 'Public User'
end
</code></pre>

<h3>若某個動作不想被追蹤</h3>

<pre><code>@product.without_versioning do
  @product.update_attributes :created_at =&gt; Time.now
end
</code></pre>

<h3>若要刪除某個versions從哪天到某天</h3>

<p>方法一：<strong>下SQL</strong></p>

<pre><code>delete from versions where created_at &lt; 2014-01-01;
</code></pre>

<p>方法二：<strong>在rails c底下</strong></p>

<pre><code>PaperTrail::Version.delete_all ["created_at &lt; ?", 1.year.ago]
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Analytics - Cross Device tracking in Ruby on Rails]]></title>
    <link href="http://ccaloha.cc/blog/2014/12/12/google-analytics-cross-device-tracking-in-ruby-on-rails/"/>
    <updated>2014-12-12T08:13:38+08:00</updated>
    <id>http://ccaloha.cc/blog/2014/12/12/google-analytics-cross-device-tracking-in-ruby-on-rails</id>
    <content type="html"><![CDATA[<p>首先，先來看一下google 的說明</p>

<iframe width="560" height="315" src="http://ccaloha.cc//www.youtube.com/embed/RsrAcxIsQHU" frameborder="0" allowfullscreen></iframe>




<!-- more -->


<blockquote><p>簡單來說，GA 在不同裝置瀏覽時，會依照每個裝置製作特別的ID, 但是，當user清掉Cookie或是重新安裝機器，就會把那個特別的ID重設，這樣他就會變成新訪客，而不是回流訪客。</p></blockquote>

<p>當然，如果要跨Devise追蹤，既然是不同的Devise當然它的ID一定不一樣，所以一個使用者如果用電腦先在Urcosme網頁看一下等一下想要購買的商品，之後，他出發到康是美，要買產品之前拿出手機，再看一次商品確認，基本上他就會被列為兩個不同的來源</p>

<p>所以要跨Device追蹤，很重要的關鍵是：</p>

<blockquote><p>那個特別的ID</p></blockquote>

<p>然而，Universal(新版)的GA有提供修改 user id的功能！</p>

<p><a href="http://cutroni.com/blog/2014/04/10/understanding-cross-device-measurement-and-the-user-id/">Understanding Cross Device Measurement and the User-ID</a></p>

<h2>那要怎麼加上user id 呢？</h2>

<h3>Step1. 第一步，打開User ID的功能</h3>

<p><img alt="GA User ID" src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/GA/user%20id%20%E5%95%9F%E7%94%A8.png"></img></p>

<h3>Step2. 改網站上的Code</h3>

<p><img alt="GA User ID code" src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/GA/%E8%A8%AD%E5%AE%9AUser_id%20.png"></p>

<h3>Step3. 設定View名稱！</h3>

<p>恭喜你 就有新的View !</p>

<h3>Step4. Rails 要怎麼加入 User ID呢？</h3>

<p>如果你跟我一樣是使用Devise gem作為登入的lib，</p>

<h4>Step 1. 在 app/views/layouts/application.html.slim 加上</h4>

<pre><code>= render 'shared/google_analytics', user_id: current_user.try(:id) 
</code></pre>

<p>ps. 若是使用 partial</p>

<pre><code>= render :partial =&gt; "partials/google_analytics" , :locals =&gt; { user_id: current_user.try(:id)}
</code></pre>

<p><em>重點就是那user_id，如果不用try的話，若是current_user是nil，就會報錯！</em></p>

<h4>Step 2. 編輯 app/views/shared/_google_analytics.html.erb</h4>

<pre><code>&lt;script&gt;

  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  &lt;%- if user_id.present? %&gt;
    ga('create', 'UA-XXXX-YYYY', {'userId': '&lt;%= user_id %&gt;'})
  &lt;%- else %&gt;
    ga('create', 'UA-XXXX-Y', 'urbox.cc');
  &lt;% end %&gt;
  ga('send', 'pageview');

&lt;/script&gt;
</code></pre>

<h3>那假設user沒有登入，你沒有辦法給他user id</h3>

<p>Google 有推出(工作階段整合) Session Unification的功能，當你啟動了這個功能後，基本上有User ID的就會被放在一個群組，沒有User ID的就會在另外一個群組！</p>

<p>但是厲害的是，Google在同一個session內，若發現這個ID(隨機產生)被重新assign過(系統assign)，他會把之前的action記錄給後來的ID</p>

<h2>那套上User ID後，會有什麼差別呢？</h2>

<ol>
<li><p> 你的指標(metrics)計算方式不同，但是更精確了！</p></li>
<li><p> 你擁有了跨裝置的報告.</p></li>
<li><p> Limited date range.</p></li>
</ol>


<p>  你的Data範圍是90天。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[HOWTO]- 在Ruby on Rails 實作Ckeditor上傳圖片到各個獨立的資料夾]]></title>
    <link href="http://ccaloha.cc/blog/2014/12/10/howto-setup-ckeditor-upload-picture-to-a-special-folder-in-ruby-on-rails/"/>
    <updated>2014-12-10T08:04:05+08:00</updated>
    <id>http://ccaloha.cc/blog/2014/12/10/howto-setup-ckeditor-upload-picture-to-a-special-folder-in-ruby-on-rails</id>
    <content type="html"><![CDATA[<p>首先，要先感謝 <strong><em>Ayaya</em></strong>，主要是參考他的code而改編出來的功能！</p>

<p>一樣講一下需求</p>

<p>我希望使用者上傳檔案到不同特定的資料夾，譬如：A新聞的照片，只會被上傳到A新聞的資料夾</p>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/%5BHOWTO%5D-%20%E5%9C%A8Ruby%20on%20Rails%20%E5%AF%A6%E4%BD%9CCkeditor%E4%B8%8A%E5%82%B3%E5%9C%96%E7%89%87%E5%88%B0%E5%90%84%E5%80%8B%E7%8D%A8%E7%AB%8B%E7%9A%84%E8%B3%87%E6%96%99%E5%A4%BE/Ckeditor_upload_image_to_specific_folder.png" alt='ckeditor 上傳圖片到特定資料夾'></p>

<p>之後你還可以實作 照片只能被特定使用者看到，這篇文章就不在這邊琢磨</p>

<!--more-->


<p>另外這篇文章，我不會提到 <strong>Ckedior</strong> 的基本安裝的東西，有興趣的話，請看 <strong><a href="https://github.com/galetahub/ckeditor">Github</a></strong></p>

<p>上傳的部分我是使用 <strong><a href="https://github.com/galetahub/ckeditor#activerecord--carrierwave">ActiveRecord + Carrierwave</a></strong></p>

<h2>Step1. Migration</h2>

<p>首先，我們先從model開始，當你跑完</p>

<pre><code>rails generate ckeditor:install --orm=active_record --backend=carrierwave
</code></pre>

<p>會幫你建立model，以我的case來說，會建立<strong><em>db/migrate/20141204171531_create_ckeditor_assets.rb</em></strong></p>

<p>在這邊，我要先另外加入</p>

<pre><code>  t.integer :owner_id 
  t.string  :owner_type, :limit =&gt; 30  
</code></pre>

<p>其中<strong>owner_type</strong>是要記錄哪個model</p>

<p><strong>owner_id</strong>是要記錄model的ID</p>

<p>舉例來說，如果你的建立產品上稿，會被記錄到 model 的就是：<strong>Product</strong>，另外ID可能是：<strong>999</strong></p>

<p>所以記錄到 owner_type 就會是 "Product" ，另外owner_id 就是："999"</p>

<p>最後別忘記，</p>

<pre><code>rake db:migrate
</code></pre>

<h2>Step2. [Important] Controller</h2>

<p>接下來步驟，會有點麻煩</p>

<p>因為我不想要用ckeditor 預設的 <strong>pictures_controller.rb</strong> 來處理上傳的動作，所以....</p>

<p>來看一下，麻煩點在於</p>

<p>我們是後台需要實作 ckeditor，所以controller要放在 <strong>/cooladmin/</strong> 裡面</p>

<p>這個...搞了我超久，不過也是因為這樣，讓我比較了解這個機制</p>

<p>好吧！ 那就開始吧！！！</p>

<pre><code>rails g controller cooladmin/ckeditor_pictures
</code></pre>

<h3>首先這個controller 必需繼承 <strong>Ckeditor::PicturesController</strong></h3>

<p>所以...</p>

<pre><code>class Cooladmin::CkeditorPicturesController &lt; Ckeditor::PicturesController
</code></pre>

<p>那這個<strong><a href="https://github.com/galetahub/ckeditor/blob/master/app/controllers/ckeditor/pictures_controller.rb">Ckeditor::PicturesController</a></strong>原本怎麼寫，就請看他們官網</p>

<p>由於我們不希望使用ckeditor 的before_action，所以，我們這邊都把它skip掉</p>

<pre><code>skip_before_filter :find_asset
skip_before_filter :ckeditor_authorize!
skip_before_filter :authorize_resource
</code></pre>

<h3>第一個action : <strong>index</strong></h3>

<p>這個是給當使用者點選"瀏覽伺服器"時呼叫的</p>

<p><img src='https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/%5BHOWTO%5D-%20%E5%9C%A8Ruby%20on%20Rails%20%E5%AF%A6%E4%BD%9CCkeditor%E4%B8%8A%E5%82%B3%E5%9C%96%E7%89%87%E5%88%B0%E5%90%84%E5%80%8B%E7%8D%A8%E7%AB%8B%E7%9A%84%E8%B3%87%E6%96%99%E5%A4%BE/ckeditor_controller_index_target_1.png'></p>

<p>我的寫法是：</p>

<pre><code>def index
  @pictures = Ckeditor::Paginatable.new(pictures).page(params[:page])
  respond_with(@pictures,layout: @pictures.first_page?)
end 
</code></pre>

<p>那 <strong>pictures</strong> 這個從那裡來？</p>

<pre><code>private

  def pictures
    @pictures ||= if owner
                Ckeditor::CkeditorPicture.by_owner(owner)
                    else
                    Ckeditor::CkeditorPicture.orphan
                    end
  end

  def owner
    @owner ||=  case 
                when params[:owner_type].present? &amp;&amp; params[:owner_id].present? 
                  params[:owner_type].singularize.classify.constantize.find(params[:owner_id])
                else
                  nil
                end
  end
</code></pre>

<p>ps. <strong>Ckeditor::CkeditorPicture.by_owner(owner)</strong> 這個model是我改裝model，下個章節會介紹，by_owner就是去拿到屬於這個owner的image，那owner怎麼來呢？</p>

<p>主要透過 url 取得目前是在哪個model的哪個ID被啟動ckeditor，這樣的話，就只會去抓屬於這個modal和他所屬的id，以下面那個url為例，他會去找ckeditor_assets裡頭的屬於<strong>owner_type</strong>為<strong>Product</strong>以及<strong>owner_id</strong>為<strong>1</strong>的所有照片</p>

<p><strong> https://XXX.XXX.XXX/cooladmin/ckeditor_pictures?owner_id=2&amp;owner_type=Product&amp;CKEditor=product_content&amp;CKEditorFuncNum=1&amp;langCode=zh </strong></p>

<h3>第二個action : <strong>create</strong></h3>

<p>照片上傳上來後，透過這個action去接</p>

<pre><code>def create
  if owner.present?
    @picture = Ckeditor::CkeditorPicture.new(owner: @owner) 
  else
    @picture = Ckeditor::CkeditorPicture.new(owner_type: params[:owner_type]) 
  end
  respond_with_asset(@picture)
end
</code></pre>

<p>判斷如果 有owner存在的話，就把這個照片new進去，並設定owner進去</p>

<p>不然的話，就在建立照片時，就只設定<strong>owner_type</strong> (這邊有個問題，我還不知道怎麼解決，所以只好先丟個owner_type給他)</p>

<h3>第三個action : <strong>destroy</strong></h3>

<p>很明顯就是去刪除照片～但是.....基本上這個方法不會被呼叫到....因為ckeditor會default去找</p>

<p>因為我們儲存到 <strong>ckeditor_assets</strong> table時，有一個欄位是 <strong>type</strong>，因為我們在new還有create時用的是 <strong>Ckeditor::CkeditorPicture.new(owner: @owner)</strong> 所以他的type就會是....<strong>Ckeditor::CkeditorPicture</strong>，所以在刪除的時候，
他default會去找有沒有這個controller => <strong>app/controllers/ckeditor_pictures_controller.rb</strong></p>

<p>這樣當然是沒有，因為我們是寫在 /cooladmin/底下啊～～～</p>

<p>所以...小弟我很弱，還不知道怎麼解....所以只好copy一份出來....</p>

<pre><code>def destroy
  @picture ||= Ckeditor::CkeditorPicture.find(params[:id])
  @picture.destroy
  respond_with(@picture,location: pictures_path)
end
</code></pre>

<p>完整版：<strong>app/controllers/cooladmin/ckeditor_pictures_controller.rb</strong></p>

<p>基本上這個contoller，我是直接copy一份到<strong>app/controllers/ckeditor_pictures_controller.rb</strong></p>

<pre><code>class Cooladmin::CkeditorPicturesController &lt; Ckeditor::PicturesController
  skip_before_filter :find_asset
  skip_before_filter :ckeditor_authorize!
  skip_before_filter :authorize_resource

  def index
    @pictures = Ckeditor::Paginatable.new(pictures).page(params[:page])
    respond_with(@pictures,layout: @pictures.first_page?)
  end

  def create
    if owner.present?
      @picture = Ckeditor::CkeditorPicture.new(owner: @owner) 
    else
      @picture = Ckeditor::CkeditorPicture.new(owner_type: params[:owner_type]) 
    end
    respond_with_asset(@picture)
  end

  def destroy
    @picture ||= Ckeditor::CkeditorPicture.find(params[:id])
    @picture.destroy
    respond_with(@picture,location: pictures_path)
  end

  private

  def pictures
    @pictures ||= if owner
                    Ckeditor::CkeditorPicture.by_owner(owner)
                  else
                    Ckeditor::CkeditorPicture.myupload_orphan(current_employee)
                  end
  end


  def owner
    @owner ||=  case 
                when params[:owner_type].present? &amp;&amp; params[:owner_id].present? 
                  params[:owner_type].singularize.classify.constantize.find(params[:owner_id])
                else
                  nil
                end
  end

end
</code></pre>

<h2>Step3. [Important] Model</h2>

<p>這邊我是直接改ckeditor幫我產生的model <strong>models/ckeditor/picture.rb</strong></p>

<p>我把它改成 <strong>models/ckeditor/ckeditor_picture.rb</strong></p>

<pre><code>mv models/ckeditor/picture.rb models/ckeditor/ckeditor_picture.rb
</code></pre>

<p>幾個重點：</p>

<ul>
<li>因為這個picture基本上會隸屬於不同的model 然後他們之間都是透過 owner來做type</li>
</ul>


<p>所以</p>

<pre><code>belongs_to :owner, polymorphic: true
</code></pre>

<ul>
<li>幾個簡單scope</li>
</ul>


<p>在看這個scope我們來看一下，db裡面存的主要欄位內容</p>

<table>
<thead>
<tr>
<th></th>
<th> assetable_id </th>
<th> assetable_type </th>
<th> type                      </th>
<th> owner_id </th>
<th> owner_type </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> 1            </td>
<td> Employee       </td>
<td> Ckeditor::CkeditorPicture </td>
<td> 2        </td>
<td> Product    |</td>
</tr>
</tbody>
</table>


<p>assetable_type => 這個資料的上傳者class</p>

<p>type      => 這張照片是哪個model new進來的</p>

<p>owner_type    => 這張照片被用在哪個class下</p>

<p>看完表格就知道我的scope在幹嘛了～</p>

<pre><code>scope :myupload_orphan, -&gt; (employee_id) {where(assetable_id: employee_id, owner_id: nil)}
scope :by_owner_type, -&gt; (owner,employee_id) {where(owner_type: owner.class.name, owner_id: nil, assetable_id: employee_id)}
scope :by_owner, -&gt; (owner) { where(owner_id: owner.id)}
</code></pre>

<p>完整程式：</p>

<pre><code>class Ckeditor::CkeditorPicture &lt; Ckeditor::Asset
  belongs_to :owner, polymorphic: true
  mount_uploader :data, CkeditorPictureUploader, :mount_on =&gt; :data_file_name

  scope :myupload_orphan, -&gt; (employee_id) {where(assetable_id: employee_id, owner_id: nil)}
  scope :by_owner_type, -&gt; (owner,employee_id) {where(owner_type: owner.class.name, owner_id: nil, assetable_id: employee_id)}
  scope :by_owner, -&gt; (owner) { where(owner_id: owner.id)}

  def url_content
    url(:content)
  end
end
</code></pre>

<h2>Step4. 修改ckeitor 設定</h2>

<p>我是使用coffeescript</p>

<pre><code>$(document).on 'ready page:load', -&gt;
  $('[data-content-editor]').each -&gt;
    $this = $(this)
    CKEDITOR.replace(
      this
      allowedContent: true

  # 設定要處理image處理
      filebrowserImageBrowseUrl: $this.data('upload-url')

      filebrowserImageUploadUrl: $this.data('upload-url')
    )
</code></pre>

<h2>Step5. 修改用到ckeditor的View</h2>

<p>我是使用simple_form</p>

<pre><code>= f.input :content, label: '內容', input_html: { class: 'form-control', data: {content_editor: true, upload_url: upload_url_for(@product)} } 
</code></pre>

<p>upload_url_for請看下面</p>

<h2>Step6. helper</h2>

<p>寫這個helper的原因是因為我希望不同的model都可以使用</p>

<p><strong>app/helpers/cooladmin/admin_helper.rb</strong></p>

<pre><code>module Cooladmin::AdminHelper
  def upload_url_for(resource)
    if resource.new_record?
      cooladmin_ckeditor_pictures_path(:owner_type =&gt; resource.class.name)
    else
      cooladmin_ckeditor_pictures_path(:owner_type =&gt; resource.class.name, :owner_id =&gt; resource.id)
    end
  end
end
</code></pre>

<h2>Step7. Route</h2>

<pre><code>Rails.application.routes.draw do
  # mount Ckeditor::Engine =&gt; '/uradmin/ckeditor'

  resources :ckeditor_pictures, only: [:index, :create, :destroy]

  namespace :cooladmin do
    # ....略
    # ckeditor使用
    resources :ckeditor_pictures, only: [:index, :create, :destroy]
  end

end
</code></pre>

<h2>完成！！！！！！！！！！！</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[HowTo] - Implement autocomplete feature in elasticsearch using soulmate.js in Ruby on Rails application]]></title>
    <link href="http://ccaloha.cc/blog/2014/12/03/howto-implement-autocomplete-feature-in-elasticsearch-using-soulmate-dot-js-in-ruby-on-rails-application/"/>
    <updated>2014-12-03T07:50:57+08:00</updated>
    <id>http://ccaloha.cc/blog/2014/12/03/howto-implement-autocomplete-feature-in-elasticsearch-using-soulmate-dot-js-in-ruby-on-rails-application</id>
    <content type="html"><![CDATA[<p>先說明一下需求，你希望使用者在搜尋框框打字的時，希望可以給他推薦就像....</p>

<p><img alt="elasticsearch autocomple sample" src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/%5BHowTo%5D%20-%20Implement%20autocomplete%20feature%20in%20elasticsearch%20using%20soulmate.js%20in%20Ruby%20on%20Rails%20application/f1.png"></p>

<p>故這篇文章，你可以知道，如何透過elasticsearch 達成 自動化推薦的功能！</p>

<p>以及 如何將此功能與 soulmate.js結合 (因為我之前是用soulmate來實作，但是會推薦的詞，一定是user有打過有搜尋過的字)</p>

<!-- more -->


<h2>Step0. 你可以先玩看看 soulmate.js</h2>

<p><a href="http://josephndungu.com/tutorials/fast-autocomplete-search-terms-rails">FAST AUTOCOMPLETE SEARCH TERMS - RAILS</a></p>

<p>另外這篇主要是參考</p>

<p><a href="https://shellycloud.com/blog/2013/10/adding-search-and-autocomplete-to-a-rails-app-with-elasticsearch">Adding search and autocomplete to a Rails app with Elasticsearch</a></p>

<h2>Step1. Searchkick</h2>

<p>下面加入到 <strong><em>Gemfile</em></strong>:</p>

<pre><code>gem 'searchkick'
</code></pre>

<h2>Step2. Routing</h2>

<p>因為我是要在產品搜尋時做自動推薦，所以在product的routing 加上 autocomplete</p>

<p>下面加入到 <strong><em>config/routes.rb</em></strong></p>

<pre><code>  #下面那行之前沒有elasticsearch幫忙，直接用soulmate實作時的做法
  #mount Soulmate::Server, :at =&gt; "/autocomplete" 

  resources :products do
    collection do
      get :autocomplete
      get :search
    end
  end 
</code></pre>

<h2>Step3. Model</h2>

<p>為了要吐給soulmate json (你可以參考：https://github.com/seatgeek/soulmate#loading-items)</p>

<p>下面加上在<strong><em>app/models/product.rb</em></strong></p>

<pre><code># 讓elasticsearch知道這兩個欄位要做autocomplete功能(他會針對這兩個欄位做不一樣的index)
searchkick autocomplete: ['name', 'description']


# 到時候要吐給soulmate的json格式，你可以參考：https://github.com/seatgeek/soulmate#loading-items)

def to_soulmate
    {
      "term" =&gt; "#{brand.name}-#{name}",
      "id" =&gt; "#{product_id}",
      "score" =&gt; "",
      "data" =&gt; {
        "link" =&gt; "/product_searchs/product?keyword=#{name}"
      }
    }
end
</code></pre>

<p>另外我有create 一個<strong>keyword</strong>的model這邊就不特別說了～controller會用到</p>

<h2>Step4. Controller</h2>

<p>關鍵！</p>

<p>加在 <strong><em>app/controllers/products_controller.rb</em></strong></p>

<pre><code>def autocomplete
    # searchkick做autocomplete
    @products = Product.search params[:term], limit: 10, fields: [{"description" =&gt; :word},{"name" =&gt; :word}]

    # 為了拼出讓soulmate知道的url
    callback_str = params[:callback]
    return_data = {
        "term" =&gt;  "#{params[:term]}", 
        "results" =&gt; {
            "keyword" =&gt;  @products.map(&amp;:to_soulmate)
        }
    }
    # 以下是為了拼出給soulmate的callback
    render json: callback_str + "(" + "#{return_data.to_json}" + ")"
end

def search
    if params[:keyword].present?
        @products = Product.searchkick(params[:keyword],sort,search_page)

        if @products.present?
            @keyword = Keyword.find_or_create_by(name: "#{params[:keyword]}") do |k|
                k.score = 0
                k.url = "/products/search?keyword=#{params[:keyword]}"
                k.keyword_type = "Keyword"
            end
            @keyword.update_attribute(:score, @keyword.score+=1) #代表多搜尋了一次
            # remove_from_soulmate(@keyword) #已用不到
            # load_into_soulmate(@keyword)  #已用不到
        end
    end
end

def load_into_soulmate(keyword)
    loader = Soulmate::Loader.new("#{keyword.keyword_type}")
    loader.add("term" =&gt; keyword.name, "id" =&gt; keyword.id, "score" =&gt; keyword.score, "data" =&gt; { "link" =&gt; "#{keyword.url}"})
end

def remove_from_soulmate(keyword)
    loader = Soulmate::Loader.new("#{keyword.keyword_type}")
  loader.remove("id" =&gt; keyword.id)
end
</code></pre>

<p>這邊很重要的是，你使用soulmate.js去做autocomplete時，他會丟出一串callback給server，基本上你的response也要包含這個callback，我覺得很像jsonp</p>

<p>[注意！] 我把load_into_soulmate還有remove_from_soulmate留著只是單純給你看之前的做法，</p>

<p>但是我還是有保留keyword的model這樣我才知道哪些關鍵字被打了最多次！(當然你可以用GA但是由於隱私權設定，你很多會看到not provided....囧)</p>

<h2>Step5. View</h2>

<p>加上你想要搜尋的頁面，我們希望使用者可以在所有網頁都看到，所以是放在</p>

<p><strong><em>app/views/layouts/application.html.slim</em></strong></p>

<pre><code>= text_field_tag 'keyword', '輸入產品關鍵字', class: "form-control"
= button_tag "搜尋", id: "product_search", class: "btn btn-default"
</code></pre>

<h2>Step6. javascript</h2>

<pre><code># 這是要給product_search點擊後使用
$("#product_search").click(function(){
    window.location = '&lt;%= search_products_path %&gt;?keyword=' + $("#keyword").val();
})

#這是soulmate用法：注意我把url改掉了！
$('#keyword').soulmate({
    url: '/products/autocomplete',
    types: ['product','review','keyword'],
    renderCallback : render,
    selectCallback : select,
    minQueryLength : 1,
    maxResults     : 10,
    timeout:    5000
})
</code></pre>

<h2>完成！！！</h2>
]]></content>
  </entry>
  
</feed>
