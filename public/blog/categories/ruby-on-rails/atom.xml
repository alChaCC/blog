<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby on Rails | AlohaCC]]></title>
  <link href="http://ccaloha.cc/blog/categories/ruby-on-rails/atom.xml" rel="self"/>
  <link href="http://ccaloha.cc/"/>
  <updated>2015-06-25T01:30:45+08:00</updated>
  <id>http://ccaloha.cc/</id>
  <author>
    <name><![CDATA[Aloha]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sign up by Devise and Crop User Avatar then Upload by Carrierwave using Ruby on Rails]]></title>
    <link href="http://ccaloha.cc/blog/2015/06/25/sign-up-by-devise-and-crop-user-avatar-then-upload-by-carrierwave-using-ruby-on-rails/"/>
    <updated>2015-06-25T01:15:45+08:00</updated>
    <id>http://ccaloha.cc/blog/2015/06/25/sign-up-by-devise-and-crop-user-avatar-then-upload-by-carrierwave-using-ruby-on-rails</id>
    <content type="html"><![CDATA[<p>ref:</p>

<ol>
<li> http://railscasts.com/episodes/182-cropping-images-revised</li>
<li> http://stackoverflow.com/questions/12762728/how-to-crop-image-on-upload-with-rails-carrierwave-and-minimagick</li>
<li> https://coderwall.com/p/e9d_ja/using-carrierwave-uploader-for-tableless-model-in-rails</li>
<li> http://stackoverflow.com/questions/24262388/carrierwave-processing-only-after-the-model-has-been-saved-model-id-is-nil</li>
</ol>


<h1>What I done in this article</h1>

<h2>1. Click Upload Image</h2>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/Crop%20User%20Avatar%20and%20Upload%20via%20Carrierwave%20while%20creating%20user%20using%20Ruby%20on%20Rails/Step1%20click_upload_image.png" alt="Step 1. click_upload_image"></p>

<h2>2. Choose Image And Preview</h2>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/Crop%20User%20Avatar%20and%20Upload%20via%20Carrierwave%20while%20creating%20user%20using%20Ruby%20on%20Rails/Step2%20choose%20image%20and%20preview.png" alt="Step 2. choose image and preview"></p>

<h2>3. Edit Avatar And Preview Image Synchronously</h2>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/Crop%20User%20Avatar%20and%20Upload%20via%20Carrierwave%20while%20creating%20user%20using%20Ruby%20on%20Rails/Step3%20edit%20avatar%20and%20preview%20sync.png" alt="Step 3. Edit Avatar And Preview Image Synchronously"></p>

<h2>4. Upload to AWS S3</h2>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/Crop%20User%20Avatar%20and%20Upload%20via%20Carrierwave%20while%20creating%20user%20using%20Ruby%20on%20Rails/Step4%20upload%20to%20AWS%20S3.png" alt="Step 4. Upload to AWS S3"></p>

<h2>5. Image Cropped And Uploaded</h2>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/Crop%20User%20Avatar%20and%20Upload%20via%20Carrierwave%20while%20creating%20user%20using%20Ruby%20on%20Rails/Step5%20image%20cropped%20and%20uploaded.png" alt="Step 5. Image Cropped And Uploaded"></p>

<!-- more -->


<h1>Steps</h1>

<h2>0. Description</h2>

<p>I use Devise for sign up, Carrierwave for upload image and Jcrop for image selection. There is an User model and user has one UserImage model. Carrierwave uploader is mounted on UserImage. In this tutorial, I'll not go through upload things. You can find lots of resources such as <a href="http://railscasts.com/episodes/253-carrierwave-file-uploads">carrierwave-file-uploads</a>. Also, I'll not show all devise registration and popup(modal) things. Still, there are many resources on the Internet. Ok, let's go.</p>

<h2>1. Gemfile</h2>

<p>I use jcrop for cropping image. So, add jcrop library to <em>Gemfile</em>.</p>

<pre><code>gem 'jcrop-rails-v2'
</code></pre>

<p>ps. don't forgot <strong>bundle install</strong></p>

<h2>2. Model</h2>

<p>In User model, I only need to tell that User has a main image and it refer to UserImage model, and user signup form contains UserImage's attributes, therefore, User model should accept these nested attributes. And I create a method for building image used in upload form(you can see usage in view)</p>

<p><strong>app/models/user.rb</strong></p>

<pre><code>class User &lt; ActiveRecord::Base
  ...
  has_one :main_image, :class_name =&gt; "::UserImage"
    accepts_nested_attributes_for :main_image, reject_if: :all_blank, allow_destroy: true


    def input_main_image
      self.main_image ||= self.build_main_image
      end
  ...
  end
</code></pre>

<p>UserImage model has "file" attribute which is used for upload, and we use carrierwave as our uploader, we need to mount this uploader to "file" attribute. <strong>[!! Important !!] I guess due to Rails work flow, when UserImageUploader upload image, the UserImage custom attributes: crop_x, crop_y, crop_w and crop_h will not available to UserImageUploader that we can't crop image as we want. So we need to skip upload callback first, and we will upload after user is saved.</strong></p>

<p>Ps. if your attribute used for mount uploader named "hello",</p>

<pre><code>mount_uploader :file, UserImagesUploader
skip_callback :save, :after, :store_file!
</code></pre>

<p>will be</p>

<pre><code>mount_uploader :hello, UserImagesUploader
skip_callback :save, :after, :store_hello!
</code></pre>

<p><strong>app/models/user_image.rb</strong></p>

<pre><code># == Schema Information
#
# Table name: user_images
#
#  id                 :integer          not null, primary key
#  user_id            :integer
#  file               :string(255)
#  created_at         :datetime
#  updated_at         :datetime
#

class UserImage &lt; ActiveRecord::Base
  belongs_to :user

    # Used for user avatar image edit
    attr_accessor :crop_x, :crop_y, :crop_w, :crop_h

    mount_uploader :file, UserImagesUploader

    # We need to upload after all attributes assigned，so we skip upload callback first
    skip_callback :save, :after, :store_file!  
end
</code></pre>

<h2>3. View</h2>

<p>In first picture, we have a form for sign up. Due to I have to upload an user image, we need to build it first. Then, UserImage's attributes need to be filled. And I will use some javascript methods for editing so I write some div elements such as "fake-button-upload", "fake-button-edit". Also, I need to popup a image for user editing. Below ".uploaded" codes are used for popup. Finally, you can see I setup some ids, yap~ for javascript.</p>

<p><strong>app/views/users/registrations/new.html.slim</strong></p>

<pre><code>.upload_personal_image
  = f.fields_for :main_image, resource.input_main_image do |build|
    = build.file_field :file, class: "personal-image-upload-file"
    .preview-outer
      = image_tag(resource.main_image.file, id: "preview") if resource.main_image
    .personal-image-upload.icon-default-photo-150x150
    .fake-button-upload 上傳個人照
    .fake-button-edit 編輯大頭照

    .uploaded
      .edit-title 編輯個人照
      = image_tag(resource.main_image.file, id: "preview-edit") if resource.main_image
      .uploaded-image-edit-attr
        - for attribute in [:crop_x, :crop_y, :crop_w, :crop_h]
          = build.text_field attribute, :id =&gt; attribute
      .edit-desc 請將想要顯示的範圍拖曳至中心圓圈處！
      .fake-button-edit-ok 設為個人照
</code></pre>

<h2>4. CSS</h2>

<p><strong>app/assets/stylesheets/front/users/registrations.css.coffee</strong></p>

<p>First we need to require jquery.Jcrop. And, I hope that our crop selector is a circle so I add....</p>

<pre><code>.jcrop-holder div
{
    -webkit-border-radius: 50% !important;
    -moz-border-radius: 50% !important;
    border-radius: 50% !important;
    margin: 0 auto;
    // opacity: 0.6 !important;
}
</code></pre>

<p>You can ignore them but you should notice that some classes are display none such as .personal-image-upload-file,  .preview-outer and .uploaded. These classed will show by javascript control.</p>

<pre><code>//=require jquery.Jcrop

...

.jcrop-holder div
{
    -webkit-border-radius: 50% !important;
    -moz-border-radius: 50% !important;
    border-radius: 50% !important;
    margin: 0 auto;
}

.personal-image-upload-file {
    display: none;
  }

  .preview-outer {
    overflow: hidden;
      display: none;
      width: 150px;
      height: 150px;
      position: absolute;
      left: 0px;
      top: 0px;
      #preview{
        width: 150px;
        height: 150px;
      }
   }
   .uploaded {
  background-color: #FFFFFF;
  text-align: center;
  display: none;
  .edit-title {
    font-size: 20px;
    margin: 0px auto 20px auto;
    padding-top: 30px;
  }
  img {
    border: 1px dashed #dd406f;
    z-index: 2;
  }
  .edit-desc{
    margin-top: 10px;
    margin-bottom: 10px;
    font-size: 14px;
  }

  .uploaded-image-edit-attr{
    display: none;
  }
  .fake-button-edit-ok{
    width: 100px;
    height: 30px;
    font-size: 16px;
    display: inline-block;
    line-height: 30px;
    cursor: pointer;
    background-color: #DD406F;
    border-radius: 3px;
    color: #FFFFFF;
    text-decoration: none;
    margin-bottom: 30px;
  }
}
</code></pre>

<h2>5. Javascript -> most important part for cropping image and previewing image.</h2>

<p>First, we need to require <strong>jquery.Jcrop</strong></p>

<pre><code>#= require jquery.Jcrop
</code></pre>

<p>If user click .personal-image-upload icon or .fake-button-upload button, I'll trigger real upload file click.</p>

<pre><code>$('.personal-image-upload').click -&gt; 
  $('.personal-image-upload-file').trigger('click')

$('.fake-button-upload').click -&gt;
  $('.personal-image-upload-file').trigger('click')
</code></pre>

<p>How to preview image?</p>

<p>First, I have to know original image size since if user don't resize image, I still need to send crop_x, crop_y, crop_w and crop_h to carrierwave crop function. Second, after FileReader read an image, I'll set file path to element #preview and #preview-edit src attribute. Then, I'll hide upload icon and show edit button.</p>

<pre><code>initPreviewImage = -&gt;    
    readURL = (input) -&gt;
      if input.files and input.files[0]
        reader = new FileReader

        reader.onload = (e) -&gt;
          img = new Image
          img.onload = -&gt;
            $('#crop_x').val(0);
            $('#crop_y').val(0);
            $('#crop_w').val(img.width);
            $('#crop_h').val(img.height);
          img.src = e.target.result

          $('.preview-outer').css("display": "inline-block")
          $('#preview').attr 'src', e.target.result
          $('#preview-edit').attr 'src', e.target.result
          $('.personal-image-upload').hide()
          $('.fake-button-edit').css("display": "block")
          $('.fake-button-edit').css("right": "0px")
          $('.fake-button-upload').css("left": "0px")

        reader.readAsDataURL input.files[0]

    $('#user_main_image_attributes_file').change -&gt;
      readURL this
 initPreviewImage();
</code></pre>

<p>At last, the cropping part. I setup three global variables for jcrop_api and image size(boundx, boundy). When the element .fake-button-edit button is clicked, I will call showUserImageEdit() and call my modal method for popup function. In showUserImageEdit function, if jcrop_api already existed(user choose a file already), I have to use jcrop_api to reset new image. And #preview-edit is used for binding jcrop, when user select new area or move selection, it will  call update_crop function to update crop_x, crop_y, crop_w and crop_h(don't forgot these attributes will send to carrierwave uploaded for cropping) and I will update #preview image as well.</p>

<p>Ps. you might ask why rx = 150 / coords.w and ry = 150 / coords.h ? The answer is, I give preview size 150x150px in CSS.</p>

<pre><code>jcrop_api = undefined
  boundx = undefined
  boundy = undefined

  showUserImageEdit = -&gt;
    if jcrop_api
      jcrop_api.setImage($('#preview').attr('src'));

    update_crop = (coords) -&gt;
      rx = 150 / coords.w
      ry = 150 / coords.h
      $('#preview').css
        width: Math.round(rx * boundx) + 'px'
        height: Math.round(ry * boundy) + 'px'
        marginLeft: '-' + Math.round(rx * coords.x) + 'px'
        marginTop: '-' + Math.round(ry * coords.y) + 'px'
      $('#crop_x').val(Math.floor(coords.x));
      $('#crop_y').val(Math.floor(coords.y));
      $('#crop_w').val(Math.floor(coords.w));
      $('#crop_h').val(Math.floor(coords.h));


    $('#preview-edit').Jcrop({
        bgOpacity: 0.4, 
        bgColor: 'black',
        onChange: update_crop,
        onSelect: update_crop,
        allowSelect: true,
        allowResize: true,
        setSelect: [50, 0, 150, 150],
        aspectRatio: 1
      }, -&gt; 
        bounds = this.getBounds();
        boundx = bounds[0];
        boundy = bounds[1];
        jcrop_api = this);
    $('.uploaded').show()
    $('.fake-button-edit-ok').click -&gt; 
      myModal().setTarget($('.uploaded')).close()
      jcrop_api.release()

  initPreviewImageEdit = -&gt;
    $('.fake-button-edit').click -&gt; 
      showUserImageEdit();
      myModal().setTarget($('.uploaded')).open()
  initPreviewImageEdit();
</code></pre>

<p>whole code <strong>app/assets/javascripts/users/registrations.js.coffee</strong></p>

<pre><code>#= require jquery.Jcrop
jQuery -&gt;
  $(document).on 'ready page:load', -&gt; 

    $('.personal-image-upload').click -&gt; 
      $('.personal-image-upload-file').trigger('click')

    $('.fake-button-upload').click -&gt;
      $('.personal-image-upload-file').trigger('click')

    initPreviewImage = -&gt;    
      readURL = (input) -&gt;
        if input.files and input.files[0]
          reader = new FileReader

          reader.onload = (e) -&gt;
            img = new Image
            img.onload = -&gt;
              $('#crop_x').val(0);
              $('#crop_y').val(0);
              $('#crop_w').val(img.width);
              $('#crop_h').val(img.height);
            img.src = e.target.result

            $('.preview-outer').css("display": "inline-block")
            $('#preview').attr 'src', e.target.result
            $('#preview-edit').attr 'src', e.target.result
            $('.personal-image-upload').hide()
            $('.fake-button-edit').css("display": "block")
            $('.fake-button-edit').css("right": "0px")
            $('.fake-button-upload').css("left": "0px")

          reader.readAsDataURL input.files[0]

      $('#user_main_image_attributes_file').change -&gt;
        readURL this
    initPreviewImage();

    jcrop_api = undefined
    boundx = undefined
    boundy = undefined

    showUserImageEdit = -&gt;
      if jcrop_api
        jcrop_api.setImage($('#preview').attr('src'));

      update_crop = (coords) -&gt;
        rx = 150 / coords.w
        ry = 150 / coords.h
        $('#preview').css
          width: Math.round(rx * boundx) + 'px'
          height: Math.round(ry * boundy) + 'px'
          marginLeft: '-' + Math.round(rx * coords.x) + 'px'
          marginTop: '-' + Math.round(ry * coords.y) + 'px'

        $('#crop_x').val(Math.floor(coords.x));
        $('#crop_y').val(Math.floor(coords.y));
        $('#crop_w').val(Math.floor(coords.w));
        $('#crop_h').val(Math.floor(coords.h));


      $('#preview-edit').Jcrop({
          bgOpacity: 0.4, 
          bgColor: 'black',
          onChange: update_crop,
          onSelect: update_crop,
          allowSelect: true,
          allowResize: true,
          setSelect: [50, 0, 150, 150],
          aspectRatio: 1
        }, -&gt; 
          bounds = this.getBounds();
          boundx = bounds[0];
          boundy = bounds[1];
          jcrop_api = this);

      $('.uploaded').show();

      $('.fake-button-edit-ok').click -&gt; 
        myModal().setTarget($('.uploaded')).close()
        jcrop_api.release()

    initPreviewImageEdit = -&gt;
      $('.fake-button-edit').click -&gt; 
        showUserImageEdit();
        myModal().setTarget($('.uploaded')).open()
    initPreviewImageEdit();
</code></pre>

<h2>6. Carrierwave uploader</h2>

<p>As you can see I create a new version named _customize and it only do its job when model(UserImage model) has crop_x, crop_y, crop_w and crop_h attributes. And I use minimagick crop method to crop image before upload.</p>

<pre><code>class UserImagesUploader &lt; CarrierWave::Uploader::Base

  include CarrierWave::MiniMagick

  storage :fog

  ...

  version :_customize, :if =&gt; :customize? do 
    process :crop_img
    resize_to_fill(150, 150)
  end

  def customize? picture
    !model.crop_x.blank? &amp;&amp; !model.crop_y.blank? &amp;&amp; !model.crop_w.blank? &amp;&amp; !model.crop_h.blank?
  end

  def crop_img
    if !model.crop_x.blank? &amp;&amp; !model.crop_y.blank? &amp;&amp; !model.crop_w.blank? &amp;&amp; !model.crop_h.blank?
      manipulate! do |img|
        x = model.crop_x.to_i
        y = model.crop_y.to_i
        w = model.crop_w.to_i
        h = model.crop_h.to_i
        img.crop("#{w}x#{h}+#{x}+#{y}")
        img
      end
    end
  end

  ...

end
</code></pre>

<h2>7. Final step: Upload Image</h2>

<p>Do you remember that I skip upload callback in <strong>app/models/user_image.rb</strong> ?</p>

<pre><code>skip_callback :save, :after, :store_file!  
</code></pre>

<p>So, when should we do upload job?</p>

<p>Answer is after user save !</p>

<pre><code>class Users::RegistrationsController &lt; Devise::RegistrationsController
  after_filter :upload_avatar, :only =&gt; :create

  ... 

  protected

  def upload_avatar
    if resource.persisted? &amp;&amp; resource.main_image # user is created successfuly
      resource.main_image.store_file! 
      resource.main_image.file.recreate_versions!
    end
  end

  ... 
end
</code></pre>

<h2>8. Don't forgot ...</h2>

<p>Since we use Devise for sign up, and we use nested attributes, we need to tell Devise permitted parameters.</p>

<p><strong>app/controllers/applicatio.rb</strong></p>

<pre><code>class ApplicationController &lt; ActionController::Base
  ...
  before_action :configure_permitted_parameters, if: :devise_controller?

  private

  def configure_permitted_parameters
    devise_parameter_sanitizer.for(:sign_up) { |u| u.permit(:email, :password, :password_confirmation, main_image_attributes: ['id', '_destroy', 'file', 'crop_x', 'crop_y', 'crop_w', 'crop_h'])}
  end 
  ... 
end
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[String handling between JavaScript and Ruby]]></title>
    <link href="http://ccaloha.cc/blog/2015/06/10/string-handling-between-javacript-and-ruby/"/>
    <updated>2015-06-10T00:14:49+08:00</updated>
    <id>http://ccaloha.cc/blog/2015/06/10/string-handling-between-javacript-and-ruby</id>
    <content type="html"><![CDATA[<p>javascript 在做 <strong>escape</strong> 時，編碼出來的字，和Ruby的 <strong>CGI.escape</strong>、<strong>URI.escape</strong> 是不同的！</p>

<p>舉例來說：</p>

<p>在<strong>browser console下</strong></p>

<pre><code>escape("台中市")
&gt; "%u53F0%u4E2D%u5E02"
</code></pre>

<p>但是在<strong>rails c</strong> 下</p>

<pre><code>CGI.escape("台中市")
&gt; "%E5%8F%B0%E4%B8%AD%E5%B8%82"
</code></pre>

<p> Why?</p>

<!-- more -->


<p> 查了一下Google，發現是因為在 js 在escape中文時，是將他編成 unicode</p>

<p> 所以，</p>

<h2>javascript 如果要送中文字給Ruby 請使用</h2>

<pre><code>encodeURIComponent("台中市")
&gt; "%E5%8F%B0%E4%B8%AD%E5%B8%82"
</code></pre>

<h2>但是，往往沒辦法你不能去改人家的javascript，你只好.... javascripts escape string to UTF-8</h2>

<p>查到的作法如下：</p>

<p>在<strong>rails c</strong> 下</p>

<pre><code>unicode_str = "%u53F0%u4E2D%u5E02"

unicode_str.gsub(/\%u([\da-fA-F]{4})/) {|m|  [$1].pack('H*').unpack('n*').pack('U*')}

=&gt; "台中市"
</code></pre>

<p> 參數解釋：</p>

<p> 因為 unicode 的字串都是由 %u 開頭，外加上 4個可能是數字可能是 小寫a~f 或是 大寫A~F，所以我們先透過 <strong>gsub</strong> 這個function將符合的字抓出來處理</p>

<p> 抓出來字之後，我們要使用 <strong>pack</strong> 和 <strong>unpack</strong> 方法，來將字進行解碼、編碼</p>

<p> 我們先抓一個字來看，就以 "台" 為例， (ps. <strong>pack 只能用在array, unpack可以用在string</strong>)</p>

<p> gsub 會將 "53F0" 丟進去處理</p>

<pre><code>["53F0"].pack('H*')

  =&gt; "S\xF0"
</code></pre>

<p>  # H: 代表了將他pack組成16進位字(hex string (high nibble first))</p>

<pre><code>"S\xF0".unpack('n*')

=&gt; [21488]
</code></pre>

<p>  # n: 他會return一個 Integer，他代表了16-bit unsigned, network (big-endian) byte order</p>

<pre><code>[21488].pack('U*')

=&gt; "台"
</code></pre>

<p>  # U: 將16位元NBO組成UTF-8</p>

<p> REF: <br/>
 <a href="http://www.cnphp6.com/archives/4967">UNESCAPE編碼錯誤</a></p>

<h2>那反過來呢，要如何將UTF-8的字，做成像 javascript escape 後的結果</h2>

<p>在<strong>rails c</strong>下</p>

<pre><code>return_str = ""
"台中市".each_char { |c| return_str += "%u#{c.unpack("U*").pack("n*").unpack("H*").first}" }


return_str 
&gt; "%u53f0%u4e2d%u5e02"
</code></pre>

<h2>假設，你現在要串接的使用Big5寫的API，你發現他接收的parameters 居然是%A5%78%A4%A4%A5%AB</h2>

<p>因為他default是接受，用 javascript escape Big5編碼的字</p>

<p>所以你要將你UTF-8的字，轉成符合他格式的字</p>

<p>這時候你要這樣做：</p>

<pre><code>  return_str = ""
  Iconv.conv("BIG5", "UTF8", str).unpack("H*").first.scan(/../).each do |s|
    return_str += "%#{s}"
  end
</code></pre>

<p>一樣來看說明：</p>

<pre><code>Iconv.conv("BIG5", "UTF8", "台中市")

=&gt; "\x{A578}\x{A4A4}\x{A5AB}"


Iconv.conv("BIG5", "UTF8", "台中市").unpack("H*")

=&gt; ["a578a4a4a5ab"]

Iconv.conv("BIG5", "UTF8", "台中市").unpack("H*").first.scan(/../)

=&gt; ["a5", "78", "a4", "a4", "a5", "ab"]
</code></pre>

<h2>打完收工！</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Ruby on Rails] Send limited mail on staging environment]]></title>
    <link href="http://ccaloha.cc/blog/2015/04/28/send-limited-mail-on-staging-environment/"/>
    <updated>2015-04-28T17:16:33+08:00</updated>
    <id>http://ccaloha.cc/blog/2015/04/28/send-limited-mail-on-staging-environment</id>
    <content type="html"><![CDATA[<p>For simulating production environment, we will build up a stage machine.</p>

<p>Plus, we usually use the copy of production database in stage server.</p>

<p>In some applications, we will send email to users for some purposes such as confirmation mail after user</p>

<p>register, reset password mail...etc.</p>

<p>And, in staging environment, we have to avoid our operators accidentally send email to real users.</p>

<p>Therefore, we have to implement some codes for filtering.</p>

<p>Let's go</p>

<!-- more -->


<p>According to <a href="http://edgeguides.rubyonrails.org/action_mailer_basics.html#intercepting-emails">Action Mailer Basics</a>, we can register an interceptor to avoid some unexpected actions.</p>

<p>And my requirement is I want staging server can send mail to our employees. In our case, our company mail address is <strong>xxx@itrue.com.tw</strong>. So, we have to implement code that only allow email server send to users like: <strong>XXX@itrue.com.tw</strong>.</p>

<h2>Step1. <em>Gemfile</em></h2>

<pre><code>gem 'settingslogic'
</code></pre>

<h2>Step2. Add a lib on <em>app/lib/settings.rb</em></h2>

<pre><code>class Settings &lt; Settingslogic
    source "#{Rails.root}/config/application.yml"
    namespace Rails.env
end
</code></pre>

<h2>Step3. Add your white list on <em>application.yml</em></h2>

<pre><code>defaults: &amp;defaults
  allowed_send_mail_domain: '@itrue.com.tw'

development:
  &lt;&lt;: *defaults

test:
  &lt;&lt;: *defaults

production:
  &lt;&lt;: *defaults
</code></pre>

<h2>Step4. Write a interceptor on <em>app/interceptor/staging_mail_interceptor.rb</em></h2>

<p>ref: <a href="http://renderedtext.com/blog/2012/04/27/filtering-emails-on-staging/">Filtering emails on staging</a></p>

<pre><code>class StagingMailInterceptor

  def self.delivering_email(message)
    message.to = extract_allowed_recepients(message)
    message.perform_deliveries = false if message.to.empty?
  end

  private

  def self.extract_allowed_recepients(message)
    message.to.select { |address| allowed_address?(address) }
  end

  def self.allowed_address?(address)
    allowed_domains = Settings.allowed_send_mail_domain.split(',')

    matches_allowed = allowed_domains.count { |domain| address.include?(domain) }

    matches_allowed != 0
  end

end
</code></pre>

<h2>Step5. Register interceptor to ActionMailer on <em>app/config/initializers/sandbox_email_interceptor.rb</em></h2>

<pre><code>require 'staging_mail_interceptor'

if Rails.env.staging?
  ActionMailer::Base.register_interceptor(StagingMailInterceptor)
end
</code></pre>

<h2>Done</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[howto] Using Google Analytics Enhanced Ecommerce Tracking your awesome website via Ruby on Rails 如何在Ruby on Rails使用Google Analytics 進階電子商務追蹤]]></title>
    <link href="http://ccaloha.cc/blog/2015/04/13/howto-use-google-analytics-enhanced-ecommerce-tracking-via-ruby-on-rails/"/>
    <updated>2015-04-13T12:15:58+08:00</updated>
    <id>http://ccaloha.cc/blog/2015/04/13/howto-use-google-analytics-enhanced-ecommerce-tracking-via-ruby-on-rails</id>
    <content type="html"><![CDATA[<blockquote><p>i-TRUE 的目標是成為全世界最棒的專業型Database Media Company</p>

<p>我每週一早上負責跟同事們介紹Google Analytics，這是其中一個介紹投影片！</p>

<p>陸續更新中...</p></blockquote>

<iframe id="iframe_container" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen="" width="550" height="400" src="https://prezi.com/embed/w0azjc2vz3tf/?bgcolor=ffffff&amp;lock_to_path=0&amp;autoplay=0&amp;autohide_ctrls=0#"></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Integrate Ruby on Rails with Google Analytics API]]></title>
    <link href="http://ccaloha.cc/blog/2015/04/09/integrate-ruby-on-rails-with-google-analytics-api/"/>
    <updated>2015-04-09T22:32:24+08:00</updated>
    <id>http://ccaloha.cc/blog/2015/04/09/integrate-ruby-on-rails-with-google-analytics-api</id>
    <content type="html"><![CDATA[<p>In this article, I try to get some Google Analytics data via Google API. Then, I saved data into MongoDB waiting for further calculation.</p>

<p>And you are able to learn</p>

<ol>
<li>How I do Google API pagination</li>
<li>How I use module to build flexible function</li>
<li>How I use Google Query Explorer to speed up development</li>
<li>How to apply for google API access</li>
</ol>


<p>Let's check it out.</p>

<!-- more -->


<h2>Step 1. Apply Google Analytics API access authorization</h2>

<h3>1-1 go to <a href="https://code.google.com/apis/console/">Google API console</a></h3>

<h3>1-2 Find Google Analytics API</h3>

<p> <img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/Integrate%20Ruby%20on%20Rails%20with%20Google%20Analytics%20API/find_google_api.png" alt="find google api"></p>

<h3>1-3 Enable Google Analytics API</h3>

<p> <img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/Integrate%20Ruby%20on%20Rails%20with%20Google%20Analytics%20API/Enable%20Google%20Analytic%20API.png" alt="enable google analytics API"></p>

<h3>1-4 Create New Client ID</h3>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/Integrate%20Ruby%20on%20Rails%20with%20Google%20Analytics%20API/Create%20New%20Client%20ID.png" alt="Create New Client ID"></p>

<h3>1-5 Choose client type</h3>

<p>Since this is for server-to-server usage, I choose this</p>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/Integrate%20Ruby%20on%20Rails%20with%20Google%20Analytics%20API/Choose%20client%20type.png" alt="Choose client type"></p>

<h3>1-6 Download key</h3>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/Integrate%20Ruby%20on%20Rails%20with%20Google%20Analytics%20API/download%20key.png" alt="download key"></p>

<p>ps. Since I use Ruby on Rails, so I put it in <strong>config/ga_api_key_20150408.p12</strong></p>

<h3>1-7 Add API user into your GA user group</h3>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/Integrate%20Ruby%20on%20Rails%20with%20Google%20Analytics%20API/Add%20API%20user%20into%20your%20GA%20user%20group.png"></p>

<h2>2. [TIPS] Use Google Query Explorer to speed up development</h2>

<h3>1. Go to <a href="https://ga-dev-tools.appspot.com/query-explorer/">Google Query Explorer</a></h3>

<h3>2. Get your view id</h3>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/Integrate%20Ruby%20on%20Rails%20with%20Google%20Analytics%20API/Get%20your%20view%20id.png"></p>

<h3>3. Try your query parameter first and know how your data look like</h3>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/Integrate%20Ruby%20on%20Rails%20with%20Google%20Analytics%20API/Try%20your%20query%20parameter%20first.png"></p>

<p>And it provides a easy tool that you don't need to remember any parameters.</p>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/Integrate%20Ruby%20on%20Rails%20with%20Google%20Analytics%20API/parameter%20tool.png"></p>

<h2>3. Let's write a sample code</h2>

<h3>3-1 Add gem to Gemfile</h3>

<pre><code>gem 'google-api-client'
</code></pre>

<h3>3-2 create a rb file</h3>

<p>I update some codes copied from this page.<a href="https://gist.github.com/joost/5344705">https://gist.github.com/joost/5344705</a></p>

<pre><code>  require 'google/api_client'
  require 'date'

  client = Google::APIClient.new(:application_name =&gt; 'Urcosme-GA-sync', :application_version =&gt; '1')

  key_file = File.join("#{Rails.root}/config", 'ga_api_key_20150408.p12')
  key = Google::APIClient::PKCS12.load_key(key_file, 'notasecret')
  service_account = Google::APIClient::JWTAsserter.new(
      'hello@developer.gserviceaccount.com',
      ['https://www.googleapis.com/auth/analytics.readonly', 'https://www.googleapis.com/auth/prediction'],
      key)
  client.authorization = service_account.authorize

  analytics = client.discovered_api('analytics', 'v3')

  parameters = {
        'ids'         =&gt; "ga:12345",
        'start-date'  =&gt; (Date.today - 30).strftime("%Y-%m-%d"),
        'end-date'    =&gt; Time.now.strftime("%Y-%m-%d"),
        'metrics'     =&gt; "ga:avgTimeOnPage",
        'filters'     =&gt; "ga:pagePath=~/"
      }
  result = client.execute(:api_method =&gt; analytics.data.ga.get, :parameters =&gt; parameters)
</code></pre>

<p>This sample code demonstrates how <strong>google-api-client</strong> work.
However, I need to fetch different kinds of data such as specific pageviews, event, and campaign. I have to refactor it.</p>

<h2>4. Let's build a flexible code</h2>

<h2>4-1 create a module file: "ga.rb" in /lib/</h2>

<p>In above code, it can be seperated to 2 parts. One is uniform part, the other is variable part.</p>

<p>Unchange part</p>

<pre><code>@client = Google::APIClient.new(:application_name =&gt; 'Urcosme-GA-sync', :application_version =&gt; '1')
key_file = File.join("#{Rails.root}/config", 'ga_api_key_20150408.p12')
key = Google::APIClient::PKCS12.load_key(key_file, 'notasecret')
service_account = Google::APIClient::JWTAsserter.new(
          'hello@developer.gserviceaccount.com',
          ['https://www.googleapis.com/auth/analytics.readonly', 'https://www.googleapis.com/auth/prediction'],
          key)
@client.authorization = service_account.authorize
@analytics = @client.discovered_api('analytics', 'v3')
</code></pre>

<p>Change part. In this code, I already write some default parameters.
But, it can be rewrite in other place.</p>

<pre><code>@data_date = Date.today - 1
@parameters = {
    'ids'         =&gt; "ga:12345",
    'start-date'  =&gt; @data_date.strftime("%Y-%m-%d"),
    'end-date'    =&gt; @data_date.strftime("%Y-%m-%d"),
    'metrics'     =&gt; "",
    'dimensions'  =&gt; "",
    'max-results' =&gt; "10000"
}
</code></pre>

<p>And the whole code show as below.</p>

<p><strong>lib/ga.rb</strong></p>

<pre><code>require 'google/api_client'
require 'date'
module GoogleAnalytic

  # 每一個GA API執行前，需要初始化
  def initialize_ga
    @client = Google::APIClient.new(:application_name =&gt; 'Urcosme-GA-sync', :application_version =&gt; '1')
    key_file = File.join("#{Rails.root}/config", 'ga_api_key_20150408.p12')
    key = Google::APIClient::PKCS12.load_key(key_file, 'notasecret')
    service_account = Google::APIClient::JWTAsserter.new(
      'hello@developer.gserviceaccount.com',
      ['https://www.googleapis.com/auth/analytics.readonly', 'https://www.googleapis.com/auth/prediction'],
      key)
    @client.authorization = service_account.authorize
    @analytics = @client.discovered_api('analytics', 'v3')
    @data_date = Date.today - 1
    @parameters = {
        'ids'         =&gt; "ga:12345",
        'start-date'  =&gt; @data_date.strftime("%Y-%m-%d"),
        'end-date'    =&gt; @data_date.strftime("%Y-%m-%d"),
        'metrics'     =&gt; "",
        'dimensions'  =&gt; "",
        'max-results' =&gt; "10000"
      }
  end

  # 將資料儲存到MongoDB，請複寫我
  def sync_to_db(result)
  end
end
</code></pre>

<h2>4-2 let's Rails application know our lib</h2>

<p><strong>config/application.rb</strong></p>

<pre><code>module MyAwesomeApp
  class Application &lt; Rails::Application
    config.autoload_paths += %W(#{config.root}/lib)   end
end
</code></pre>

<h2>4-3 create a model to save API data</h2>

<p>Now I want to get all our campaign data. So I create ...</p>

<p>ps. I use MongoDB as database.</p>

<p><strong>app/models/ga_campaign.rb</strong></p>

<pre><code>class GACampaign
  include GoogleAnalytic
  include Mongoid::Document
  include Mongoid::Timestamps
  field :campaign_name, type: String      # 廣告活動名稱
  field :campaign_source, type: String    # 廣告活動來源    
  field :campaign_medium, type: String    # 廣告活動媒介
  field :campaign_content, type: String   # 廣告活動內容
  field :session, type: Integer
  field :pageview, type: Integer
  field :data_date, type: Date            # 原始資料的時間

  def get_campaign_from_ga_api
    initialize_ga
    @parameters['metrics'] = "ga:pageviews,ga:sessions"
    @parameters['dimensions'] = "ga:campaign,ga:source,ga:medium,ga:adContent"
    @parameters['filters'] = "ga:campaign!=(not set)"
    sync_to_db(@parameters)
  end

  def sync_to_db(parameters)
     request = {
        :api_method =&gt; @analytics.data.ga.get,
        :parameters =&gt; parameters
     }
    result = @client.execute(request)
    result.data.rows.each do |array_data|
        GACampaign.create(campaign_name:    array_data[0], 
                          campaign_source:  array_data[1], 
                          campaign_medium:  array_data[2],
                          campaign_content: array_data[3],
                          session:          array_data[4],
                          pageview:         array_data[5],
                          data_date:        @data_date)
    end
  end
end
</code></pre>

<p>But.... if result is more than max-result (according to google, maximun is 10000 <a href="https://developers.google.com/analytics/devguides/reporting/core/v3/reference#maxResults">see google doc</a>)</p>

<p>How can I do paginate?</p>

<h2>4-4 Google API pagination</h2>

<p>Since, this method will be used in every "GA model" so I put it in <strong>lib/ga.rb</strong></p>

<p>according to GA document</p>

<blockquote><p>If not supplied, the starting index is 1. (Result indexes are 1-based. That is, the first row is row 1, not row 0.) Use this parameter as a pagination mechanism along with the max-results parameter for situations when totalResults exceeds 10,000 and you want to retrieve rows indexed at 10,001 and beyond.</p></blockquote>

<p>here is my method. Not quiet good, but it's working.</p>

<pre><code>def query_paginate(parameters)
     request = {
      :api_method =&gt; @analytics.data.ga.get,
      :parameters =&gt; parameters
    }
    count = 0
    loop do
      result = @client.execute(request)
      sync_to_db(result)
      max_count = result.data.total_results / parameters["max-results"].to_i
      break if count == max_count
      count += 1
      request[:parameters]["start-index"] = parameters["max-results"].to_i * count + 1
    end
  end
</code></pre>

<p>let's see full code.</p>

<pre><code>require 'google/api_client'
require 'date'
module GoogleAnalytic

def initialize_ga
    @client = Google::APIClient.new(:application_name =&gt; 'Urcosme-GA-sync', :application_version =&gt; '1')
    key_file = File.join("#{Rails.root}/config", 'ga_api_key_20150408.p12')
    key = Google::APIClient::PKCS12.load_key(key_file, 'notasecret')
    service_account = Google::APIClient::JWTAsserter.new(
      'hello@developer.gserviceaccount.com',
      ['https://www.googleapis.com/auth/analytics.readonly', 'https://www.googleapis.com/auth/prediction'],
      key)
    @client.authorization = service_account.authorize
    @analytics = @client.discovered_api('analytics', 'v3')
    @data_date = Date.today - 1
    @parameters = {
        'ids'         =&gt; "ga:12345",
        'start-date'  =&gt; @data_date.strftime("%Y-%m-%d"),
        'end-date'    =&gt; @data_date.strftime("%Y-%m-%d"),
        'metrics'     =&gt; "",
        'dimensions'  =&gt; "",
        'max-results' =&gt; "10000"
      }
  end

  # 將資料儲存到MongoDB，請複寫我
  def sync_to_db(result)
  end

  # 如果API存取，外加換頁功能，因為GA一次request最多一萬筆資料
  def query_paginate(parameters)
     request = {
      :api_method =&gt; @analytics.data.ga.get,
      :parameters =&gt; parameters
    }
    count = 0
    loop do
      result = @client.execute(request)
      sync_to_db(result)
      max_count = result.data.total_results / parameters["max-results"].to_i
      break if count == max_count
      count += 1
      request[:parameters]["start-index"] = parameters["max-results"].to_i * count + 1
    end
  end
end
</code></pre>

<h3>4-5 refactor <strong>app/models/ga_campaign.rb</strong></h3>

<pre><code>class GACampaign
  include GoogleAnalytic
  include Mongoid::Document
  include Mongoid::Timestamps
  field :campaign_name, type: String      # 廣告活動名稱
  field :campaign_source, type: String    # 廣告活動來源
  field :campaign_medium, type: String    # 廣告活動媒介
  field :campaign_content, type: String   # 廣告活動內容
  field :session, type: Integer
  field :pageview, type: Integer
  field :data_date, type: Date            # 原始資料的時間

  def get_campaign_from_ga_api
    initialize_ga
    @parameters['metrics'] = "ga:pageviews,ga:sessions"
    @parameters['dimensions'] = "ga:campaign,ga:source,ga:medium,ga:adContent"
    @parameters['filters'] = "ga:campaign!=(not set)"
    query_paginate(@parameters)
  end

  def sync_to_db(result)
        result.data.rows.each do |array_data|
        GACampaign.create(campaign_name:    array_data[0], 
                          campaign_source:  array_data[1], 
                          campaign_medium:  array_data[2],
                          campaign_content: array_data[3],
                          session:          array_data[4],
                          pageview:         array_data[5],
                          data_date:        @data_date)
    end
  end
end
</code></pre>

<h3>4-6 how to use</h3>

<pre><code>ga_campaign = GACampaign.new
ga_campaign.get_campaign_from_ga_api
</code></pre>

<h3>4-7 other example: fetch GA Event data</h3>

<p>The things I have to change are <strong>@parameters</strong> and <strong>sync_to_db</strong></p>

<p>It's easy, right~</p>

<p><strong>app/models/ga_event.rb</strong></p>

<pre><code>class GAEvent
  include GoogleAnalytic
  include Mongoid::Document
  include Mongoid::Timestamps
  field :event_category, type: String      # 事件類別
  field :event_label, type: String         # 事件標籤
  field :event_action, type: String        # 事件動作
  field :total_events, type: Integer       
  field :unique_events, type: Integer
  field :data_date, type: Date            # 原始資料的時間

  def get_event_from_ga_api
    initialize_ga
    @parameters['metrics'] = "ga:totalEvents,ga:uniqueEvents"
    @parameters['dimensions'] = "ga:eventCategory,ga:eventLabel,ga:eventAction"
    @parameters['filters'] = "ga:eventCategory==test"
    query_paginate(@parameters)
  end

  def sync_to_db(result)
    result.data.rows.each do |array_data|
      GAEvent.create(event_category:      array_data[0], 
                     event_label:        array_data[1], 
                     event_action:       array_data[2],
                     total_events:       array_data[3],
                     unique_events:      array_data[4],
                     data_date:        @data_date)

    end
  end

end
</code></pre>
]]></content>
  </entry>
  
</feed>
