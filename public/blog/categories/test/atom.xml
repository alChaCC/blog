<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Test | AlohaCC]]></title>
  <link href="http://ccaloha.cc/blog/categories/test/atom.xml" rel="self"/>
  <link href="http://ccaloha.cc/"/>
  <updated>2015-08-23T15:15:08+08:00</updated>
  <id>http://ccaloha.cc/</id>
  <author>
    <name><![CDATA[Aloha]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[For Dummies Stress Test Using JMeter in Rails 4 + Ruby 2.2]]></title>
    <link href="http://ccaloha.cc/blog/2015/07/22/for-dummies-stress-test-using-jmeter-in-rails-4-plus-ruby-2-dot-2/"/>
    <updated>2015-07-22T09:16:12+08:00</updated>
    <id>http://ccaloha.cc/blog/2015/07/22/for-dummies-stress-test-using-jmeter-in-rails-4-plus-ruby-2-dot-2</id>
    <content type="html"><![CDATA[<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/stress%20test/jmeter.png" alt="jmeter generated by ruby-jemer"></p>

<!--more-->


<p>Inspired by</p>

<ol>
<li><a href="http://www.jetthoughts.com/blog/tricks/2014/08/05/stress-testing-your-rails-application-using-jmeter.html">http://www.jetthoughts.com/blog/tricks/2014/08/05/stress-testing-your-rails-application-using-jmeter.html</a></li>
<li><a href="https://github.com/flood-io/ruby-jmeter">https://github.com/flood-io/ruby-jmeter</a></li>
<li><a href="http://jmeter.apache.org/usermanual/get-started.html">http://jmeter.apache.org/usermanual/get-started.html</a></li>
</ol>


<h2>In your local machine (Mac OSX)</h2>

<p>```
brew update
brew install jmeter --with-plugins</p>

<p>```</p>

<h2>In your remote server</h2>

<p>```</p>

<h1>if your want test in remote server</h1>

<p>sudo apt-get install jmeter</p>

<p>```</p>

<h2>Gemfile</h2>

<p>write test plans for JMeter easily</p>

<p>```
gem ruby-jmeter</p>

<p>```</p>

<h2>寫Test Plan</h2>

<p>[Rereference] 語法支援哪些：</p>

<ol>
<li><p><a href="https://github.com/flood-io/ruby-jmeter/blob/5ae25cc32c8d05fcbe32bf143bdfbbd2d657517c/lib/ruby-jmeter/DSL.md">https://github.com/flood-io/ruby-jmeter/blob/5ae25cc32c8d05fcbe32bf143bdfbbd2d657517c/lib/ruby-jmeter/DSL.md</a></p></li>
<li><p>可查看 alies_methods <a href="https://github.com/flood-io/ruby-jmeter/blob/5ae25cc32c8d05fcbe32bf143bdfbbd2d657517c/lib/ruby-jmeter/dsl.rb">https://github.com/flood-io/ruby-jmeter/blob/5ae25cc32c8d05fcbe32bf143bdfbbd2d657517c/lib/ruby-jmeter/dsl.rb</a></p></li>
</ol>


<h3>Write A Stress Test Helper</h3>

<p>```</p>

<h1>test/stress/stress_helper.rb</h1>

<p>require 'ruby-jmeter'</p>

<p>def default_setting(params={})
  domain    = params[:domain]        || 'localhost'
  protocol  = params[:protocol]      || 'https'
  port      = params[:port]          || '3000'
  cookie    = params[:cookie].to_s   || 'true'
  # defaults 會建立jmeter的 "HTTP Request Default"，讓你設定 domain或是 protocol...等數值
  defaults domain: domain, protocol: protocol, port: port</p>

<p>  # cookies 會建立jmeter的 "HTTP Cookie Manager"
  # 如果希望每個threads都有自己的cookie，要將此行code，寫到thread內
  # cookies policy 之前卡了我很久，見註一
  cookies policy: 'compatibility',clear_each_iteration: true unless params[:cookie] == 'false'
end</p>

<h1>Login Helper</h1>

<h1>因為我們登入後會倒回首頁，所以，我有檢查 使用者的名稱是否有出現</h1>

<p>def login(email,pwd,nickname)
  visit name: 'Sign In', url: '/users/sign_in' do</p>

<pre><code># 會抓變數，並且將值assign給 'csrf-token' 與 'csrf-param'
extract name: 'csrf-token', xpath: "//meta[@name='csrf-token']/@content", tolerant: true
extract name: 'csrf-param', xpath: "//meta[@name='csrf-param']/@content", tolerant: true
</code></pre>

<p>  end</p>

<p>  # For devise issue
  http_header_manager name: 'X-CSRF-Token', value: '${csrf-token}'</p>

<p>  # 送出登入
  submit name: 'Submit Sign In form', url: '/users/sign_in',</p>

<pre><code>always_encode: true,
fill_in: {
  'utf8'          =&gt; '✓',
  '${csrf-param}' =&gt; '${csrf-token}',
  'user[email]'        =&gt; email,
  'user[password]'     =&gt; pwd,
  'commit'             =&gt; 'Log in'
} do
# 登入後會倒回首頁，檢查是否包含你的nickname
assert contains: nickname, scope: 'main'
</code></pre>

<p>  end
end
```</p>

<p>註一： cookies policy 之前卡了我很久，因為我發現我登入都會錯誤！都是csrf-token 不相符，我的認知，那是因為Devise使用cookie作為判斷機制，所以cookie policy不能選用<strong>rfc2109</strong>，要選用<strong>compatibility</strong> 他會符合目前幾乎所有線上網站的cookie需求！</p>

<p>Ruby-Jmeter &lt;-> Jmeter</p>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/stress%20test/ruby-jmeter-mapping-1.png" alt="ruby-jmeter-mapping-1"></p>

<h3>Non Login User Stress Test Plan</h3>

<p>```</p>

<h1>test/stress/non_login.rb</h1>

<p>require './stress_helper'</p>

<p>test do
  default_setting domain: 'your.awesome.website', portocal: 'https' , port: '443'
  #default_setting() # 本機測試使用</p>

<p>  # 壓測，登入後的行為
  # * 使用threads是因為 thread 代表jmeter裡面的thread_group，thread_group就是告訴jmeter
  #   有多少使用者要模擬，多久送一次requests，多少requests要被送出
  # * counts 代表 多少個使用者
  # * rampup 每個使用者的執行間隔
  # * loops 代表多重複做多少次測試</p>

<p>  for i in 1..10</p>

<pre><code>threads count: 20, rampup: 1 ,loops: 1 do
  think_time 5000, 2000
    transaction "活動專區#{i}" do
      # 這邊會去爬 class: 'items' 底下每個 &lt;a&gt; 的href
    # 並且把他assign給 "act-urls"
      visit name: '活動專區首頁', url: "/activities?sort=1&amp;page=#{Random.rand(1..4)}" do 
        extract name: 'act-urls', xpath: "//div[contains(@class,'items')]//a//@href", tolerant: true 
      end
      for i in 1..3
        visit name: "隨便點活動#{i}", url: "${act-urls_#{Random.rand(1..12)}}" do
          extract name: 'product-urls', xpath: "//div[contains(@class,'item-info')]//a//@href", tolerant: true 
        end
      end
    end
  view_results_tree
  debug_sampler
end
</code></pre>

<p>  end</p>

<p>  for i in 1..5</p>

<pre><code>threads count: 20, rampup: 1 ,loops: 1 do
  think_time 5000, 2000
    transaction "活動專區-標籤#{i}" do
      visit name: '活動專區首頁', url: "/activities" do 
        extract name: 'act-tag-urls', xpath: "//div[contains(@class,'keywords')]//a//@href", tolerant: true 
      end
      for i in 1..4
        visit name: "隨便點活動標籤#{i}", url: "${act-tag-urls_#{Random.rand(1..4)}}"
      end
    end
  view_results_tree
  debug_sampler
end
</code></pre>

<p>  end</p>

<p>  view_results_in_table
  graph_results
  aggregate_graph
  view_results_tree
  summary_report</p>

<p>end.run(
  gui: true,
  file: 'jmeter-visitor.jmx',
  log:  'jmeter-visitor.log',
  jtl:  'results-visit.jtl'
)
```
Ruby-Jmeter &lt;-> Jmeter</p>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/stress%20test/ruby-jmeter-mapping-2.png" alt="ruby-jmeter-mapping-2"></p>

<h3>Login User Stress Test</h3>

<p>```</p>

<h1>test/stress/login.rb</h1>

<p>require './stress_helper'</p>

<p>test do
  default_setting domain: 'your.awesome.website', portocal: 'https' , port: '443'
  # default_setting() # 本機測試使用</p>

<p>  # 壓測，登入後的行為
  threads count: 10, rampup: 1, loops: 1 do</p>

<pre><code>think_time 5000, 2000

transaction 'Log In and View page' do

 login('your@login.account','your-password','your-nickname')

# 這邊會去爬 class: 'ucnh-fs-ls-uctrls' 底下每個 &lt;a&gt; 的href
# 並且把他assign給 "users-urls"
  visit name: 'activity', url: '/activities' do 
    extract name: 'users-urls', xpath: "//div[contains(@class,'ucnh-fs-ls-uctrls')]//a//@href", tolerant: true 
  end
</code></pre>

<p>  # 因為users-urls是個 array，用法就是 ${users-url_X}, X代表array第X個element</p>

<pre><code>  visit name: 'user list1', url: '${users-urls_1}'
  visit name: 'user lists2', url: '${users-urls_3}'
  visit name: 'user lists3', url: '${users-urls_4}'
  visit name: 'user profile', url: '${users-urls_5}'
  visit name: 'user account edit', url: '${users-urls_6}'
end
debug_sampler # 給Debug用
view_results_tree
</code></pre>

<p>  end
  view_results_in_table
  graph_results
  aggregate_graph
  view_results_tree
  summary_report</p>

<p>end.run(
  gui: true,
  file: 'jmeter-after-sign-in.jmx',
  log:  'jmeter-after-sign-in.log',
  jtl:  'results-after-sign-in.jtl'
)
```
Ruby-Jmeter &lt;-> Jmeter</p>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/stress%20test/ruby-jmeter-mapping-3-submit-form.png" alt="ruby-jmeter-mapping-3-submit-form"></p>

<h2>開始測試</h2>

<p>```
cd your_awesome_projects/test/stress</p>

<h1>ruby 你要執行的.rb檔，ex:</h1>

<p>ruby non_login.rb</p>

<h1>此時會跳出一個apache jmeter的畫面，點選綠色執行按鈕即可</h1>

<p>```</p>

<h2>Others</h2>

<h3>Remove tracking jmeter generated files</h3>

<p>```
echo "/test/stress/<em>.log" >> .gitignore
echo "/test/stress/</em>.jmx" >> .gitignore</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HowTo Performance Test in Rails 4]]></title>
    <link href="http://ccaloha.cc/blog/2015/07/14/howto-performance-test-in-rails-4/"/>
    <updated>2015-07-14T19:35:26+08:00</updated>
    <id>http://ccaloha.cc/blog/2015/07/14/howto-performance-test-in-rails-4</id>
    <content type="html"><![CDATA[<p>Inspired by</p>

<ol>
<li><p><a href="http://tekin.co.uk/2014/09/performance-test-rails-against-real-data/">PERFORMANCE TESTING RAILS AGAINST REAL DATA</a></p></li>
<li><p><a href="http://railscasts.com/episodes/411-performance-testing">Performance Testing</a></p></li>
<li><a href="http://railscasts.com/episodes/368-miniprofiler">http://railscasts.com/episodes/368-miniprofiler</a></li>
</ol>


<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/Rails%20performance%20test/rails-perftest%20and%20ruby-prof.png"></p>

<!-- more -->


<h2>First thing you should know</h2>

<p>In Rails 4, performance test functionality was extracted out ! So, you need to add</p>

<pre><code># Gemfile
gem 'rails-perftest' ,group: :benchmark
</code></pre>

<p>And if you want your <strong>rails-perftest</strong> show memory usage. You also need to add</p>

<pre><code># Gemfile
gem 'ruby-prof' ,group: :benchmark
</code></pre>

<p><strong>[! Important !]</strong> In my environment,</p>

<pre><code>rails-4.1.6, ruby-2.2.2.133, x86_64-darwin14
</code></pre>

<p>After doing lots of efforts, I finally can get memory usage info.</p>

<p>But I fount this issue. please check: <a href="https://github.com/ruby-prof/ruby-prof/issues/165">https://github.com/ruby-prof/ruby-prof/issues/165</a>.</p>

<p>And I'm not sure that my memory usage is correct or not.</p>

<p>But I'll still show you how I do these jobs. Maybe after fixing the issue, we can get correct informantion.</p>

<h2>Create a new environment for performance test</h2>

<h3>create a new file:  <strong>config/environments/benchmark.rb</strong></h3>

<p>In fact, all contents are copied from config/environments/production.rb since we need to know performance in real world.</p>

<pre><code>Rails.application.configure do
  # Settings specified here will take precedence over those in config/application.rb.

  # Code is not reloaded between requests.
  config.cache_classes = true

  # Eager load code on boot. This eager loads most of Rails and
  # your application in memory, allowing both threaded web servers
  # and those relying on copy on write to perform better.
  # Rake tasks automatically ignore this option for performance.
  config.eager_load = true

  # Full error reports are disabled and caching is turned on.
  config.consider_all_requests_local       = false
  config.action_controller.perform_caching = true

  # Enable Rack::Cache to put a simple HTTP cache in front of your application
  # Add `rack-cache` to your Gemfile before enabling this.
  # For large-scale production use, consider using a caching reverse proxy like nginx, varnish or squid.
  # config.action_dispatch.rack_cache = true

  # Disable Rails's static asset server (Apache or nginx will already do this).
  config.serve_static_assets = false

  # Compress JavaScripts and CSS.
  config.assets.js_compressor = :uglifier
  # config.assets.css_compressor = :sass

  # Do not fallback to assets pipeline if a precompiled asset is missed.
  config.assets.compile = false

  # Generate digests for assets URLs.
  config.assets.digest = true

  # `config.assets.precompile` and `config.assets.version` have moved to config/initializers/assets.rb

  # Specifies the header that your server uses for sending files.
  # config.action_dispatch.x_sendfile_header = "X-Sendfile" # for apache
  # config.action_dispatch.x_sendfile_header = 'X-Accel-Redirect' # for nginx

  # Force all access to the app over SSL, use Strict-Transport-Security, and use secure cookies.
  config.force_ssl = true

  # Set to :debug to see everything in the log.
  config.log_level = :info

  # Prepend all log lines with the following tags.
  # config.log_tags = [ :subdomain, :uuid ]

  # Use a different logger for distributed setups.
  # config.logger = ActiveSupport::TaggedLogging.new(SyslogLogger.new)

  # Use a different cache store in production.
  # config.cache_store = :mem_cache_store
  config.cache_store = :dalli_store

  # Enable serving of images, stylesheets, and JavaScripts from an asset server.
  # config.action_controller.asset_host = "http://assets.example.com"

  # Ignore bad email addresses and do not raise email delivery errors.
  # Set this to true and configure the email server for immediate delivery to raise delivery errors.
  # config.action_mailer.raise_delivery_errors = false

  # Enable locale fallbacks for I18n (makes lookups for any locale fall back to
  # the I18n.default_locale when a translation cannot be found).
  config.i18n.fallbacks = true

  # Send deprecation notices to registered listeners.
  config.active_support.deprecation = :notify

  # Disable automatic flushing of the log to improve performance.
  # config.autoflush_log = false

  # Use default logging formatter so that PID and timestamp are not suppressed.
  config.log_formatter = ::Logger::Formatter.new

  # Do not dump schema after migrations.
  config.active_record.dump_schema_after_migration = false

end
</code></pre>

<h3>add configuration:  <strong>config/database.yml</strong></h3>

<pre><code>default: &amp;default
  adapter: mysql2
  encoding: utf8
  host: 127.0.0.1
  username: root
  password: your_password

staging:
  &lt;&lt;: *default
  database: your_project_development

development:
  &lt;&lt;: *default
  database: your_project_development

test:
  &lt;&lt;: *default
  database: your_project_test

production:
  &lt;&lt;: *default
  database: your_project_production

benchmark:
  &lt;&lt;: *default
  database: your_project_production 
</code></pre>

<h2>Create a test helper file to setup your benchmark tests:</h2>

<p>create a new file: <strong>test/benchmark_helper.rb</strong></p>

<pre><code>ENV["RAILS_ENV"] = "benchmark"
require File.expand_path('../../config/environment', __FILE__)
require 'rails/test_help'
require 'rails/performance_test_help'

class ActionDispatch::PerformanceTest
   self.profile_options = { runs: 5, metrics: [:wall_time, :memory,:objects, :gc_runs, :gc_time],
                            output: 'tmp/performance', formats: [:flat, :graph_html, :call_tree, :call_stack] }
end
</code></pre>

<h2>Create a test file</h2>

<pre><code>rails generate performance_test page
</code></pre>

<p>and it will create a file named <strong>page.rb</strong> under <strong>test/performance/</strong></p>

<pre><code>require 'benchmark_helper'

class PageTest &lt; ActionDispatch::PerformanceTest
  test "homepage" do
    get '/'
  end
end
</code></pre>

<h2>Add a rake task for running your real-world benchmarks (optional)</h2>

<p>lib/tasks/test_benchmark.rake</p>

<pre><code>Rake::TestTask.new(:real_world_benchmark =&gt; ['test:benchmark_mode']) do |t|
    t.libs &lt;&lt; 'test'
    t.pattern = 'test/performance/**/*_test.rb'
  end
end
</code></pre>

<h2>Update your Rakefile</h2>

<p>Rails 4 no longer defines db:test:prepare, however, <strong>rails-perftest</strong> still use <strong>test:prepare</strong>. So, we need to workaround.</p>

<pre><code>require File.expand_path('../config/application', __FILE__)

Rails.application.load_tasks

Rake.application.instance_eval do
  # Remove test:prepare
  @tasks['test:benchmark'].prerequisites.shift if @tasks['test:benchmark']
  @tasks['test:profile'].prerequisites.shift if @tasks['test:profile']
end
</code></pre>

<h2>For memory measurement, we need the railsexpress patches.</h2>

<p><a href="https://github.com/skaes/rvm-patchsets">https://github.com/skaes/rvm-patchsets</a></p>

<pre><code>rvm get stable
</code></pre>

<p>But my rvm isn't update to date correctly, So I use</p>

<pre><code>cd /tmp
git clone https://github.com/skaes/rvm-patchsets.git
cd rvm-patchsets
./install.sh
</code></pre>

<p>Then I run</p>

<pre><code>rvm reinstall 2.2.2 --patch railsexpress
</code></pre>

<p>After reinstall Ruby, we need to recreate our gemset</p>

<pre><code>cd your_project
rvm gemset create your_project
gem install bundler
bundle install
</code></pre>

<h2>Finally</h2>

<p>These command should work~</p>

<pre><code>RAILS_ENV=benchmark bundle exec rake test:real_world_benchmark
RAILS_ENV=benchmark bundle exec rake test:benchmark
RAILS_ENV=benchmark bundle exec rake test:profile
</code></pre>

<p>Then these command will create some files under <strong>your_project/tmp/performance</strong></p>

<p>PS. Please notice that before performance test, you should make sure that there are no any errors while visit the page.</p>

<h2>Without using "rails-perftest", you might use..</h2>

<h3>if You need detailed information, you can use "request_profiler"</h3>

<p>inspired by <a href="https://www.coffeepowered.net/2013/08/02/ruby-prof-for-rails/">https://www.coffeepowered.net/2013/08/02/ruby-prof-for-rails/</a></p>

<p>we can use <strong>request_profiler</strong>, which allows you to profile rack requests using ruby-prof.</p>

<pre><code>gem 'request_profiler'
</code></pre>

<p>And you might need to add this line into <strong>config/enviornments/benchmark.rb</strong></p>

<pre><code>config.middleware.use "Rack::RequestProfiler"
</code></pre>

<p>On every page you want to profile, just add <strong>?profile_request=true</strong></p>

<p>for example, we want to profile "/" , just key</p>

<pre><code>https://localhost:3000/?profile_request=true
</code></pre>

<p>then you wiil see file named  <strong>2015-07-14-16-49-19---profile_request=true.html</strong> under <strong>tmp/performance/</strong></p>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/Rails%20performance%20test/profile_request.png"></p>

<h3>if You need to quickly and easily find out what is bottleneck,  "rack-mini-profiler" is best choice.</h3>

<p><strong>Gemfile</strong></p>

<pre><code>gem 'rack-mini-profiler', require: false  
</code></pre>

<p>Create a new file <strong>config/initializers/rack_profiler.rb</strong></p>

<pre><code>if Rails.env == 'development' || Rails.env == 'benchmark'
  require 'rack-mini-profiler'

  # initialization is skipped so trigger it
  Rack::MiniProfilerRails.initialize!(Rails.application)
end
</code></pre>

<p>Add to <strong>app/controllers/application_controller.rb</strong></p>

<pre><code>before_action :authorize_for_miniprofiler
def authorize_for_miniprofiler
  if Rails.env == 'development' || Rails.env == 'benchmark'
    Rack::MiniProfiler.authorize_request
  end
end
</code></pre>

<p>now you can see this under development and benchmark environments</p>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/Rails%20performance%20test/rack-mini-profiler.png"></p>

<h2>You might want to read</h2>

<ol>
<li><a href="http://code.oneapm.com/ruby/2015/04/08/ruby-profilers/">http://code.oneapm.com/ruby/2015/04/08/ruby-profilers/</a></li>
</ol>

]]></content>
  </entry>
  
</feed>
