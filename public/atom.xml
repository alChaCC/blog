<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[AlohaCC]]></title>
  <link href="http://ccaloha.cc/atom.xml" rel="self"/>
  <link href="http://ccaloha.cc/"/>
  <updated>2015-06-12T09:13:53+08:00</updated>
  <id>http://ccaloha.cc/</id>
  <author>
    <name><![CDATA[Aloha]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[String handling between JavaScript and Ruby]]></title>
    <link href="http://ccaloha.cc/blog/2015/06/10/string-handling-between-javacript-and-ruby/"/>
    <updated>2015-06-10T00:14:49+08:00</updated>
    <id>http://ccaloha.cc/blog/2015/06/10/string-handling-between-javacript-and-ruby</id>
    <content type="html"><![CDATA[<p>javascript 在做 <strong>escape</strong> 時，編碼出來的字，和Ruby的 <strong>CGI.escape</strong>、<strong>URI.escape</strong> 是不同的！</p>

<p>舉例來說：</p>

<p>在<strong>browser console下</strong></p>

<pre><code>escape("台中市")
&gt; "%u53F0%u4E2D%u5E02"
</code></pre>

<p>但是在<strong>rails c</strong> 下</p>

<pre><code>CGI.escape("台中市")
&gt; "%E5%8F%B0%E4%B8%AD%E5%B8%82"
</code></pre>

<p> Why?</p>

<!-- more -->


<p> 查了一下Google，發現是因為在 js 在escape中文時，是將他編成 unicode</p>

<p> 所以，</p>

<h2>javascript 如果要送中文字給Ruby 請使用</h2>

<pre><code>encodeURIComponent("台中市")
&gt; "%E5%8F%B0%E4%B8%AD%E5%B8%82"
</code></pre>

<h2>但是，往往沒辦法你不能去改人家的javascript，你只好&#8230;. javascripts escape string to UTF-8</h2>

<p>查到的作法如下：</p>

<p>在<strong>rails c</strong> 下</p>

<pre><code>unicode_str = "%u53F0%u4E2D%u5E02"

unicode_str.gsub(/\%u([\da-fA-F]{4})/) {|m|  [$1].pack('H*').unpack('n*').pack('U*')}

=&gt; "台中市"
</code></pre>

<p> 參數解釋：</p>

<p> 因為 unicode 的字串都是由 %u 開頭，外加上 4個可能是數字可能是 小寫a~f 或是 大寫A~F，所以我們先透過 <strong>gsub</strong> 這個function將符合的字抓出來處理</p>

<p> 抓出來字之後，我們要使用 <strong>pack</strong> 和 <strong>unpack</strong> 方法，來將字進行解碼、編碼</p>

<p> 我們先抓一個字來看，就以 &#8220;台&#8221; 為例， (ps. <strong>pack 只能用在array, unpack可以用在string</strong>)</p>

<p> gsub 會將 &#8220;53F0&#8221; 丟進去處理</p>

<pre><code>["53F0"].pack('H*')

  =&gt; "S\xF0"
</code></pre>

<p>  # H: 代表了將他pack組成16進位字(hex string (high nibble first))</p>

<pre><code>"S\xF0".unpack('n*')

=&gt; [21488]
</code></pre>

<p>  # n: 他會return一個 Integer，他代表了16-bit unsigned, network (big-endian) byte order</p>

<pre><code>[21488].pack('U*')

=&gt; "台"
</code></pre>

<p>  # U: 將16位元NBO組成UTF-8</p>

<p> REF: <br/>
 <a href="http://www.cnphp6.com/archives/4967">UNESCAPE編碼錯誤</a></p>

<h2>那反過來呢，要如何將UTF-8的字，做成像 javascript escape 後的結果</h2>

<p>在<strong>rails c</strong>下</p>

<pre><code>return_str = ""
"台中市".each_char { |c| return_str += "%u#{c.unpack("U*").pack("n*").unpack("H*").first}" }


return_str 
&gt; "%u53f0%u4e2d%u5e02"
</code></pre>

<h2>假設，你現在要串接的使用Big5寫的API，你發現他接收的parameters 居然是%A5%78%A4%A4%A5%AB</h2>

<p>因為他default是接受，用 javascript escape Big5編碼的字</p>

<p>所以你要將你UTF-8的字，轉成符合他格式的字</p>

<p>這時候你要這樣做：</p>

<pre><code>  return_str = ""
  Iconv.conv("BIG5", "UTF8", str).unpack("H*").first.scan(/../).each do |s|
    return_str += "%#{s}"
  end
</code></pre>

<p>一樣來看說明：</p>

<pre><code>Iconv.conv("BIG5", "UTF8", "台中市")

=&gt; "\x{A578}\x{A4A4}\x{A5AB}"


Iconv.conv("BIG5", "UTF8", "台中市").unpack("H*")

=&gt; ["a578a4a4a5ab"]

Iconv.conv("BIG5", "UTF8", "台中市").unpack("H*").first.scan(/../)

=&gt; ["a5", "78", "a4", "a4", "a5", "ab"]
</code></pre>

<h2>打完收工！</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[機器監控不求人 - 猴子都會用的 Monit(Monitoring your ubuntu machine for dummies)]]></title>
    <link href="http://ccaloha.cc/blog/2015/05/18/monitoring-your-ubuntu-machine-for-dummies/"/>
    <updated>2015-05-18T18:21:20+08:00</updated>
    <id>http://ccaloha.cc/blog/2015/05/18/monitoring-your-ubuntu-machine-for-dummies</id>
    <content type="html"><![CDATA[<p>你是個前端工程師，但是，老闆賦予你<strong>MIS</strong>的神聖任務</p>

<p>還是，你是個後端工程師，無時無刻，要去看一下<strong>mysql</strong>是否還活著，<strong>apache2</strong>是否快掛了</p>

<p>還有，你是個<strong>全端工程師</strong>，雖然你已經強的跟神一樣，但是你就是不想要寫的script自動去重啟的service</p>

<p>這時候，你需要的是<strong><a href="https://mmonit.com/monit/">Monit</a></strong></p>

<p>他可以幫你監控你的daemon processes、檔案系統、Network、Space</p>

<p>如果想要看完整的設定文件請點 <strong><a href="https://mmonit.com/monit/documentation/monit.html">Monit Documentation</a></strong></p>

<p>整理一下，我的使用的感覺</p>

<ol>
<li>使用DSL，所以用起來很直覺</li>
<li>使用 # 當作註解</li>
<li><a href="https://mmonit.com/monit/documentation/monit.html#ACTION">不同的監控，可以有不同的動作(ex: alert, restart, stop, UNMONITOR)</a></li>
<li><a href="https://mmonit.com/monit/documentation/monit.html#SERVICE-POLL-TIME">彈性設定時間來監控</a></li>
<li><a href="https://mmonit.com/monit/documentation/monit.html#SERVICE-RESTART-LIMIT">彈性設定幾次重啟後，就不要再重啟了</a></li>
<li><a href="https://mmonit.com/monit/documentation/monit.html#GENERAL-SYNTAX">可以用if, else &#8230;等來做動作判斷！</a></li>
<li>提供網頁GUI，讓你很好的操作或是看伺服器狀態！</li>
<li>簡單來說，超多客製化應用！網路上也滿多資源可以參考！</li>
</ol>


<p>但是，如果你跟我一樣是個懶人，這時候，你就需要看這篇文章</p>

<!-- more -->


<p>ps. 這是我剛設定好的樣子，等我有發現哪裡有問題，會再上來更新XD</p>

<h2>Step 1. 安裝Monit</h2>

<pre><code>sudo apt-get install monit
</code></pre>

<h2>Step 2. 設定他</h2>

<p>ps. 我一開始看文件，傻傻的以為設定在 <em>~/.monitrc</em>，一切都會work，但是&#8230;經過我約莫半小時的測試&#8230;我放棄了～ 我還是把它寫在</p>

<pre><code>sudo vim /etc/monit/monitrc
</code></pre>

<p>我改了哪些東西</p>

<pre><code># 設定Monit多久監控一次
set daemon 60

#設定log放在哪裡
set logfile /var/log/monit.log

#設定 mail server 
set mailserver 你的.postfix.伺服器 port 25

# ps. 如果你的mail server是在其他地方，譬如AWS SES
# set mailserver email-smtp.us-east-1.amazonaws.com port 587
#   username "amazon_username" password "amazon_password"
#   using TLSV1
#   with timeout 30 seconds

# Email格式
set mail-format {
      from: monit@alohacc.cc
  reply-to: y.alohac@gmail.com
      subject: [Aloha系統通知] $SERVICE $EVENT at $DATE
      message: Monit $ACTION $SERVICE at $DATE on $HOST: $DESCRIPTION.
         Hi, system now is waiting your attention~~~ come on baby~~
         By Aloooooooooooooooooooooha
    }

    #設定收到所有異常通知的人，貌似目前不支援一次設定很多....所以要key很多遍
set alert aloha.chen@itrue.com.tw
set alert y.alohac@gmail.com

# 監控主機CPU、Memory、Swap以及Uptime的數值
check system ccaloha.cc
    if loadavg (1min) &gt; 4 then alert
    if loadavg (5min) &gt; 2 then alert
    if memory usage &gt; 75% then alert
    if swap usage &gt; 25% then alert
    if cpu usage (user) &gt; 70% then alert
    if cpu usage (system) &gt; 30% then alert
    if cpu usage (wait) &gt; 20% then alert


    # 起Web服務
 set httpd port 2812 and
    use address 0.0.0.0      # 我要讓他可以對外連線
    allow localhost           # 開放localhost可以連
    #allow 0.0.0.0/0.0.0.0   # 開放所有IP都可以連得到
    allow 你的.ip.位置        # 只開放你的ip可以連  
    allow 可登入帳號:他的密碼 

    # 監控Apache2
check process apache with pidfile /var/run/apache2/apache2.pid
    start program = "/etc/init.d/apache2 start" with timeout 60 seconds
    stop program  = "/etc/init.d/apache2 stop"
    if cpu &gt; 50% for 2 cycles then alert
    #if TOTAL CPU is greater than 80% for 5 cycles then restart
    if mem &gt; 100 MB for 5 cycles then stop # 網路上參考下來的寫法，但是，monit -t 會報錯
    if failed port 80 for 2 cycles then restart
    #if failed port 443 for 2 cycles with timeout 15 seconds then restart # 網路上參考下來的寫法，但是，monit -t 會報錯
    if failed port 443 for 2 cycles then restart

# 監控mysql
check process mysqld with pidfile /var/run/mysqld/mysqld.pid
    start program = "/etc/init.d/mysql start"
    stop program = "/etc/init.d/mysql stop"
    if failed host 127.0.0.1 port 3306 protocol mysql then alert
    if failed host 127.0.0.1 port 3306 protocol mysql then restart
    if 7 restarts within 10 cycles then unmonitor

# 監控硬碟空間使用
check filesystem root-filesystem with path /dev/xvda1
    if space usage &gt; 80% for 5 times within 15 cycles then alert
</code></pre>

<h2>啟動它</h2>

<pre><code>1. 檢查config 檔是否正確

    sudo monit -t 

2. 啟動

    sudo monit 

3. 如果你改了設定檔，你可以這樣重啟

    sudo monit reload
</code></pre>

<h2>Web Gui</h2>

<p>設定完成後，你就可以看到</p>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/Monitoring%20your%20ubuntu%20machine%20for%20dummies%20-%20Web%20gui.png" alt="Monitoring your ubuntu machine for dummies - Web gui"></p>

<p>點擊一個監控的process，你可以發現，你可以直接透過網頁重啟歐！</p>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/Monitoring%20your%20ubuntu%20machine%20for%20dummies%20-%20Web%20gui%20-%20process%20status.png" alt="Monitoring your ubuntu machine for dummies - Web gui - process status"></p>

<p>另外，你也可以收到email歐</p>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/Monitoring%20your%20ubuntu%20machine%20for%20dummies%20-%20Web%20gui%20-%20Email%20notification.png" alt="Monitoring your ubuntu machine for dummies - Web gui - Email notification"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Ruby on Rails] Send limited mail on staging environment]]></title>
    <link href="http://ccaloha.cc/blog/2015/04/28/send-limited-mail-on-staging-environment/"/>
    <updated>2015-04-28T17:16:33+08:00</updated>
    <id>http://ccaloha.cc/blog/2015/04/28/send-limited-mail-on-staging-environment</id>
    <content type="html"><![CDATA[<p>For simulating production environment, we will build up a stage machine.</p>

<p>Plus, we usually use the copy of production database in stage server.</p>

<p>In some applications, we will send email to users for some purposes such as confirmation mail after user</p>

<p>register, reset password mail&#8230;etc.</p>

<p>And, in staging environment, we have to avoid our operators accidentally send email to real users.</p>

<p>Therefore, we have to implement some codes for filtering.</p>

<p>Let&#8217;s go</p>

<!-- more -->


<p>According to <a href="http://edgeguides.rubyonrails.org/action_mailer_basics.html#intercepting-emails">Action Mailer Basics</a>, we can register an interceptor to avoid some unexpected actions.</p>

<p>And my requirement is I want staging server can send mail to our employees. In our case, our company mail address is <strong>xxx@itrue.com.tw</strong>. So, we have to implement code that only allow email server send to users like: <strong>XXX@itrue.com.tw</strong>.</p>

<h2>Step1. <em>Gemfile</em></h2>

<pre><code>gem 'settingslogic'
</code></pre>

<h2>Step2. Add a lib on <em>app/lib/settings.rb</em></h2>

<pre><code>class Settings &lt; Settingslogic
    source "#{Rails.root}/config/application.yml"
    namespace Rails.env
end
</code></pre>

<h2>Step3. Add your white list on <em>application.yml</em></h2>

<pre><code>defaults: &amp;defaults
  allowed_send_mail_domain: '@itrue.com.tw'

development:
  &lt;&lt;: *defaults

test:
  &lt;&lt;: *defaults

production:
  &lt;&lt;: *defaults
</code></pre>

<h2>Step4. Write a interceptor on <em>app/interceptor/staging_mail_interceptor.rb</em></h2>

<p>ref: <a href="http://renderedtext.com/blog/2012/04/27/filtering-emails-on-staging/">Filtering emails on staging</a></p>

<pre><code>class StagingMailInterceptor

  def self.delivering_email(message)
    message.to = extract_allowed_recepients(message)
    message.perform_deliveries = false if message.to.empty?
  end

  private

  def self.extract_allowed_recepients(message)
    message.to.select { |address| allowed_address?(address) }
  end

  def self.allowed_address?(address)
    allowed_domains = Settings.allowed_send_mail_domain.split(',')

    matches_allowed = allowed_domains.count { |domain| address.include?(domain) }

    matches_allowed != 0
  end

end
</code></pre>

<h2>Step5. Register interceptor to ActionMailer on <em>app/config/initializers/sandbox_email_interceptor.rb</em></h2>

<pre><code>require 'staging_mail_interceptor'

if Rails.env.staging?
  ActionMailer::Base.register_interceptor(StagingMailInterceptor)
end
</code></pre>

<h2>Done</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[howto] Using Google Analytics Enhanced Ecommerce Tracking your awesome website via Ruby on Rails 如何在Ruby on Rails使用Google Analytics 進階電子商務追蹤]]></title>
    <link href="http://ccaloha.cc/blog/2015/04/13/howto-use-google-analytics-enhanced-ecommerce-tracking-via-ruby-on-rails/"/>
    <updated>2015-04-13T12:15:58+08:00</updated>
    <id>http://ccaloha.cc/blog/2015/04/13/howto-use-google-analytics-enhanced-ecommerce-tracking-via-ruby-on-rails</id>
    <content type="html"><![CDATA[<blockquote><p>i-TRUE 的目標是成為全世界最棒的專業型Database Media Company</p>

<p>我每週一早上負責跟同事們介紹Google Analytics，這是其中一個介紹投影片！</p>

<p>陸續更新中&#8230;</p></blockquote>

<iframe id="iframe_container" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen="" width="550" height="400" src="https://prezi.com/embed/w0azjc2vz3tf/?bgcolor=ffffff&amp;lock_to_path=0&amp;autoplay=0&amp;autohide_ctrls=0#"></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Integrate Ruby on Rails with Google Analytics API]]></title>
    <link href="http://ccaloha.cc/blog/2015/04/09/integrate-ruby-on-rails-with-google-analytics-api/"/>
    <updated>2015-04-09T22:32:24+08:00</updated>
    <id>http://ccaloha.cc/blog/2015/04/09/integrate-ruby-on-rails-with-google-analytics-api</id>
    <content type="html"><![CDATA[<p>In this article, I try to get some Google Analytics data via Google API. Then, I saved data into MongoDB waiting for further calculation.</p>

<p>And you are able to learn</p>

<ol>
<li>How I do Google API pagination</li>
<li>How I use module to build flexible function</li>
<li>How I use Google Query Explorer to speed up development</li>
<li>How to apply for google API access</li>
</ol>


<p>Let&#8217;s check it out.</p>

<!-- more -->


<h2>Step 1. Apply Google Analytics API access authorization</h2>

<h3>1-1 go to <a href="https://code.google.com/apis/console/">Google API console</a></h3>

<h3>1-2 Find Google Analytics API</h3>

<p> <img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/Integrate%20Ruby%20on%20Rails%20with%20Google%20Analytics%20API/find_google_api.png" alt="find google api"></p>

<h3>1-3 Enable Google Analytics API</h3>

<p> <img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/Integrate%20Ruby%20on%20Rails%20with%20Google%20Analytics%20API/Enable%20Google%20Analytic%20API.png" alt="enable google analytics API"></p>

<h3>1-4 Create New Client ID</h3>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/Integrate%20Ruby%20on%20Rails%20with%20Google%20Analytics%20API/Create%20New%20Client%20ID.png" alt="Create New Client ID"></p>

<h3>1-5 Choose client type</h3>

<p>Since this is for server-to-server usage, I choose this</p>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/Integrate%20Ruby%20on%20Rails%20with%20Google%20Analytics%20API/Choose%20client%20type.png" alt="Choose client type"></p>

<h3>1-6 Download key</h3>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/Integrate%20Ruby%20on%20Rails%20with%20Google%20Analytics%20API/download%20key.png" alt="download key"></p>

<p>ps. Since I use Ruby on Rails, so I put it in <strong>config/ga_api_key_20150408.p12</strong></p>

<h3>1-7 Add API user into your GA user group</h3>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/Integrate%20Ruby%20on%20Rails%20with%20Google%20Analytics%20API/Add%20API%20user%20into%20your%20GA%20user%20group.png"></p>

<h2>2. [TIPS] Use Google Query Explorer to speed up development</h2>

<h3>1. Go to <a href="https://ga-dev-tools.appspot.com/query-explorer/">Google Query Explorer</a></h3>

<h3>2. Get your view id</h3>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/Integrate%20Ruby%20on%20Rails%20with%20Google%20Analytics%20API/Get%20your%20view%20id.png"></p>

<h3>3. Try your query parameter first and know how your data look like</h3>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/Integrate%20Ruby%20on%20Rails%20with%20Google%20Analytics%20API/Try%20your%20query%20parameter%20first.png"></p>

<p>And it provides a easy tool that you don&#8217;t need to remember any parameters.</p>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/Integrate%20Ruby%20on%20Rails%20with%20Google%20Analytics%20API/parameter%20tool.png"></p>

<h2>3. Let&#8217;s write a sample code</h2>

<h3>3-1 Add gem to Gemfile</h3>

<pre><code>gem 'google-api-client'
</code></pre>

<h3>3-2 create a rb file</h3>

<p>I update some codes copied from this page.<a href="https://gist.github.com/joost/5344705">https://gist.github.com/joost/5344705</a></p>

<pre><code>  require 'google/api_client'
  require 'date'

  client = Google::APIClient.new(:application_name =&gt; 'Urcosme-GA-sync', :application_version =&gt; '1')

  key_file = File.join("#{Rails.root}/config", 'ga_api_key_20150408.p12')
  key = Google::APIClient::PKCS12.load_key(key_file, 'notasecret')
  service_account = Google::APIClient::JWTAsserter.new(
      'hello@developer.gserviceaccount.com',
      ['https://www.googleapis.com/auth/analytics.readonly', 'https://www.googleapis.com/auth/prediction'],
      key)
  client.authorization = service_account.authorize

  analytics = client.discovered_api('analytics', 'v3')

  parameters = {
        'ids'         =&gt; "ga:12345",
        'start-date'  =&gt; (Date.today - 30).strftime("%Y-%m-%d"),
        'end-date'    =&gt; Time.now.strftime("%Y-%m-%d"),
        'metrics'     =&gt; "ga:avgTimeOnPage",
        'filters'     =&gt; "ga:pagePath=~/"
      }
  result = client.execute(:api_method =&gt; analytics.data.ga.get, :parameters =&gt; parameters)
</code></pre>

<p>This sample code demonstrates how <strong>google-api-client</strong> work.
However, I need to fetch different kinds of data such as specific pageviews, event, and campaign. I have to refactor it.</p>

<h2>4. Let&#8217;s build a flexible code</h2>

<h2>4-1 create a module file: &#8220;ga.rb&#8221; in /lib/</h2>

<p>In above code, it can be seperated to 2 parts. One is uniform part, the other is variable part.</p>

<p>Unchange part</p>

<pre><code>@client = Google::APIClient.new(:application_name =&gt; 'Urcosme-GA-sync', :application_version =&gt; '1')
key_file = File.join("#{Rails.root}/config", 'ga_api_key_20150408.p12')
key = Google::APIClient::PKCS12.load_key(key_file, 'notasecret')
service_account = Google::APIClient::JWTAsserter.new(
          'hello@developer.gserviceaccount.com',
          ['https://www.googleapis.com/auth/analytics.readonly', 'https://www.googleapis.com/auth/prediction'],
          key)
@client.authorization = service_account.authorize
@analytics = @client.discovered_api('analytics', 'v3')
</code></pre>

<p>Change part. In this code, I already write some default parameters.
But, it can be rewrite in other place.</p>

<pre><code>@data_date = Date.today - 1
@parameters = {
    'ids'         =&gt; "ga:12345",
    'start-date'  =&gt; @data_date.strftime("%Y-%m-%d"),
    'end-date'    =&gt; @data_date.strftime("%Y-%m-%d"),
    'metrics'     =&gt; "",
    'dimensions'  =&gt; "",
    'max-results' =&gt; "10000"
}
</code></pre>

<p>And the whole code show as below.</p>

<p><strong>lib/ga.rb</strong></p>

<pre><code>require 'google/api_client'
require 'date'
module GoogleAnalytic

  # 每一個GA API執行前，需要初始化
  def initialize_ga
    @client = Google::APIClient.new(:application_name =&gt; 'Urcosme-GA-sync', :application_version =&gt; '1')
    key_file = File.join("#{Rails.root}/config", 'ga_api_key_20150408.p12')
    key = Google::APIClient::PKCS12.load_key(key_file, 'notasecret')
    service_account = Google::APIClient::JWTAsserter.new(
      'hello@developer.gserviceaccount.com',
      ['https://www.googleapis.com/auth/analytics.readonly', 'https://www.googleapis.com/auth/prediction'],
      key)
    @client.authorization = service_account.authorize
    @analytics = @client.discovered_api('analytics', 'v3')
    @data_date = Date.today - 1
    @parameters = {
        'ids'         =&gt; "ga:12345",
        'start-date'  =&gt; @data_date.strftime("%Y-%m-%d"),
        'end-date'    =&gt; @data_date.strftime("%Y-%m-%d"),
        'metrics'     =&gt; "",
        'dimensions'  =&gt; "",
        'max-results' =&gt; "10000"
      }
  end

  # 將資料儲存到MongoDB，請複寫我
  def sync_to_db(result)
  end
end
</code></pre>

<h2>4-2 let&#8217;s Rails application know our lib</h2>

<p><strong>config/application.rb</strong></p>

<pre><code>module MyAwesomeApp
  class Application &lt; Rails::Application
    config.autoload_paths += %W(#{config.root}/lib)   end
end
</code></pre>

<h2>4-3 create a model to save API data</h2>

<p>Now I want to get all our campaign data. So I create &#8230;</p>

<p>ps. I use MongoDB as database.</p>

<p><strong>app/models/ga_campaign.rb</strong></p>

<pre><code>class GACampaign
  include GoogleAnalytic
  include Mongoid::Document
  include Mongoid::Timestamps
  field :campaign_name, type: String      # 廣告活動名稱
  field :campaign_source, type: String    # 廣告活動來源    
  field :campaign_medium, type: String    # 廣告活動媒介
  field :campaign_content, type: String   # 廣告活動內容
  field :session, type: Integer
  field :pageview, type: Integer
  field :data_date, type: Date            # 原始資料的時間

  def get_campaign_from_ga_api
    initialize_ga
    @parameters['metrics'] = "ga:pageviews,ga:sessions"
    @parameters['dimensions'] = "ga:campaign,ga:source,ga:medium,ga:adContent"
    @parameters['filters'] = "ga:campaign!=(not set)"
    sync_to_db(@parameters)
  end

  def sync_to_db(parameters)
     request = {
        :api_method =&gt; @analytics.data.ga.get,
        :parameters =&gt; parameters
     }
    result = @client.execute(request)
    result.data.rows.each do |array_data|
        GACampaign.create(campaign_name:    array_data[0], 
                          campaign_source:  array_data[1], 
                          campaign_medium:  array_data[2],
                          campaign_content: array_data[3],
                          session:          array_data[4],
                          pageview:         array_data[5],
                          data_date:        @data_date)
    end
  end
end
</code></pre>

<p>But&#8230;. if result is more than max-result (according to google, maximun is 10000 <a href="https://developers.google.com/analytics/devguides/reporting/core/v3/reference#maxResults">see google doc</a>)</p>

<p>How can I do paginate?</p>

<h2>4-4 Google API pagination</h2>

<p>Since, this method will be used in every &#8220;GA model&#8221; so I put it in <strong>lib/ga.rb</strong></p>

<p>according to GA document</p>

<blockquote><p>If not supplied, the starting index is 1. (Result indexes are 1-based. That is, the first row is row 1, not row 0.) Use this parameter as a pagination mechanism along with the max-results parameter for situations when totalResults exceeds 10,000 and you want to retrieve rows indexed at 10,001 and beyond.</p></blockquote>

<p>here is my method. Not quiet good, but it&#8217;s working.</p>

<pre><code>def query_paginate(parameters)
     request = {
      :api_method =&gt; @analytics.data.ga.get,
      :parameters =&gt; parameters
    }
    count = 0
    loop do
      result = @client.execute(request)
      sync_to_db(result)
      max_count = result.data.total_results / parameters["max-results"].to_i
      break if count == max_count
      count += 1
      request[:parameters]["start-index"] = parameters["max-results"].to_i * count + 1
    end
  end
</code></pre>

<p>let&#8217;s see full code.</p>

<pre><code>require 'google/api_client'
require 'date'
module GoogleAnalytic

def initialize_ga
    @client = Google::APIClient.new(:application_name =&gt; 'Urcosme-GA-sync', :application_version =&gt; '1')
    key_file = File.join("#{Rails.root}/config", 'ga_api_key_20150408.p12')
    key = Google::APIClient::PKCS12.load_key(key_file, 'notasecret')
    service_account = Google::APIClient::JWTAsserter.new(
      'hello@developer.gserviceaccount.com',
      ['https://www.googleapis.com/auth/analytics.readonly', 'https://www.googleapis.com/auth/prediction'],
      key)
    @client.authorization = service_account.authorize
    @analytics = @client.discovered_api('analytics', 'v3')
    @data_date = Date.today - 1
    @parameters = {
        'ids'         =&gt; "ga:12345",
        'start-date'  =&gt; @data_date.strftime("%Y-%m-%d"),
        'end-date'    =&gt; @data_date.strftime("%Y-%m-%d"),
        'metrics'     =&gt; "",
        'dimensions'  =&gt; "",
        'max-results' =&gt; "10000"
      }
  end

  # 將資料儲存到MongoDB，請複寫我
  def sync_to_db(result)
  end

  # 如果API存取，外加換頁功能，因為GA一次request最多一萬筆資料
  def query_paginate(parameters)
     request = {
      :api_method =&gt; @analytics.data.ga.get,
      :parameters =&gt; parameters
    }
    count = 0
    loop do
      result = @client.execute(request)
      sync_to_db(result)
      max_count = result.data.total_results / parameters["max-results"].to_i
      break if count == max_count
      count += 1
      request[:parameters]["start-index"] = parameters["max-results"].to_i * count + 1
    end
  end
end
</code></pre>

<h3>4-5 refactor <strong>app/models/ga_campaign.rb</strong></h3>

<pre><code>class GACampaign
  include GoogleAnalytic
  include Mongoid::Document
  include Mongoid::Timestamps
  field :campaign_name, type: String      # 廣告活動名稱
  field :campaign_source, type: String    # 廣告活動來源
  field :campaign_medium, type: String    # 廣告活動媒介
  field :campaign_content, type: String   # 廣告活動內容
  field :session, type: Integer
  field :pageview, type: Integer
  field :data_date, type: Date            # 原始資料的時間

  def get_campaign_from_ga_api
    initialize_ga
    @parameters['metrics'] = "ga:pageviews,ga:sessions"
    @parameters['dimensions'] = "ga:campaign,ga:source,ga:medium,ga:adContent"
    @parameters['filters'] = "ga:campaign!=(not set)"
    query_paginate(@parameters)
  end

  def sync_to_db(result)
        result.data.rows.each do |array_data|
        GACampaign.create(campaign_name:    array_data[0], 
                          campaign_source:  array_data[1], 
                          campaign_medium:  array_data[2],
                          campaign_content: array_data[3],
                          session:          array_data[4],
                          pageview:         array_data[5],
                          data_date:        @data_date)
    end
  end
end
</code></pre>

<h3>4-6 how to use</h3>

<pre><code>ga_campaign = GACampaign.new
ga_campaign.get_campaign_from_ga_api
</code></pre>

<h3>4-7 other example: fetch GA Event data</h3>

<p>The things I have to change are <strong>@parameters</strong> and <strong>sync_to_db</strong></p>

<p>It&#8217;s easy, right~</p>

<p><strong>app/models/ga_event.rb</strong></p>

<pre><code>class GAEvent
  include GoogleAnalytic
  include Mongoid::Document
  include Mongoid::Timestamps
  field :event_category, type: String      # 事件類別
  field :event_label, type: String         # 事件標籤
  field :event_action, type: String        # 事件動作
  field :total_events, type: Integer       
  field :unique_events, type: Integer
  field :data_date, type: Date            # 原始資料的時間

  def get_event_from_ga_api
    initialize_ga
    @parameters['metrics'] = "ga:totalEvents,ga:uniqueEvents"
    @parameters['dimensions'] = "ga:eventCategory,ga:eventLabel,ga:eventAction"
    @parameters['filters'] = "ga:eventCategory==test"
    query_paginate(@parameters)
  end

  def sync_to_db(result)
    result.data.rows.each do |array_data|
      GAEvent.create(event_category:      array_data[0], 
                     event_label:        array_data[1], 
                     event_action:       array_data[2],
                     total_events:       array_data[3],
                     unique_events:      array_data[4],
                     data_date:        @data_date)

    end
  end

end
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Google Analytics for Email Click Tracking And Open Rate Tracking in Ruby on Rails]]></title>
    <link href="http://ccaloha.cc/blog/2015/02/27/using-google-analytics-for-email-click-tracking-and-open-rate-tracking-in-ruby-on-rails/"/>
    <updated>2015-02-27T23:34:39+08:00</updated>
    <id>http://ccaloha.cc/blog/2015/02/27/using-google-analytics-for-email-click-tracking-and-open-rate-tracking-in-ruby-on-rails</id>
    <content type="html"><![CDATA[<h2>Requirement</h2>

<ol>
<li><p>每個連結的點擊數</p></li>
<li><p>開信率</p></li>
</ol>


<h2>Google Analytics</h2>

<p>這是一個電子報，基本上屬於一種廣告！</p>

<p>那GA怎麼那麼厲害知道誰點了什麼？</p>

<p>該不會Google 大神，連Email也滲透？！</p>

<p>ps. 我猜他應該也差不多都知道我們在Email上的一舉一動，只要你用Gmail&#8230;</p>

<h3>那GA要怎麼紀錄？</h3>

<blockquote><p>基本上就是將<strong>連結網址</strong>帶上一些&#8221;參數&#8221;，當使用者點了這個連結之後，就你就會被帶到那個<strong>連結網址</strong>，這時候那個網站一定有埋GA的javascript
，這就是他的Key~ GA透過js爬到你的網址，當他發現你有帶某些參數，他就知道你是從哪裡來的！</p></blockquote>

<!-- more -->


<p>我剛剛提到了好幾次<strong>參數</strong></p>

<p>沒錯！這就是關鍵！</p>

<p>讓我們來看一下 有哪些參數</p>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/utm%E8%A8%AD%E8%A8%88.png"></p>

<p>GA在有文件說明<a href="https://support.google.com/analytics/answer/1033863">網址要如何使用</a></p>

<p>而且，GA還很貼心的幫大家準備了 <a href="https://support.google.com/analytics/answer/1033867?hl=zh-Hant">網址產生器</a></p>

<p>來看一下，實際上會產生什麼樣的連結：</p>

<p>假設我們追蹤</p>

<pre><code>透過Email點擊，來到首頁的人
</code></pre>

<p>Url 原本是長這樣</p>

<pre><code>www.urcosme.com
</code></pre>

<p>ps. urcosme.com小弟目前待的公司 XDDDDD廣告一下！</p>

<p>經過<del>我的</del>GA的巧手，它會長這樣</p>

<pre><code>www.urcosme.com/?utm_source=%E9%9B%BB%E5%AD%90%E5%A0%B1&amp;utm_medium=%E9%9B%BB%E5%AD%90%E9%83%B5%E4%BB%B6&amp;utm_content=%E6%B8%AC%E8%A9%A6%E6%B8%AC%E8%A9%A6&amp;utm_campaign=%E6%88%91%E5%A5%BD%E5%B8%A5
</code></pre>

<p>案&#8230;.這是&#8230;.!？</p>

<p>讓我幫你翻譯一下</p>

<pre><code>www.urcosme.com/?utm_source=電子報&amp;utm_medium=電子郵件&amp;utm_content=測試測試&amp;utm_campaign=我好帥
</code></pre>

<p>當我把連結改成這樣後，基本上使用者也是會點到你的首頁，但是對於GA而言，他就知道你是從電子郵件過來</p>

<p>但! 身為一個有責任感又假掰的IT，</p>

<p>我們當然希望讓系統自動幫行銷的同仁帶入這些參數，讓正妹同事覺得沒有你不行～</p>

<h2>1. Rails 要如何實作“點擊追蹤”</h2>

<p>其實很簡單，我們要寫一個 小小小爬蟲，把內容爬過一次</p>

<p>把有 &lt;a> 的找出來，然後把資訊加進去就好了！</p>

<p>那&#8230;爬蟲要怎麼寫？</p>

<p>各位，既然是來到 Rails ，Rails什麼不多，鐵路最多，歐不～ 是輪子最多！</p>

<p>跟大家介紹個 Gem : <strong><a href="http://www.nokogiri.org/">Nokogiri</a></strong></p>

<p>我們就直接用實作，來說明他可以幹麻</p>

<p>直接來看的程式碼：</p>

<p>這是我寫在 <strong>app/models/edm.rb</strong> 的code</p>

<p>這個model資訊是這樣</p>

<pre><code># == Schema Information
#
# Table name: edms
#
#  id                 :integer          not null, primary key
#  name               :string
#  send_at            :datetime
#  title              :string(255)
#  state              :string(255)
#  content            :text
#  created_at         :datetime
#  updated_at         :datetime
#


def parse_link_in_email(user_id)
    # 讀進email html
    html =  Nokogiri::HTML(self.content)
    # 找出所有 a 
    a_nodes = html.css('a')
    a_nodes.each do |a|
      # 抓出href 並且加上GA 追蹤
      tracking_a = a['href'] +  "?utm_source=#{self.name}-#{CGI.escape(a['href'])}" + 
                                "&amp;utm_medium=email" +
                                "&amp;utm_content=#{self.id}-#{user_id}" + 
                                "&amp;utm_campaign=#{self.title}"
      a['href'] = tracking_a
    end
    return html.to_html
 end
</code></pre>

<p>幾個重點：</p>

<ol>
<li>使用<strong>Nokogiri::HTML(self.content)</strong>  => 讀HTML進來</li>
<li><strong>html.css(&#8216;a&#8217;)</strong> => 抓出所有&lt;a></li>
<li><strong>a[&#8216;href&#8217;]</strong>     => 抓出這個&lt;a>，裡頭的屬性href</li>
<li><strong>html.to_html</strong>  => 轉回HTML</li>
</ol>


<p>Done !</p>

<p>所以當使用者點擊信件的link時，GA就會看到&#8230;..</p>

<p><strong>攬客 >> 廣告活動 >> 所有廣告活動</strong></p>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/GA_email_click_tracking.png" alt="GA email click tracking demo"></p>

<h2>2. Rails 要如何實作“開信率”</h2>

<p>開信率我是參考這篇<a href="http://dyn.com/blog/tracking-email-opens-via-google-analytics/">Blog</a>來實作</p>

<p>簡單來說，我們需要埋一個image tag，然而那個tag</p>

<p>會帶上一些<strong>參數</strong>，讓GA知道這幹嘛的！</p>

<p>為什麼要使用這種標籤的方式紀錄呢？</p>

<p>假設使用者打開信之後，並且點了一個連結，</p>

<p>因為這個點了連結的動作，我們知道他一定有開信，歐噎～ 做完了～</p>

<p>But&#8230;&#8230;&#8230;..</p>

<p>那如果他只有打開信，沒有點擊勒？ 如果他打開信，點了N個連結，那開信不就也被多紀錄了很多次？(ps.點擊紀錄是每點一次就紀錄一次)</p>

<blockquote><p>所以我們必須透過從 Google Analytics <strong>&#8220;GET&#8221;</strong> 一個標記(就是圖片啦)，當我們跟GA要圖的時候，可以告訴GA一些<strong>參數</strong>，嘿嘿，這樣就有辦法紀錄了！</p></blockquote>

<p>各位，又看到<strong>參數</strong>兩個字</p>

<p>那又有哪些可以用勒？ (這邊我只列我目前有在用的，詳細可以參考<a href="https://developers.google.com/analytics/devguides/collection/protocol/v1/parameters#events">GA collections parameters</a>)</p>

<table>
<thead>
<tr>
<th></th>
<th> 參數                                                                                 </th>
<th> 說明                                                                   </th>
<th> 舉例                                                                                 </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> tid </td>
<td> 要放GA的ID</td>
<td> UA-1234567-8 |</td>
</tr>
<tr>
<td></td>
<td> uid </td>
<td>Unique的ID(因為我們要寄信給User我是使用該User的ID)</td>
<td> 1 |</td>
</tr>
<tr>
<td></td>
<td> t   </td>
<td> 告訴GA這是個什麼類型的紀錄(基本上我查到都使用event) </td>
<td> event |</td>
</tr>
<tr>
<td></td>
<td> ec  </td>
<td> 告訴GA這個Event的Category </td>
<td> email-測試 |</td>
</tr>
<tr>
<td></td>
<td> ea  </td>
<td> 告訴GA這個Event的Action </td>
<td> Open |</td>
</tr>
<tr>
<td></td>
<td> el  </td>
<td> 告訴GA這個Event的Label </td>
<td> user_id-1 |</td>
</tr>
<tr>
<td></td>
<td> cs  </td>
<td> 廣告活動的來源 </td>
<td> Email標題 |</td>
</tr>
<tr>
<td></td>
<td> cm  </td>
<td> 廣告活動的媒介 </td>
<td> edm |</td>
</tr>
<tr>
<td></td>
<td> cn  </td>
<td> 廣告活動名稱   </td>
<td> 電子報第0期 | </td>
</tr>
</tbody>
</table>


<p>那我們就不看sample，直接來看實作code</p>

<pre><code>def parse_link_in_email(user_id)

    ... 

    body = html.at_css("body")
    img_node = Nokogiri::XML::Node.new("img",body)
    img_node['src'] = "https://www.google-analytics.com/collect?v=1" + 
                      "&amp;tid=#{Settings.google_analytics_key}" + 
                      "&amp;uid=#{user_id}"+
                      "&amp;t=event" +
                      "&amp;ec=email-#{self.name}-#{self.title}" + 
                      "&amp;ea=open" + 
                      "&amp;el=user_id-#{user_id}" + 
                      "&amp;cs=#{self.name}" + 
                      "&amp;cm=email" + 
                      "&amp;cn=#{self.title}"
    body &lt;&lt; img_node

    ...
end
</code></pre>

<p>幾個重點：</p>

<ol>
<li>使用<strong>Nokogiri::XML::Node.new(&#8220;img&#8221;,body)</strong>  => 新增一個&lt;img>標籤</li>
<li><strong>img_node[&#8216;src&#8217;]</strong>     => 設定這個&lt;img>，裡頭的屬性src</li>
<li><strong>body &lt;&lt; img_node</strong>  => 將code埋到body裡面</li>
</ol>


<p>那在GA你會看到什麼勒？</p>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/GA_email_open_tracking.png" alt="GA email open rate tracking demo"></p>

<h2>3. Rails Mailer、its View and model</h2>

<p> 剩下我沒提到的部份，不過這些就是基本寄信的功能，我就不贅述了</p>

<p> <strong>app/models/edm.rb</strong></p>

<pre><code>has_many :edm_user_ships  # 假設你有要寄信的清單
has_many :users, :through =&gt; :edm_user_ships
def send_mail
    self.users.each do |user|
        EdmMailer.delay.send_edm(self, user.email, user.id)
    end
end
</code></pre>

<p><strong>app/mailers/edm_mailer.rb</strong></p>

<pre><code>class EdmMailer &lt; ActionMailer::Base
  default from: "service@urcosme.com"

  def send_edm(e_notify, email, user_id = nil)
    @e_notify = e_notify
    @user_id = user_id

    mail to: email, subject: e_notify.title
  end
end
</code></pre>

<p><strong>app/views/edm_mailer/send_edm.html.slim</strong></p>

<pre><code>= raw @e_notify.parse_link_in_email(@user_id)
</code></pre>

<h2>Done</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Ruby on Rails] Model Version control using papertrail]]></title>
    <link href="http://ccaloha.cc/blog/2015/02/26/model-version-control-using-papertrail/"/>
    <updated>2015-02-26T16:30:53+08:00</updated>
    <id>http://ccaloha.cc/blog/2015/02/26/model-version-control-using-papertrail</id>
    <content type="html"><![CDATA[<h2>Why use papertrail ?</h2>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/Rails%E5%8A%A0%E5%85%A5Model%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202015-01-06%20%E4%B8%8A%E5%8D%8811.57.23.png" alt="ruby toolbox - active record versioning"></p>

<h2>Step1. Add lib</h2>

<p><strong>Gemfile</strong></p>

<pre><code>gem 'paper_trail', '~&gt; 3.0.6'
</code></pre>

<h2>Step2. create a migration</h2>

<p><strong>On Terminal</strong></p>

<pre><code>bundle exec rails generate paper_trail:install
</code></pre>

<p>他會建立，一個叫做<strong>versions</strong>的表</p>

<h2>Step3. migrate</h2>

<pre><code>bundle exec rake db:migrate
</code></pre>

<h2>Step4. Done</h2>

<p>把 <strong>has_paper_trail</strong> 加上你想要追蹤的model</p>

<h2>應用部分</h2>

<h3>若是想要不同model使用不同追蹤table?</h3>

<p>假設我想要<strong>product</strong>有自己的versions表</p>

<ul>
<li><p>Step1.</p>

<pre><code>  rails g model product_version 
</code></pre></li>
<li><p>貼上</p>

<pre><code>  class CreateProductVersions &lt; ActiveRecord::Migration
    def change
      create_table :product_versions do |t|
        t.string   :item_type, :null =&gt; false
        t.integer  :item_id,   :null =&gt; false
        t.string   :event,     :null =&gt; false
        t.string   :whodunnit
        t.text     :object
        t.datetime :created_at
        # t.string   :author_username 如果你需要自訂一些欄位讓他記錄，也可以在migration這邊加
      end
      add_index :product_versions, [:item_type, :item_id]
      end
    end
  end
</code></pre></li>
</ul>


<p>ps. 這就是他本身內建會產生的欄位，只是我們手動把它copy一份出來</p>

<ul>
<li><p>別忘了</p>

<pre><code>  bundle exec rake db:migrate
</code></pre></li>
<li><p>改model <strong>ProductVersion</strong></p>

<pre><code>  class ProductVersion &lt; PaperTrail::Version
    self.table_name = :product_versions
  end
</code></pre></li>
<li><p>改model <strong>Product</strong></p>

<pre><code>  class Product &lt; ActiveRecord::Base
      ...
      has_paper_trail class_name: 'ProductVersion'
      ...
  end
</code></pre></li>
</ul>


<h3>若是想要知道誰動了資料?</h3>

<p> 假設你有使用<strong>devise</strong>，然後是寫在後台</p>

<p>請加在 <strong>controller/admin/admin_controller.rb</strong></p>

<pre><code>def user_for_paper_trail
    admin_signed_in? ? current_admin.email : 'System'
end
</code></pre>

<p>假使你在前台，你可能需要這樣寫</p>

<pre><code>def user_for_paper_trail
    user_signed_in? ? current_user.email : 'Public User'
end
</code></pre>

<h3>若某個動作不想被追蹤</h3>

<pre><code>@product.without_versioning do
  @product.update_attributes :created_at =&gt; Time.now
end
</code></pre>

<h3>若要刪除某個versions從哪天到某天</h3>

<p>方法一：<strong>下SQL</strong></p>

<pre><code>delete from versions where created_at &lt; 2014-01-01;
</code></pre>

<p>方法二：<strong>在rails c底下</strong></p>

<pre><code>PaperTrail::Version.delete_all ["created_at &lt; ?", 1.year.ago]
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[HowTo] Get Google Analytics Engagement Using R]]></title>
    <link href="http://ccaloha.cc/blog/2014/12/26/howto-get-google-analytics-engagement-using-r/"/>
    <updated>2014-12-26T08:17:04+08:00</updated>
    <id>http://ccaloha.cc/blog/2014/12/26/howto-get-google-analytics-engagement-using-r</id>
    <content type="html"><![CDATA[<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/get%20google%20analytics%20engagement%20using%20R/2014%E5%B9%B4engagement-pageviews%E5%9C%96.png" alt="every months google analytic engagement(pageviews X session Duration) in 2014 using R"></p>

<p><strong>使用者在網站上的參與程度</strong>，是我一直滿好奇的指標！</p>

<p>在GA裡，網站參與度，如下圖</p>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/get%20google%20analytics%20engagement%20using%20R/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-12-22%20%E4%B8%8A%E5%8D%883.13.48.png" alt=“google analytics engagement”></p>

<p>這系列的文章，我的target是 我想知道今年(2014)整體使用者參與度的變化與趨勢</p>

<p>此篇文章是focus 在如何透過R抓取資料並分析成和 GA view一樣的資料！</p>

<p>之後，再看看可以看到什麼樣比較有意義的資料～</p>

<p>let&#8217;s go !</p>

<!-- more -->


<h2>Google Analytic API 申請</h2>

<p>在做GA之前，別忘記要申請<strong><a href="http://ccaloha.herokuapp.com/blog/2014/12/24/howto-get-google-analytics-using-r-rgoogleanalytics-using-users-pageviews-time-as-an-example/">GA API權限</a></strong></p>

<h2>Google Query Explorer <a href="https://ga-dev-tools.appspot.com/explorer/">link</a></h2>

<p>Google 提供的工具，我覺得還滿好用的！</p>

<p>在使用API之前，使用 explorer 可以讓你先有Fu大概知道會拿到什麼樣的資料！</p>

<p>大概看一下怎麼用吧</p>

<h3>Step1. 先登入Google Analytics的帳號</h3>

<h3>Step2. 回到Google Query Explorer，重新refresh</h3>

<p>點選認證</p>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/get%20google%20analytics%20engagement%20using%20R/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-12-25%20%E4%B8%8A%E5%8D%888.16.31.png" alt="點選 Click Here to authorize"></p>

<p>你就可以看到</p>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/get%20google%20analytics%20engagement%20using%20R/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-12-25%20%E4%B8%8A%E5%8D%888.20.28.png" alt="Google Query Explorer 取得GA權限後頁面"></p>

<p>其中，<strong>account</strong> /  <strong>Property</strong> / <strong>View(Profile)</strong> 就是</p>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/get%20google%20analytics%20engagement%20using%20R/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-12-25%20%E4%B8%8A%E5%8D%888.24.24.png" alt="對應GA"></p>

<h3>Step3. 看一下哪些GA View 對應到API的名稱</h3>

<p>請到 <a href="https://developers.google.com/analytics/devguides/reporting/core/dimsmets">Google Analytics Dimensions &amp; Metrics Reference</a></p>

<p>我們要找的就是</p>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/get%20google%20analytics%20engagement%20using%20R/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-12-26%20%E4%B8%8A%E5%8D%887.46.24.png" alt="Sessions"></p>

<p>點進去<strong>&#8220;ga:sessionDurationBucket&#8221;</strong></p>

<p>你會看到 <strong>“web view name: Session Duration”</strong> 沒錯！ 那個就是對應到GA View的名稱！</p>

<p>耶～～找到了～～</p>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/get%20google%20analytics%20engagement%20using%20R/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-12-26%20%E4%B8%8A%E5%8D%887.48.45.png" alt="ga:sessionDurationBucket definition"></p>

<h3>Step4. 找到之後，趕緊來Google Query Explorer試試抓數據的感覺</h3>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/get%20google%20analytics%20engagement%20using%20R/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-12-22%20%E4%B8%8A%E5%8D%883.20.14.png" alt="fetch data from google query explorer"></p>

<p>ya~~~拿到資料了！</p>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/get%20google%20analytics%20engagement%20using%20R/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-12-26%20%E4%B8%8A%E5%8D%887.54.52.png" alt="get ga:sessionDurationBucket , ga:sessions and ga:sessionDuration from Google Query Explorer"></p>

<p>咦！那個<strong>ga:sessionDurationBucket</strong>好像有點怪怪的～</p>

<p>各位人客，請不要緊張～</p>

<p>那是因為他吐回來的資料是<strong>String</strong>，所以他的排序才是這樣～</p>

<h3>Step5. R</h3>

<p>說明都寫在裡面！</p>

<p>ps. 由於小弟我還是R新手，寫的鳥鳥的地方，還請見諒，如果可以的話，可以留言告訴我，哪裡怎麼寫會比較好～ 感謝！</p>

<p><a href="https://gist.github.com/alChaCC/4fee2a25a422dceb40f5">點我看比較漂亮的gist</a></p>

<pre><code>setwd("r-playground/R/ga_engagement") #設定你要的操作順序
list.of.packages &lt;- c("rjson", "RCurl","RGoogleAnalytics")
new.packages &lt;- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
require(rjson)
require(RCurl)
require(RGoogleAnalytics)
require(ggplot2)
token &lt;- Auth('YOUR API USER ID','YOUR API USER PASSWORD')
save(token,file="./token_file")
profile &lt;- GetProfiles(token) # show all your profile 
#          id                               name
#    XXXXXX                      HELLO (All)
#  YYYYYYYY                      COOL
#   ....

# Your profile number (not the GA ID number)
my_profile    &lt;- profile[profile$name == 'HELLO (All)',1] 

time_start_seq &lt;- as.Date(ISOdate(2014,seq(1,12),1))
#[1] "2014-01-01" "2014-02-01" "2014-03-01" "2014-04-01" "2014-05-01" "2014-06-01"
#[7] "2014-07-01" "2014-08-01" "2014-09-01" "2014-10-01" "2014-11-01" "2014-12-01"
time_end_seq &lt;- seq(as.Date("2014-02-01"), length=12, by="1 month") - 1
# [1] "2014-01-31" "2014-02-28" "2014-03-31" "2014-04-30" "2014-05-31" "2014-06-30"
# [7] "2014-07-31" "2014-08-31" "2014-09-30" "2014-10-31" "2014-11-30" "2014-12-31"

# 為了做資料紀錄
every_month_2014 &lt;- list()
all_data &lt;- data.frame()

for ( i in 1:length(time_start_seq)) {

  query.list &lt;- Init(start.date = as.character(time_start_seq[i]),
                     end.date = as.character(time_end_seq[i]),
                     dimensions = "ga:sessionDurationBucket",
                     metrics = "ga:sessions,ga:pageviews",
                     sort = "ga:sessionDurationBucket",
                     max.results = 10000,
                     table.id = paste("ga:",my_profile,sep="",collapse=",")
                     )

  # 建立一個query等一下就是透過這個query與token拿資料！
  ga.query &lt;- QueryBuilder(query.list)

  # 向GA抓取資料，存成data frame
  ga.data &lt;- GetReportData(ga.query, token) 
  # ga.data &lt;- GetReportData(ga.query, token,split_daywise = T,paginate_query = TRUE)  另外一種拿法也work


  # 資料處理部分，由於抓回來的 “data$sessionDurationBucket” 是個string，所要把它轉成 數字
  less_than_10_seconds &lt;- ga.data[as.numeric(ga.data$sessionDurationBucket) &lt;= 10,]
  between_11_to_30     &lt;- ga.data[as.numeric(ga.data$sessionDurationBucket) &gt; 10 &amp; as.numeric(ga.data$sessionDurationBucket) &lt;= 30,]
  between_31_to_60     &lt;- ga.data[as.numeric(ga.data$sessionDurationBucket) &gt; 30 &amp; as.numeric(ga.data$sessionDurationBucket) &lt;= 60,]
  between_61_to_180    &lt;- ga.data[as.numeric(ga.data$sessionDurationBucket) &gt; 60 &amp; as.numeric(ga.data$sessionDurationBucket) &lt;= 180,]
  between_181_to_600   &lt;- ga.data[as.numeric(ga.data$sessionDurationBucket) &gt; 180 &amp; as.numeric(ga.data$sessionDurationBucket) &lt;= 600,]
  between_601_to_1800  &lt;- ga.data[as.numeric(ga.data$sessionDurationBucket) &gt; 600 &amp; as.numeric(ga.data$sessionDurationBucket) &lt;= 1800,]
  more_than_1801       &lt;- ga.data[as.numeric(ga.data$sessionDurationBucket) &gt; 1800,]

  # 處理後資料長這樣
  #     sessionDurationBucket sessions pageviews
  #                        0   342840    341561
  #                        1     1445      1906
  #                       10     2567      4392
  #                        2     2210      2704
  #                        3     2283      2934
  #                        4     2309      3133
  #                        5     2368      3384


  # 資料整併
  every_month_2014[[i]] &lt;- rbind(colSums(less_than_10_seconds[,-1]),colSums(between_11_to_30[,-1]),
                                 colSums(between_31_to_60[,-1]),colSums(between_61_to_180[,-1]),
                                 colSums(between_181_to_600[,-1]),colSums(between_601_to_1800[,-1]),
                                 colSums(more_than_1801[,-1]))
  #       sessions pageviews
  #[1,]   365814    375361
  #[2,]    44857     92466
  #[3,]    48003    133645
  #[4,]    96890    423865
  #[5,]   107373    872529
  #[6,]    78404   1057353
  #[7,]    28183    812783


  # 補上一欄時間區間
  month_all_data &lt;- cbind(c(as.character(i)),c("&lt; 10s","11 ~ 30","31~60","61~180","181~600","601~1800","&gt;1801"),every_month_2014[[i]])
  #                     sessions pageviews
  #[1,] "12" "&lt; 10s"    "365814" "375361" 
  #[2,] "12" "11 ~ 30"  "44857"  "92466"  
  #[3,] "12" "31~60"    "48003"  "133645" 
  #[4,] "12" "61~180"   "96890"  "423865" 
  #[5,] "12" "181~600"  "107373" "872529" 
  #[6,] "12" "601~1800" "78404"  "1057353"
  #[7,] "12" "&gt;1801"    "28183"  "812783" 

  # 將每一年的統整資料放在一起，作圖需要
  all_data &lt;- rbind(all_data,month_all_data)
}


# 補上欄位名稱
colnames(all_data) &lt;- c("month","time_interval","sessions","pageviews")


# 先畫pageviews
# 將資料的型態改正，因為上面建立的時候，會將每個欄位的屬性變成"factor"，這會對畫圖趙成莫大影響！
all_data &lt;- transform(all_data, 
    time_interval = factor(time_interval, levels = 
        c('&lt; 10s','11 ~ 30','31~60', '61~180','181~600', '601~1800','&gt;1801')),
    pageviews = as.numeric(as.character(pageviews)))

# 作圖
plot &lt;- ggplot(data = all_data, aes(x = month, y = pageviews, fill = time_interval)) +  
    geom_bar(stat = "identity", position = "dodge", colour = "black")

# 將圖存出
ggsave(plot,file=paste("2014年engagement-pageviews圖.png",sep=""),width=15, height=10)


# 再畫sessions
all_data &lt;- transform(all_data, 
    time_interval = factor(time_interval, levels = 
        c('&lt; 10s','11 ~ 30','31~60', '61~180','181~600', '601~1800','&gt;1801')),
    sessions = as.numeric(as.character(sessions)))

plot &lt;- ggplot(data = all_data, aes(x = month, y = sessions, fill = time_interval)) +  
    geom_bar(stat = "identity", position = "dodge", colour = "black")

ggsave(plot,file=paste("2014年engagement-sessions圖.png",sep=""),width=15, height=10)
</code></pre>

<h3>Done</h3>

<p>先來看 2014年每月 pageview 與 使用者平均在線時間 的 bar chart</p>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/get%20google%20analytics%20engagement%20using%20R/2014%E5%B9%B4engagement-pageviews%E5%9C%96.png" alt="every months google analytic engagement(pageviews X session Duration) in 2014 using R"></p>

<p>再來看 2014年每月 sessions 與 使用者平均在線時間 的 bar chart</p>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/get%20google%20analytics%20engagement%20using%20R/2014%E5%B9%B4engagement-sessions%E5%9C%96.png" alt="every months google analytic engagement(sessions X session Duration) in 2014 using R"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[HOWTO]- 立馬拋棄Excel！利用R，取得Google Analytics的資料 -以使用者流量的時間畫heatmap為example]]></title>
    <link href="http://ccaloha.cc/blog/2014/12/24/howto-get-google-analytics-using-r-rgoogleanalytics-using-users-pageviews-time-as-an-example/"/>
    <updated>2014-12-24T10:24:04+08:00</updated>
    <id>http://ccaloha.cc/blog/2014/12/24/howto-get-google-analytics-using-r-rgoogleanalytics-using-users-pageviews-time-as-an-example</id>
    <content type="html"><![CDATA[<blockquote><p>學習一個東西，最快的方式，就是&#8230;.</p>

<blockquote><p>just do it !</p></blockquote></blockquote>

<p>由於我想要成為一個酷炫的資料科學家！</p>

<p>不學習R這樣對嗎～</p>

<p>既然要學習R，那從每週的<strong>Google Analytics</strong>開始著手！</p>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/HowTo-%20get%20google%20analytics%20using%20R%28RGoogleAnalytics%29%20using%20user%27s%20pageviews%20time%20as%20an%20example/Rplot.png" alt="traffic heatmap using R (RGoogleAnalytics)"></p>

<!-- more -->


<p>首先，在開始之前，為了要有個map !</p>

<p>所以，當然是先看人家怎麼做</p>

<p>瞭解一下機制和 那個Fu~~</p>

<p>我主要是參考這篇：<a href="http://viget.com/inspire/how-to-build-a-traffic-heatmap-using-google-analytics-and-r">Building a Traffic Heatmap with Google Analytics and R</a></p>

<p>但是由於他使用的 RGoogleAnalytics 是舊版的，而且，google 現在的API都需要使用 OAuth 2.0</p>

<p>所以&#8230;.做法上還是有點不同，不過完成整個設定後，擷取資料與分析，就跟他的內容大同小異了！</p>

<p>廢話不多說，那就開始吧！</p>

<h2>Step 1. 申請API使用權限</h2>

<h3>1. 登入到 <a href="http://cloud.google.com/console">Google Developer Console</a></h3>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/HowTo-%20get%20google%20analytics%20using%20R%28RGoogleAnalytics%29%20using%20user%27s%20pageviews%20time%20as%20an%20example/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-12-24%20%E4%B8%8B%E5%8D%8811.16.19.png" alt="建立專案"></p>

<h3>2. 選擇啟用API</h3>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/HowTo-%20get%20google%20analytics%20using%20R%28RGoogleAnalytics%29%20using%20user%27s%20pageviews%20time%20as%20an%20example/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-12-24%20%E4%B8%8B%E5%8D%8811.16.31.png" alt="設定啟用API"></p>

<h3>3. 選擇要啟用的API 為 google analytics</h3>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/HowTo-%20get%20google%20analytics%20using%20R%28RGoogleAnalytics%29%20using%20user%27s%20pageviews%20time%20as%20an%20example/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-12-24%20%E4%B8%8B%E5%8D%8811.16.35.png" alt="選擇要請用的API為 Analytics API"></p>

<h3>4. 新增API存取所需的憑證</h3>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/HowTo-%20get%20google%20analytics%20using%20R%28RGoogleAnalytics%29%20using%20user%27s%20pageviews%20time%20as%20an%20example/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-12-24%20%E4%B8%8B%E5%8D%8811.16.45.png" alt="建立API憑證"></p>

<h3>5. 輸入相關資訊</h3>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/HowTo-%20get%20google%20analytics%20using%20R%28RGoogleAnalytics%29%20using%20user%27s%20pageviews%20time%20as%20an%20example/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-12-24%20%E4%B8%8B%E5%8D%8811.16.52.png" alt="輸入這個憑證的相關訊息"></p>

<h3>6. 記錄下來你的用戶ID與用戶密碼</h3>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/HowTo-%20get%20google%20analytics%20using%20R%28RGoogleAnalytics%29%20using%20user%27s%20pageviews%20time%20as%20an%20example/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%202014-12-24%20%E4%B8%8B%E5%8D%8811.17.02.png" alt="記錄下來吧！"></p>

<h2>Step2. 寫R</h2>

<p>請看我裡面的註解吧</p>

<pre><code># 安裝套件
install.packages('rjson')
install.packages('RCurl')
install.packages('RColorBrewer')
install.packages('RGoogleAnalytics')
require(rjson)
require(RCurl)
require(RColorBrewer)
require(RGoogleAnalytics)

# 由於 google api 現在規定使用oauth2.0 來存取
# R語言使用 "&lt;-" 當作變數指派
token &lt;- Auth('用戶端ID','用戶端密碼')

# 找到目前有哪些views
profile &lt;- GetProfiles(token)

## 上面那一行你會看到這樣的結果，使用data.frame格式儲存，data frame是R語言裡頭很常見的資料型態，你就把它想成是excel裡面的tab
## id name
## 85712839 所有網站資料

# 編寫要搜尋的參數，這邊是關鍵！
# R： 取得data frame 列(row)裡頭一個變數
my_profile &lt;- profile[profile$name == '所有網站資料',1]
query.list &lt;- Init(start.date = "2014-10-01",
          end.date = "2014-12-14",
          dimensions = "ga:dayOfWeek, ga:hour",
          metrics = "ga:pageviews",
          max.results = 10000,
          table.id = paste("ga:",my_profile,sep="",collapse=",")
)

# 建立一個query等一下就是透過這個query與token拿資料！
ga.query &lt;- QueryBuilder(query.list)

# 向GA抓取資料，存成data frame
ga.data &lt;- GetReportData(ga.query, token)

# 看一下ga.data長什麼樣子
## dayOfWeek hour pageviews
## 0 00 19734
## 0 01 11244
## 0 02 6286
## 0 03 3528
## 0 04 1830
## 0 05 1316
## 0 06 910
## 0 07 2168
## 0 08 4547
## ....


# 把ga.data裡頭dayOfWeek的 0 轉換成 sunday, 1轉成 Monday..and so on..
ga.data$dayOfWeek &lt;- as.character(ga.data$dayOfWeek)
ga.data$dayOfWeek[ga.data$dayOfWeek == "0"] &lt;- "Sunday"
ga.data$dayOfWeek[ga.data$dayOfWeek == "1"] &lt;- "Monday"
ga.data$dayOfWeek[ga.data$dayOfWeek == "2"] &lt;- "Tuesday"
ga.data$dayOfWeek[ga.data$dayOfWeek == "3"] &lt;- "Wednesday"
ga.data$dayOfWeek[ga.data$dayOfWeek == "4"] &lt;- "Thursday"
ga.data$dayOfWeek[ga.data$dayOfWeek == "5"] &lt;- "Friday"
ga.data$dayOfWeek[ga.data$dayOfWeek == "6"] &lt;- "Saturday"

# 資料排序調整(y軸)，寫了這個factor後，他會以 sunday, monday....等方式排序呈現資料
ga.data$dayOfWeek &lt;- factor(ga.data$dayOfWeek, levels = c("Sunday",
              "Monday",
              "Tuesday",
              "Wednesday",
              "Thursday",
              "Friday",
              "Saturday"))
ga.data[order(ga.data$dayOfWeek),]

# 將 data frame 轉成 xtab.
heatmap_data &lt;- xtabs(pageviews ~ dayOfWeek + hour, data=ga.data)

# heatmap_data長這樣
# hour
#dayOfWeek 00 01 02 03 04 05 06 07 08 09 10 11 12
# Sunday 19734 11244 6286 3528 1830 1316 910 2168 4547 5991 10653 11380 13414
# Monday 15170 9317 5120 2252 578 536 860 1605 3127 6175 10248 12287 12654
# Tuesday 11958 7445 3438 1582 893 784 904 1566 3268 6106 7925 7577 9336
# Wednesday 11178 7898 3529 1338 1177 536 844 1250 2575 6104 8051 8910 8732
# Thursday 28735 19955 9645 5246 2498 2072 3379 6070 9987 17166 22617 22780 23911
# Friday 31564 16496 8220 3603 2209 1626 2028 3015 6750 12871 17537 18307 18358
# Saturday 19325 12335 6011 2808 1253 1416 1090 1981 4114 7257 9239 10438 11733


# 畫圖 ---------------------------------------------------------------------
heatmap(heatmap_data,
col=colorRampPalette(brewer.pal(9,"Reds"))(100), # Use ColorBrewer's nicer color palettes.
revC=TRUE, # Start the week at the top of the Y axis.
scale="none", # Map color density to entire week, not a day or hour slice.
Rowv=NA, Colv=NA, # Don't use a dendogram.
main="Pageviews by Day and Hour", # Title.
xlab="Hour") # X-axis label. 
</code></pre>

<h2>Done</h2>

<p>執行指令，</p>

<pre><code>source('r_ga_heatmap.R')
</code></pre>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/HowTo-%20get%20google%20analytics%20using%20R%28RGoogleAnalytics%29%20using%20user%27s%20pageviews%20time%20as%20an%20example/Rplot.png" alt="traffic heatmap using R (RGoogleAnalytics)"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Analytics - Goal and Funnel]]></title>
    <link href="http://ccaloha.cc/blog/2014/12/18/google-analytics-goal-and-funnel/"/>
    <updated>2014-12-18T08:20:45+08:00</updated>
    <id>http://ccaloha.cc/blog/2014/12/18/google-analytics-goal-and-funnel</id>
    <content type="html"><![CDATA[<p>屬於四大分類下的&#8230;&#8230;..</p>

<p>Audience(目標對象)</p>

<p>Acquistion(攬客)</p>

<p>Behavior(行為)</p>

<blockquote><p><strong>Conversions(轉換)</strong></p></blockquote>

<p>一樣先來看看GA怎麼說</p>

<iframe width="560" height="315" src="http://ccaloha.cc//www.youtube.com/embed/fMeKXsl7xT8" frameborder="0" allowfullscreen></iframe>




<!-- more -->


<p></p>

<h2>Why => 目標與程序可以當飯吃嗎？</h2>

<blockquote><p><strong>可以！</strong></p>

<p>Aloha: 你可以設定目標，然後審閱使用者們到達這目標的比例是幾多。</p>

<p>畢竟你架個網站、加個功能、加個頁面，無非就是為了某些目的！例如，你希望使用者會導購EC</p></blockquote>

<p>這樣有FU了之後，我們來看一下GA上要怎麼設定～</p>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/GA/GA%E7%9B%AE%E6%A8%99%E8%88%87%E7%A8%8B%E5%BA%8F-1.png" alt="目標程序設定"></p>

<h3>目標網址</h3>

<p>當然就是填入 <strong>你希望使用者最後抵達的位置</strong></p>

<h3>值</h3>

<p>你可以設定 目標成功後的價值</p>

<h3>程序</h3>

<p>就是你預期它到達這個目標之前的路徑</p>

<p>當你設定了這個步驟後，就可以看到一個很酷的圖！</p>

<h3>Aloha眉批：</h3>

<p>以上面的圖為例子，假設我們希望使用者可以加入會員，所以我們可能做了一個活動，或是我們在步驟1, 步驟2做了調整，希望增加註冊成功的機會;</p>

<p>或者是說，你想知道目前的註冊流程的抵達比例，你也可以先設定好，再看看要怎麼請IT調整</p>

<p>於是乎，當我設定好程序後，我就可以看到</p>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/GA/GA%E7%9B%AE%E6%A8%99%E8%88%87%E7%A8%8B%E5%BA%8F-2.png" alt="GA-目"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Analytics - Cross Device tracking in Ruby on Rails]]></title>
    <link href="http://ccaloha.cc/blog/2014/12/12/google-analytics-cross-device-tracking-in-ruby-on-rails/"/>
    <updated>2014-12-12T08:13:38+08:00</updated>
    <id>http://ccaloha.cc/blog/2014/12/12/google-analytics-cross-device-tracking-in-ruby-on-rails</id>
    <content type="html"><![CDATA[<p>首先，先來看一下google 的說明</p>

<iframe width="560" height="315" src="http://ccaloha.cc//www.youtube.com/embed/RsrAcxIsQHU" frameborder="0" allowfullscreen></iframe>




<!-- more -->


<blockquote><p>簡單來說，GA 在不同裝置瀏覽時，會依照每個裝置製作特別的ID, 但是，當user清掉Cookie或是重新安裝機器，就會把那個特別的ID重設，這樣他就會變成新訪客，而不是回流訪客。</p></blockquote>

<p>當然，如果要跨Devise追蹤，既然是不同的Devise當然它的ID一定不一樣，所以一個使用者如果用電腦先在Urcosme網頁看一下等一下想要購買的商品，之後，他出發到康是美，要買產品之前拿出手機，再看一次商品確認，基本上他就會被列為兩個不同的來源</p>

<p>所以要跨Device追蹤，很重要的關鍵是：</p>

<blockquote><p>那個特別的ID</p></blockquote>

<p>然而，Universal(新版)的GA有提供修改 user id的功能！</p>

<p><a href="http://cutroni.com/blog/2014/04/10/understanding-cross-device-measurement-and-the-user-id/">Understanding Cross Device Measurement and the User-ID</a></p>

<h2>那要怎麼加上user id 呢？</h2>

<h3>Step1. 第一步，打開User ID的功能</h3>

<p><img alt="GA User ID" src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/GA/user%20id%20%E5%95%9F%E7%94%A8.png"></img></p>

<h3>Step2. 改網站上的Code</h3>

<p><img alt="GA User ID code" src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/GA/%E8%A8%AD%E5%AE%9AUser_id%20.png"></p>

<h3>Step3. 設定View名稱！</h3>

<p>恭喜你 就有新的View !</p>

<h3>Step4. Rails 要怎麼加入 User ID呢？</h3>

<p>如果你跟我一樣是使用Devise gem作為登入的lib，</p>

<h4>Step 1. 在 app/views/layouts/application.html.slim 加上</h4>

<pre><code>= render 'shared/google_analytics', user_id: current_user.try(:id) 
</code></pre>

<p>ps. 若是使用 partial</p>

<pre><code>= render :partial =&gt; "partials/google_analytics" , :locals =&gt; { user_id: current_user.try(:id)}
</code></pre>

<p><em>重點就是那user_id，如果不用try的話，若是current_user是nil，就會報錯！</em></p>

<h4>Step 2. 編輯 app/views/shared/_google_analytics.html.erb</h4>

<pre><code>&lt;script&gt;

  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  &lt;%- if user_id.present? %&gt;
    ga('create', 'UA-XXXX-YYYY', {'userId': '&lt;%= user_id %&gt;'})
  &lt;%- else %&gt;
    ga('create', 'UA-XXXX-Y', 'urbox.cc');
  &lt;% end %&gt;
  ga('send', 'pageview');

&lt;/script&gt;
</code></pre>

<h3>那假設user沒有登入，你沒有辦法給他user id</h3>

<p>Google 有推出(工作階段整合) Session Unification的功能，當你啟動了這個功能後，基本上有User ID的就會被放在一個群組，沒有User ID的就會在另外一個群組！</p>

<p>但是厲害的是，Google在同一個session內，若發現這個ID(隨機產生)被重新assign過(系統assign)，他會把之前的action記錄給後來的ID</p>

<h2>那套上User ID後，會有什麼差別呢？</h2>

<ol>
<li><p> 你的指標(metrics)計算方式不同，但是更精確了！</p></li>
<li><p> 你擁有了跨裝置的報告.</p></li>
<li><p> Limited date range.</p></li>
</ol>


<p>  你的Data範圍是90天。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[HOWTO]- 在Ruby on Rails 實作Ckeditor上傳圖片到各個獨立的資料夾]]></title>
    <link href="http://ccaloha.cc/blog/2014/12/10/howto-setup-ckeditor-upload-picture-to-a-special-folder-in-ruby-on-rails/"/>
    <updated>2014-12-10T08:04:05+08:00</updated>
    <id>http://ccaloha.cc/blog/2014/12/10/howto-setup-ckeditor-upload-picture-to-a-special-folder-in-ruby-on-rails</id>
    <content type="html"><![CDATA[<p>首先，要先感謝 <strong><em>Ayaya</em></strong>，主要是參考他的code而改編出來的功能！</p>

<p>一樣講一下需求</p>

<p>我希望使用者上傳檔案到不同特定的資料夾，譬如：A新聞的照片，只會被上傳到A新聞的資料夾</p>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/%5BHOWTO%5D-%20%E5%9C%A8Ruby%20on%20Rails%20%E5%AF%A6%E4%BD%9CCkeditor%E4%B8%8A%E5%82%B3%E5%9C%96%E7%89%87%E5%88%B0%E5%90%84%E5%80%8B%E7%8D%A8%E7%AB%8B%E7%9A%84%E8%B3%87%E6%96%99%E5%A4%BE/Ckeditor_upload_image_to_specific_folder.png" alt='ckeditor 上傳圖片到特定資料夾'></p>

<p>之後你還可以實作 照片只能被特定使用者看到，這篇文章就不在這邊琢磨</p>

<!--more-->


<p>另外這篇文章，我不會提到 <strong>Ckedior</strong> 的基本安裝的東西，有興趣的話，請看 <strong><a href="https://github.com/galetahub/ckeditor">Github</a></strong></p>

<p>上傳的部分我是使用 <strong><a href="https://github.com/galetahub/ckeditor#activerecord--carrierwave">ActiveRecord + Carrierwave</a></strong></p>

<h2>Step1. Migration</h2>

<p>首先，我們先從model開始，當你跑完</p>

<pre><code>rails generate ckeditor:install --orm=active_record --backend=carrierwave
</code></pre>

<p>會幫你建立model，以我的case來說，會建立<strong><em>db/migrate/20141204171531_create_ckeditor_assets.rb</em></strong></p>

<p>在這邊，我要先另外加入</p>

<pre><code>  t.integer :owner_id 
  t.string  :owner_type, :limit =&gt; 30  
</code></pre>

<p>其中<strong>owner_type</strong>是要記錄哪個model</p>

<p><strong>owner_id</strong>是要記錄model的ID</p>

<p>舉例來說，如果你的建立產品上稿，會被記錄到 model 的就是：<strong>Product</strong>，另外ID可能是：<strong>999</strong></p>

<p>所以記錄到 owner_type 就會是 &#8220;Product&#8221; ，另外owner_id 就是：&#8221;999&#8221;</p>

<p>最後別忘記，</p>

<pre><code>rake db:migrate
</code></pre>

<h2>Step2. [Important] Controller</h2>

<p>接下來步驟，會有點麻煩</p>

<p>因為我不想要用ckeditor 預設的 <strong>pictures_controller.rb</strong> 來處理上傳的動作，所以&#8230;.</p>

<p>來看一下，麻煩點在於</p>

<p>我們是後台需要實作 ckeditor，所以controller要放在 <strong>/cooladmin/</strong> 裡面</p>

<p>這個&#8230;搞了我超久，不過也是因為這樣，讓我比較了解這個機制</p>

<p>好吧！ 那就開始吧！！！</p>

<pre><code>rails g controller cooladmin/ckeditor_pictures
</code></pre>

<h3>首先這個controller 必需繼承 <strong>Ckeditor::PicturesController</strong></h3>

<p>所以&#8230;</p>

<pre><code>class Cooladmin::CkeditorPicturesController &lt; Ckeditor::PicturesController
</code></pre>

<p>那這個<strong><a href="https://github.com/galetahub/ckeditor/blob/master/app/controllers/ckeditor/pictures_controller.rb">Ckeditor::PicturesController</a></strong>原本怎麼寫，就請看他們官網</p>

<p>由於我們不希望使用ckeditor 的before_action，所以，我們這邊都把它skip掉</p>

<pre><code>skip_before_filter :find_asset
skip_before_filter :ckeditor_authorize!
skip_before_filter :authorize_resource
</code></pre>

<h3>第一個action : <strong>index</strong></h3>

<p>這個是給當使用者點選&#8221;瀏覽伺服器&#8221;時呼叫的</p>

<p><img src='https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/%5BHOWTO%5D-%20%E5%9C%A8Ruby%20on%20Rails%20%E5%AF%A6%E4%BD%9CCkeditor%E4%B8%8A%E5%82%B3%E5%9C%96%E7%89%87%E5%88%B0%E5%90%84%E5%80%8B%E7%8D%A8%E7%AB%8B%E7%9A%84%E8%B3%87%E6%96%99%E5%A4%BE/ckeditor_controller_index_target_1.png'></p>

<p>我的寫法是：</p>

<pre><code>def index
  @pictures = Ckeditor::Paginatable.new(pictures).page(params[:page])
  respond_with(@pictures,layout: @pictures.first_page?)
end 
</code></pre>

<p>那 <strong>pictures</strong> 這個從那裡來？</p>

<pre><code>private

  def pictures
    @pictures ||= if owner
                Ckeditor::CkeditorPicture.by_owner(owner)
                    else
                    Ckeditor::CkeditorPicture.orphan
                    end
  end

  def owner
    @owner ||=  case 
                when params[:owner_type].present? &amp;&amp; params[:owner_id].present? 
                  params[:owner_type].singularize.classify.constantize.find(params[:owner_id])
                else
                  nil
                end
  end
</code></pre>

<p>ps. <strong>Ckeditor::CkeditorPicture.by_owner(owner)</strong> 這個model是我改裝model，下個章節會介紹，by_owner就是去拿到屬於這個owner的image，那owner怎麼來呢？</p>

<p>主要透過 url 取得目前是在哪個model的哪個ID被啟動ckeditor，這樣的話，就只會去抓屬於這個modal和他所屬的id，以下面那個url為例，他會去找ckeditor_assets裡頭的屬於<strong>owner_type</strong>為<strong>Product</strong>以及<strong>owner_id</strong>為<strong>1</strong>的所有照片</p>

<p><strong> https://XXX.XXX.XXX/cooladmin/ckeditor_pictures?owner_id=2&amp;owner_type=Product&amp;CKEditor=product_content&amp;CKEditorFuncNum=1&amp;langCode=zh </strong></p>

<h3>第二個action : <strong>create</strong></h3>

<p>照片上傳上來後，透過這個action去接</p>

<pre><code>def create
  if owner.present?
    @picture = Ckeditor::CkeditorPicture.new(owner: @owner) 
  else
    @picture = Ckeditor::CkeditorPicture.new(owner_type: params[:owner_type]) 
  end
  respond_with_asset(@picture)
end
</code></pre>

<p>判斷如果 有owner存在的話，就把這個照片new進去，並設定owner進去</p>

<p>不然的話，就在建立照片時，就只設定<strong>owner_type</strong> (這邊有個問題，我還不知道怎麼解決，所以只好先丟個owner_type給他)</p>

<h3>第三個action : <strong>destroy</strong></h3>

<p>很明顯就是去刪除照片～但是&#8230;..基本上這個方法不會被呼叫到&#8230;.因為ckeditor會default去找</p>

<p>因為我們儲存到 <strong>ckeditor_assets</strong> table時，有一個欄位是 <strong>type</strong>，因為我們在new還有create時用的是 <strong>Ckeditor::CkeditorPicture.new(owner: @owner)</strong> 所以他的type就會是&#8230;.<strong>Ckeditor::CkeditorPicture</strong>，所以在刪除的時候，
他default會去找有沒有這個controller => <strong>app/controllers/ckeditor_pictures_controller.rb</strong></p>

<p>這樣當然是沒有，因為我們是寫在 /cooladmin/底下啊～～～</p>

<p>所以&#8230;小弟我很弱，還不知道怎麼解&#8230;.所以只好copy一份出來&#8230;.</p>

<pre><code>def destroy
  @picture ||= Ckeditor::CkeditorPicture.find(params[:id])
  @picture.destroy
  respond_with(@picture,location: pictures_path)
end
</code></pre>

<p>完整版：<strong>app/controllers/cooladmin/ckeditor_pictures_controller.rb</strong></p>

<p>基本上這個contoller，我是直接copy一份到<strong>app/controllers/ckeditor_pictures_controller.rb</strong></p>

<pre><code>class Cooladmin::CkeditorPicturesController &lt; Ckeditor::PicturesController
  skip_before_filter :find_asset
  skip_before_filter :ckeditor_authorize!
  skip_before_filter :authorize_resource

  def index
    @pictures = Ckeditor::Paginatable.new(pictures).page(params[:page])
    respond_with(@pictures,layout: @pictures.first_page?)
  end

  def create
    if owner.present?
      @picture = Ckeditor::CkeditorPicture.new(owner: @owner) 
    else
      @picture = Ckeditor::CkeditorPicture.new(owner_type: params[:owner_type]) 
    end
    respond_with_asset(@picture)
  end

  def destroy
    @picture ||= Ckeditor::CkeditorPicture.find(params[:id])
    @picture.destroy
    respond_with(@picture,location: pictures_path)
  end

  private

  def pictures
    @pictures ||= if owner
                    Ckeditor::CkeditorPicture.by_owner(owner)
                  else
                    Ckeditor::CkeditorPicture.myupload_orphan(current_employee)
                  end
  end


  def owner
    @owner ||=  case 
                when params[:owner_type].present? &amp;&amp; params[:owner_id].present? 
                  params[:owner_type].singularize.classify.constantize.find(params[:owner_id])
                else
                  nil
                end
  end

end
</code></pre>

<h2>Step3. [Important] Model</h2>

<p>這邊我是直接改ckeditor幫我產生的model <strong>models/ckeditor/picture.rb</strong></p>

<p>我把它改成 <strong>models/ckeditor/ckeditor_picture.rb</strong></p>

<pre><code>mv models/ckeditor/picture.rb models/ckeditor/ckeditor_picture.rb
</code></pre>

<p>幾個重點：</p>

<ul>
<li>因為這個picture基本上會隸屬於不同的model 然後他們之間都是透過 owner來做type</li>
</ul>


<p>所以</p>

<pre><code>belongs_to :owner, polymorphic: true
</code></pre>

<ul>
<li>幾個簡單scope</li>
</ul>


<p>在看這個scope我們來看一下，db裡面存的主要欄位內容</p>

<table>
<thead>
<tr>
<th></th>
<th> assetable_id </th>
<th> assetable_type </th>
<th> type                      </th>
<th> owner_id </th>
<th> owner_type </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> 1            </td>
<td> Employee       </td>
<td> Ckeditor::CkeditorPicture </td>
<td> 2        </td>
<td> Product    |</td>
</tr>
</tbody>
</table>


<p>assetable_type => 這個資料的上傳者class</p>

<p>type      => 這張照片是哪個model new進來的</p>

<p>owner_type    => 這張照片被用在哪個class下</p>

<p>看完表格就知道我的scope在幹嘛了～</p>

<pre><code>scope :myupload_orphan, -&gt; (employee_id) {where(assetable_id: employee_id, owner_id: nil)}
scope :by_owner_type, -&gt; (owner,employee_id) {where(owner_type: owner.class.name, owner_id: nil, assetable_id: employee_id)}
scope :by_owner, -&gt; (owner) { where(owner_id: owner.id)}
</code></pre>

<p>完整程式：</p>

<pre><code>class Ckeditor::CkeditorPicture &lt; Ckeditor::Asset
  belongs_to :owner, polymorphic: true
  mount_uploader :data, CkeditorPictureUploader, :mount_on =&gt; :data_file_name

  scope :myupload_orphan, -&gt; (employee_id) {where(assetable_id: employee_id, owner_id: nil)}
  scope :by_owner_type, -&gt; (owner,employee_id) {where(owner_type: owner.class.name, owner_id: nil, assetable_id: employee_id)}
  scope :by_owner, -&gt; (owner) { where(owner_id: owner.id)}

  def url_content
    url(:content)
  end
end
</code></pre>

<h2>Step4. 修改ckeitor 設定</h2>

<p>我是使用coffeescript</p>

<pre><code>$(document).on 'ready page:load', -&gt;
  $('[data-content-editor]').each -&gt;
    $this = $(this)
    CKEDITOR.replace(
      this
      allowedContent: true

  # 設定要處理image處理
      filebrowserImageBrowseUrl: $this.data('upload-url')

      filebrowserImageUploadUrl: $this.data('upload-url')
    )
</code></pre>

<h2>Step5. 修改用到ckeditor的View</h2>

<p>我是使用simple_form</p>

<pre><code>= f.input :content, label: '內容', input_html: { class: 'form-control', data: {content_editor: true, upload_url: upload_url_for(@product)} } 
</code></pre>

<p>upload_url_for請看下面</p>

<h2>Step6. helper</h2>

<p>寫這個helper的原因是因為我希望不同的model都可以使用</p>

<p><strong>app/helpers/cooladmin/admin_helper.rb</strong></p>

<pre><code>module Cooladmin::AdminHelper
  def upload_url_for(resource)
    if resource.new_record?
      cooladmin_ckeditor_pictures_path(:owner_type =&gt; resource.class.name)
    else
      cooladmin_ckeditor_pictures_path(:owner_type =&gt; resource.class.name, :owner_id =&gt; resource.id)
    end
  end
end
</code></pre>

<h2>Step7. Route</h2>

<pre><code>Rails.application.routes.draw do
  # mount Ckeditor::Engine =&gt; '/uradmin/ckeditor'

  resources :ckeditor_pictures, only: [:index, :create, :destroy]

  namespace :cooladmin do
    # ....略
    # ckeditor使用
    resources :ckeditor_pictures, only: [:index, :create, :destroy]
  end

end
</code></pre>

<h2>完成！！！！！！！！！！！</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[HowTo] - Implement autocomplete feature in elasticsearch using soulmate.js in Ruby on Rails application]]></title>
    <link href="http://ccaloha.cc/blog/2014/12/03/howto-implement-autocomplete-feature-in-elasticsearch-using-soulmate-dot-js-in-ruby-on-rails-application/"/>
    <updated>2014-12-03T07:50:57+08:00</updated>
    <id>http://ccaloha.cc/blog/2014/12/03/howto-implement-autocomplete-feature-in-elasticsearch-using-soulmate-dot-js-in-ruby-on-rails-application</id>
    <content type="html"><![CDATA[<p>先說明一下需求，你希望使用者在搜尋框框打字的時，希望可以給他推薦就像&#8230;.</p>

<p><img alt="elasticsearch autocomple sample" src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/%5BHowTo%5D%20-%20Implement%20autocomplete%20feature%20in%20elasticsearch%20using%20soulmate.js%20in%20Ruby%20on%20Rails%20application/f1.png"></p>

<p>故這篇文章，你可以知道，如何透過elasticsearch 達成 自動化推薦的功能！</p>

<p>以及 如何將此功能與 soulmate.js結合 (因為我之前是用soulmate來實作，但是會推薦的詞，一定是user有打過有搜尋過的字)</p>

<!-- more -->


<h2>Step0. 你可以先玩看看 soulmate.js</h2>

<p><a href="http://josephndungu.com/tutorials/fast-autocomplete-search-terms-rails">FAST AUTOCOMPLETE SEARCH TERMS - RAILS</a></p>

<p>另外這篇主要是參考</p>

<p><a href="https://shellycloud.com/blog/2013/10/adding-search-and-autocomplete-to-a-rails-app-with-elasticsearch">Adding search and autocomplete to a Rails app with Elasticsearch</a></p>

<h2>Step1. Searchkick</h2>

<p>下面加入到 <strong><em>Gemfile</em></strong>:</p>

<pre><code>gem 'searchkick'
</code></pre>

<h2>Step2. Routing</h2>

<p>因為我是要在產品搜尋時做自動推薦，所以在product的routing 加上 autocomplete</p>

<p>下面加入到 <strong><em>config/routes.rb</em></strong></p>

<pre><code>  #下面那行之前沒有elasticsearch幫忙，直接用soulmate實作時的做法
  #mount Soulmate::Server, :at =&gt; "/autocomplete" 

  resources :products do
    collection do
      get :autocomplete
      get :search
    end
  end 
</code></pre>

<h2>Step3. Model</h2>

<p>為了要吐給soulmate json (你可以參考：https://github.com/seatgeek/soulmate#loading-items)</p>

<p>下面加上在<strong><em>app/models/product.rb</em></strong></p>

<pre><code># 讓elasticsearch知道這兩個欄位要做autocomplete功能(他會針對這兩個欄位做不一樣的index)
searchkick autocomplete: ['name', 'description']


# 到時候要吐給soulmate的json格式，你可以參考：https://github.com/seatgeek/soulmate#loading-items)

def to_soulmate
    {
      "term" =&gt; "#{brand.name}-#{name}",
      "id" =&gt; "#{product_id}",
      "score" =&gt; "",
      "data" =&gt; {
        "link" =&gt; "/product_searchs/product?keyword=#{name}"
      }
    }
end
</code></pre>

<p>另外我有create 一個<strong>keyword</strong>的model這邊就不特別說了～controller會用到</p>

<h2>Step4. Controller</h2>

<p>關鍵！</p>

<p>加在 <strong><em>app/controllers/products_controller.rb</em></strong></p>

<pre><code>def autocomplete
    # searchkick做autocomplete
    @products = Product.search params[:term], limit: 10, fields: [{"description" =&gt; :word},{"name" =&gt; :word}]

    # 為了拼出讓soulmate知道的url
    callback_str = params[:callback]
    return_data = {
        "term" =&gt;  "#{params[:term]}", 
        "results" =&gt; {
            "keyword" =&gt;  @products.map(&amp;:to_soulmate)
        }
    }
    # 以下是為了拼出給soulmate的callback
    render json: callback_str + "(" + "#{return_data.to_json}" + ")"
end

def search
    if params[:keyword].present?
        @products = Product.searchkick(params[:keyword],sort,search_page)

        if @products.present?
            @keyword = Keyword.find_or_create_by(name: "#{params[:keyword]}") do |k|
                k.score = 0
                k.url = "/products/search?keyword=#{params[:keyword]}"
                k.keyword_type = "Keyword"
            end
            @keyword.update_attribute(:score, @keyword.score+=1) #代表多搜尋了一次
            # remove_from_soulmate(@keyword) #已用不到
            # load_into_soulmate(@keyword)  #已用不到
        end
    end
end

def load_into_soulmate(keyword)
    loader = Soulmate::Loader.new("#{keyword.keyword_type}")
    loader.add("term" =&gt; keyword.name, "id" =&gt; keyword.id, "score" =&gt; keyword.score, "data" =&gt; { "link" =&gt; "#{keyword.url}"})
end

def remove_from_soulmate(keyword)
    loader = Soulmate::Loader.new("#{keyword.keyword_type}")
  loader.remove("id" =&gt; keyword.id)
end
</code></pre>

<p>這邊很重要的是，你使用soulmate.js去做autocomplete時，他會丟出一串callback給server，基本上你的response也要包含這個callback，我覺得很像jsonp</p>

<p>[注意！] 我把load_into_soulmate還有remove_from_soulmate留著只是單純給你看之前的做法，</p>

<p>但是我還是有保留keyword的model這樣我才知道哪些關鍵字被打了最多次！(當然你可以用GA但是由於隱私權設定，你很多會看到not provided&#8230;.囧)</p>

<h2>Step5. View</h2>

<p>加上你想要搜尋的頁面，我們希望使用者可以在所有網頁都看到，所以是放在</p>

<p><strong><em>app/views/layouts/application.html.slim</em></strong></p>

<pre><code>= text_field_tag 'keyword', '輸入產品關鍵字', class: "form-control"
= button_tag "搜尋", id: "product_search", class: "btn btn-default"
</code></pre>

<h2>Step6. javascript</h2>

<pre><code># 這是要給product_search點擊後使用
$("#product_search").click(function(){
    window.location = '&lt;%= search_products_path %&gt;?keyword=' + $("#keyword").val();
})

#這是soulmate用法：注意我把url改掉了！
$('#keyword').soulmate({
    url: '/products/autocomplete',
    types: ['product','review','keyword'],
    renderCallback : render,
    selectCallback : select,
    minQueryLength : 1,
    maxResults     : 10,
    timeout:    5000
})
</code></pre>

<h2>完成！！！</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[蝦米！GA也可做A/B Test]]></title>
    <link href="http://ccaloha.cc/blog/2014/11/30/ga-how-to-setup-a-slash-b-test-using-ga/"/>
    <updated>2014-11-30T22:35:34+08:00</updated>
    <id>http://ccaloha.cc/blog/2014/11/30/ga-how-to-setup-a-slash-b-test-using-ga</id>
    <content type="html"><![CDATA[<p>需求： 我想要提升大家點選連結進入&#8221;GA分類&#8221;頁面的點擊率！</p>

<p>於是乎，我設計出了兩種頁面，想來看看哪種點擊率比較好！</p>

<p>先分別來看兩個頁面：</p>

<p><a href="http://ccaloha.herokuapp.com/google-analytics/GA_ABtest/original.html">主頁面</a></p>

<p><a href="http://ccaloha.herokuapp.com/google-analytics/GA_ABtest/test.html">測試頁面</a></p>

<p>但&#8230;</p>

<p>我要怎麼樣讓這兩個頁面自動變換，讓我做測試勒？</p>

<p>這時候，你就需要</p>

<h3>Google analytics</h3>

<!--more-->


<p>附上我這週報告的內容</p>

<iframe src="http://prezi.com/embed/ofpx1llymkyt/?bgcolor=ffffff&amp;lock_to_path=0&amp;autoplay=0&amp;autohide_ctrls=0&amp;features=undefined&amp;token=undefined&amp;disabled_features=undefined" width="550" height="400" frameBorder="0" webkitAllowFullScreen mozAllowFullscreen allowfullscreen></iframe>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[HOWTO] Using ElasticSearch in Ruby on Rails and setup remote ES server via Vagrant]]></title>
    <link href="http://ccaloha.cc/blog/2014/11/27/howto-using-elasticsearch-in-ruby-on-rails-and-setup-remote-es-server-via-vagrant/"/>
    <updated>2014-11-27T07:45:20+08:00</updated>
    <id>http://ccaloha.cc/blog/2014/11/27/howto-using-elasticsearch-in-ruby-on-rails-and-setup-remote-es-server-via-vagrant</id>
    <content type="html"><![CDATA[<p>首先，要先感謝 &#8220;老王&#8221;，和 &#8220;Marz&#8221;哥，給我參考他們的Elasticsearch的文件！</p>

<p>安裝部分，就是參考他們的操作！</p>

<p>這邊最主要的不一樣，是設定遠端的Elasticsearch機器！</p>

<p>改天我會補上 如何實作 &#8220;搜尋字詞推薦&#8221;，而且是整合soulmate歐！！</p>

<!-- more -->


<h2>Mac本機開發</h2>

<h3>安裝 elastic search</h3>

<pre><code>brew install elasticsearch
</code></pre>

<h3>連結</h3>

<pre><code>ln -sfv /usr/local/opt/elasticsearch/*.plist ~/Library/LaunchAgents
</code></pre>

<h3>啟動</h3>

<pre><code>launchctl load ~/Library/LaunchAgents/homebrew.mxcl.elasticsearch.plist
</code></pre>

<h3>關閉</h3>

<pre><code>launchctl unload ~/Library/LaunchAgents/homebrew.mxcl.elasticsearch.plist
</code></pre>

<h3>Run ElasticSearch</h3>

<pre><code>export JAVA_HOME="/Library/Internet Plug-Ins/JavaAppletPlugin.plugin/Contents/Home"
elasticsearch

(或是)

elasticsearch --config=/usr/local/opt/elasticsearch/config/elasticsearch.yml  
</code></pre>

<h3>測試是否安裝成功</h3>

<pre><code>curl -X GET http://localhost:9200
</code></pre>

<p>你應該會看到</p>

<pre><code>{
  "status" : 200,
  "name" : "Rage",
  "version" : {
    "number" : "1.3.2",
    "build_hash" : "dee175dbe2f254f3f26992f5d7591939aaefd12f",
    "build_timestamp" : "2014-08-13T14:29:30Z",
    "build_snapshot" : false,
    "lucene_version" : "4.9"
  },
  "tagline" : "You Know, for Search"
}
</code></pre>

<h3>Code 要加入</h3>

<p>新增一個檔案</p>

<p><strong>lib/tasks/elasticsearch.rake</strong></p>

<p>寫入</p>

<pre><code>require 'elasticsearch/rails/tasks/import'
</code></pre>

<p>修改<strong>Gemfile</strong>，加入</p>

<pre><code>gem 'elasticsearch-rails'
gem 'elasticsearch-model' 
</code></pre>

<h3>跑index</h3>

<p>詳情請參考：<strong>Gem: </strong><a href="https://github.com/elasticsearch/elasticsearch-rails/tree/master/elasticsearch-rails">elasticsearch-rail</a></p>

<pre><code>bundle exec rake environment elasticsearch:import:all
</code></pre>

<p>如果只需要import一個model</p>

<pre><code>bundle exec rake environment elasticsearch:import:model CLASS='Article'
</code></pre>

<p>如果只需要import某些特定的scope</p>

<pre><code>bundle exec rake environment elasticsearch:import:model CLASS='Article' SCOPE='published'
</code></pre>

<h3>清除index</h3>

<pre><code>Article.__elasticsearch__.client.indices.delete index: Article.index_name rescue nil
</code></pre>

<h2>安裝elasticsearch 在Ubuntu 裡面</h2>

<h3>使用vagrant 起三檯機器(用來模擬正式環境)</h3>

<p>請查看前半部</p>

<p><a href="http://ccaloha.cc/blog/2014/09/19/howto-using-sunspot-access-remote-solr-instance-ubuntu-14-dot-04-in-ruby-on-rails-using-vagrant/">HOWTO - Using Sunspot to Access Remote Solr instance(Ubuntu 14.04) in Ruby on Rails Using Vagrant</a></p>

<h3>安裝 elascticsearch</h3>

<pre><code>vagrant ssh search 
sudo apt-get install openjdk-7-jre-headless -y
sudo wget -O - http://packages.elasticsearch.org/GPG-KEY-elasticsearch | sudo apt-key add -
</code></pre>

<h3>編輯source list</h3>

<pre><code>sudo vim /etc/apt/sources.list
</code></pre>

<p>把下面的code放進去</p>

<pre><code>  deb http://packages.elasticsearch.org/elasticsearch/1.3/debian stable main
</code></pre>

<p>繼續安裝</p>

<pre><code>  sudo apt-get update
  sudo apt-get install elasticsearch
  sudo update-rc.d elasticsearch defaults 95 10
  sudo /etc/init.d/elasticsearch start
</code></pre>

<h2>Ruby on Rails 部分</h2>

<h3>更改producion deploy的東東</h3>

<p><strong>config/deploy/production.rb</strong></p>

<pre><code>  role :app, %w{apps@33.33.13.10}
  role :web, %w{apps@33.33.13.10}
  role :db,  %w{apps@33.33.13.11}
  role :crontaber, %w{apps@33.33.13.10}
  set :rails_env, :production
  set :unicorn_rack_env, :production
  set :branch, 'feature/update_search_engine_to_elasticsearch'
</code></pre>

<p>我故意把ip改成 vagrant的ip</p>

<p>另外，branch也用成我自己測試的branch: <strong>feature/update_search_engine_to_elasticsearch</strong></p>

<h2>如何設定將elasticsearch 連到別台機器</h2>

<ol>
<li><p>新增一個 <strong>config/elasticsearch.yml</strong></p>

<pre><code> default: &amp;default
   host: 127.0.0.1:9200

 development:
   &lt;&lt;: *default
   host: 127.0.0.1:9200

 test:
   &lt;&lt;: *default

 production:
   &lt;&lt;: *default
   host: 33.33.13.12:9200
</code></pre></li>
<li><p>在application.rb加入</p>

<pre><code> es = YAML.load(File.open("#{Rails.root}/config/elasticsearch.yml"))[Rails.env]

   elasticsearch_config = {
       host: es["host"],
       transport_options: {
       request: { timeout: 5 }
       },
   }
   Elasticsearch::Model.client = Elasticsearch::Client.new(elasticsearch_config)
</code></pre></li>
<li><p>因為我的product需要做搜尋，所以在Product model 我這樣寫</p></li>
</ol>


<p>  (ps. elasticsearch 真的是博大精深，我沒有時間去深入專研，以下的指令是我try出最符合我需要的搜尋結果，所以大家可參考參考)</p>

<pre><code>def self.essearch(query,sort,page)
  if sort == 'relevance'

    results = __elasticsearch__.search(
      {
        query: {
          filtered: {
            filter: {
              range: { product_price_min: { "gt" =&gt; 0} }
             }, 
            query: {
              bool: {
                must: [
                  multi_match: {
                    query: query,
                    type:  "phrase",
                    fields: ["product_cname^10", "product_ename^10",'product_description', 'product_keyword']
                  }
                ]
              }
            }
          }
        },
        "sort" =&gt; [
          "_score",
          {"product_urcosme_exp" =&gt; {"order" =&gt; "desc"} } 
        ],
        "from" =&gt; (page.to_i-1)*5,
        "size" =&gt; 5          
      }
    )
  else
    # 因為不是精準搜尋，所以這邊的排序就真的會依照我們給他的sort，
    # 但是你總不希望，搜尋面膜，結果第一個結果是：淨膚儀，就因為他的上市時間最晚....囧～
    # 所以，我還是希望第一個看到的結果是以關鍵字有出現的為佳，所以我多使用了filter的功能
    results = __elasticsearch__.search(
      {
        query: {
          filtered: {
            filter: {
              range: { product_price_min: { "gt" =&gt; 0} }
             },
            filter: {
               exists: { field: "product_keyword" }
             },
            query: {
              bool: {
                must: [
                  multi_match: {
                    query: query,
                    type:  "cross_fields",
                    fields: ['product_cname', 'product_ename'],
                    operator:   "and", 
                    #minimum_should_match: '30%'
                  }
                ],
                should: [
                  { match: { "product_description" =&gt;  query}},
                  { match: { "product_keyword" =&gt; query }}
                ],
              }
            }
          }
        },
        "sort" =&gt; [
          {"#{sort}" =&gt; {"order" =&gt; "#{sort == "product_price_min"? 'asc' : 'desc'}"} } , 
           "_score",
          { "product_cname" =&gt; "desc" }
        ],
        "from" =&gt; (page.to_i-1)*5,
        "size" =&gt; 5        
      }
    )
  # 這邊目的是為了如果上面都沒有搜尋結果才做的比較rough的搜尋
  if results.results.size == 0
    results = __elasticsearch__.search(
      {
        query: {
          filtered: {
            filter: {
              range: { product_price_min: { "gt" =&gt; 0} }
             },
            query: {
              bool: {
                must: [
                  multi_match: {
                    query: query,
                    type:  "cross_fields",
                    fields: ['product_cname', 'product_ename','product_description','product_keyword'],
                    operator:   "and"
                  }
                ]
              }
            }
          }
        },
        "sort" =&gt; [
          {"#{sort}" =&gt; {"order" =&gt; "#{sort == "product_price_min"? 'asc' : 'desc'}"} } , 
           "_score",
          { "product_cname" =&gt; "desc" }
        ],
        "from" =&gt; (page.to_i-1)*5,
        "size" =&gt; 5          
      }
    )
  end
  end
  return results
end
</code></pre>

<ol>
<li><p>在product的controller</p>

<p>   @products = Product.essearch(params[:keyword],params[:sort],params[:page])</p>

<p>   @products =  search.results.results</p>

<p> 接下來就是丟給view顯示了～我就不提了～</p></li>
</ol>


<h3>接下來就是deploy加上看看有沒有成功摟</h3>

<pre><code>cap production deploy #因為"config/deploy/production.rb"有改成vagrant設定，所以請放心～
vagrant ssh search    # 登入你的搜尋機器
elasticsearch         # 把elasticsearch 服務跑起來
vagrant ssh app       # 登入跑服務的機器
cd 你的專案            
bundle exec rake environment elasticsearch:import:all  #跑index，這邊如果有成功，代表你已經連過去遠端了！
</code></pre>

<h3>完成！</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[HOWTO] Using Sunspot to access remote Solr instance(Ubuntu 14.04) in Ruby on Rails using Vagrant]]></title>
    <link href="http://ccaloha.cc/blog/2014/09/19/howto-using-sunspot-access-remote-solr-instance-ubuntu-14-dot-04-in-ruby-on-rails-using-vagrant/"/>
    <updated>2014-09-19T20:16:23+08:00</updated>
    <id>http://ccaloha.cc/blog/2014/09/19/howto-using-sunspot-access-remote-solr-instance-ubuntu-14-dot-04-in-ruby-on-rails-using-vagrant</id>
    <content type="html"><![CDATA[<p> 首先，當然要感謝網路上一堆大神的資源</p>

<p> 特別是：</p>

<p> <a href="https://gorails.com/setup/ubuntu/14.04">Setup Ruby On Rails on
Ubuntu 14.04 Trusty Tahr</a></p>

<p><a href="https://gorails.com/deploy/ubuntu/14.04">Deploy Ruby On Rails on
Ubuntu 14.04 Trusty Tahr</a></p>

<p><a href="https://www.digitalocean.com/community/tutorials/how-to-install-solr-on-ubuntu-14-04">How to Install Solr on Ubuntu 14.04</a></p>

<p><a href="https://www.digitalocean.com/community/tutorials/how-to-install-and-use-redis">How To Install and Use Redis</a></p>

<p><a href="http://gogojimmy.net/2013/05/26/vagrant-tutorial/">[教學]使用Vagrant練習環境佈署</a></p>

<p><a href="https://www.digitalocean.com/community/tutorials/how-to-install-and-use-memcache-on-ubuntu-14-04">How To Install and Use Memcache on Ubuntu 14.04</a></p>

<p>一開始之前，來說一下，我的目標：</p>

<p>起一台 WEB server 和 Solr server(search engine)，Database則是使用 Mac裡面的 mysql(因為我開發時把DB資料都建在那邊了)，讓這三方彼此co work !</p>

<h2>心得分享</h2>

<blockquote><p>其實本機端的Sunspot他其實也是透過把指令丟給localhost:8983的搜尋引擎做搜尋，現在只是要把丟到localhost:8983換成另外一個遠端的IP。所以，對於Sunspot來說，就是改個config檔。至於做Index的話，我本來以為要讓遠端的搜尋引擎可以access到DB，然後登入到搜尋引擎的機器去設定？。但&#8230;.根本就不用，一樣，Sunspot已經幫你做掉了，所以基本上，只要你的Rail專案設定的database.yml可以access，Sunspot會自動幫你對應 DB和 遠端的搜尋引擎做index，所以沒有想像中的困難！</p></blockquote>

<p>了解大概流程概念後，那就來實作吧</p>

<h2>使用Vagrant，模擬多機器的環境</h2>

<p>當然要起很多機器，當然是要使用  <strong><a href="https://www.vagrantup.com/">Vagrant</a> + <a href="https://www.virtualbox.org/">VirtualBox</a></strong></p>

<p>那Vagrant的部分，步驟說明就交給Jimmy大大了 <a href="http://gogojimmy.net/2013/05/26/vagrant-tutorial/">[教學]使用Vagrant練習環境佈署</a>！</p>

<p>和Jimmy大大，不一樣的地方大概就是一些有部分調整的lib和script</p>

<p>這邊直接打我的操作流程：</p>

<ol>
<li>下載Vagrant，<a href="http://www.vagrantup.com/downloads">點我到官網下載連結</a></li>
<li>下載Virtual Box，<a href="https://www.virtualbox.org/wiki/Downloads">點我到官網下載</a></li>
<li><p>抓image</p>

<pre><code> vagrant box add Ubuntu-14-04-64bit https://cloud-images.ubuntu.com/vagrant/trusty/current/trusty-server-cloudimg-amd64-vagrant-disk1.box
</code></pre></li>
<li><p>初始化</p>

<pre><code> vagrant init Ubuntu-14-04-64bit
</code></pre></li>
<li><p>把機器Run起來</p>

<pre><code>vagrant up 
</code></pre></li>
<li><p>登入機器</p>

<pre><code>vagrant ssh 
</code></pre></li>
<li><p>安裝Ruby 環境(這邊我有小修一點東西，讓指令跑起來ok)</p>

<pre><code> curl -L https://gist.githubusercontent.com/alChaCC/f1295f5024eb4de71008/raw/bee55fd048b274b40095c6e645aa5ca38721fcc2/bootstrap-chef-solo.sh | sh
</code></pre></li>
<li><p>登出 機器</p>

<pre><code>exit    
</code></pre></li>
<li><p>打包這個Box</p>

<pre><code> vagrant package
</code></pre></li>
<li><p>開一個mobile的box</p>

<pre><code> vagrant box add ubuntu-14_04 package.box
</code></pre></li>
<li><p>設定Vagrantfile 讓你可一次起N檯機器(2014/9/17這是目前最新的設定)</p>

<pre><code> vim Vagrantfile
</code></pre></li>
</ol>


<p>加入：</p>

<pre><code>config.vm.define :app do |app_config|
      app_config.vm.provider :virtualbox do |vb|
        vb.customize ["modifyvm", :id, "--name", "app", "--memory", "1024"]
      end
      app_config.vm.box = "Ubuntu-14-04-64bit"
      app_config.vm.host_name = "app"
      app_config.vm.network "private_network", ip: "33.33.13.10"
  end

  config.vm.define :search do |search_config|
    search_config.vm.provider :virtualbox do |vb|
        vb.customize ["modifyvm", :id, "--name", "search", "--memory", "1024"]
    end
    search_config.vm.box = "Ubuntu-14-04-64bit"
    search_config.vm.host_name = "search"
    search_config.vm.network "private_network", ip: "33.33.13.12"
  end
</code></pre>

<h2>安裝機器&#8230;..using Chef &#8230;.But</h2>

<p>照理說這邊應該跟得上時代，使用 chef_solo, knife 來安裝才是&#8230;.</p>

<p>但&#8230;由於時間的關係，實在沒時間玩，你懂得～專案還是要Go啊～ 何況是，我必須在兩天之內試出東西</p>

<p>Anyway, 傻人只好用傻方法</p>

<h2>安裝 Rails 環境 在app機器上</h2>

<p>Ruby 2.1.2  + rvm</p>

<ol>
<li><p>登入</p>

<pre><code> vagrant ssh app
</code></pre></li>
<li><p>加上 user</p>

<pre><code> sudo adduser deploy
 sudo adduser deploy sudo
 su deploy
</code></pre></li>
<li></li>
<li><p>安裝基本lib</p>

<pre><code> sudo apt-get update
 sudo apt-get install git-core curl zlib1g-dev build-essential libssl-dev libreadline-dev libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt1-dev libcurl4-openssl-dev python-software-properties
</code></pre></li>
<li><p>安裝rvm</p>

<pre><code> sudo apt-get install libgdbm-dev libncurses5-dev automake libtool bison libffi-dev
 curl -L https://get.rvm.io | bash -s stable
 source ~/.rvm/scripts/rvm
 echo "source ~/.rvm/scripts/rvm" &gt;&gt; ~/.bashrc
 rvm install 2.1.2
 rvm use 2.1.2 --default
 ruby -v
 echo "gem: --no-ri --no-rdoc" &gt; ~/.gemrc
</code></pre></li>
<li><p>安裝Rails</p>

<pre><code> sudo add-apt-repository ppa:chris-lea/node.js
 sudo apt-get update
 sudo apt-get install nodejs
 gem install rails
</code></pre></li>
<li><p>安裝  nginx + Passenger</p>

<pre><code> sudo apt-get install apt-transport-https
 sudo sh -c "echo 'deb https://oss-binaries.phusionpassenger.com/apt/passenger trusty main' &gt;&gt; /etc/apt/sources.list.d/passenger.list"
 sudo chown root: /etc/apt/sources.list.d/passenger.list
 sudo chmod 600 /etc/apt/sources.list.d/passenger.list
 sudo apt-get update
 sudo apt-get install nginx-full passenger
</code></pre></li>
<li><p>修改 nginx 檔案</p>

<pre><code> sudo vim /etc/nginx/nginx.conf
</code></pre>

<p> 加上</p>

<pre><code> passenger_root /usr/lib/ruby/vendor_ruby/phusion_passenger/locations.ini;
 passenger_ruby /home/deploy/.rvm/wrappers/ruby-2.1.2/ruby;
</code></pre></li>
<li><p>修改 Nginx Host</p>

<pre><code> sudo vim /etc/nginx/sites-enabled/default
</code></pre>

<p> 改上</p>

<pre><code> server {
 listen 80 default_server;
 listen [::]:80 default_server ipv6only=on;

 root /home/deploy/我的資料夾名稱/current/public;
 # index index.html index.htm;
 rails_env production;
 passenger_enabled on;
 # Make site accessible from http://localhost/
 server_name 33.33.13.10; # 這邊我讓他跟vagrant機器ip一樣

 error_page   500 502 503 504  /50x.html;
 location = /50x.html {
     root   html;
 }
</code></pre></li>
<li><p>安裝Redis</p>

<pre><code> sudo apt-get install tcl8.5
 wget http://download.redis.io/releases/redis-2.8.9.tar.gz
 tar xzf redis-2.8.9.tar.gz
 cd redis-2.8.9
 make
 make test
 sudo make install
 cd utils
 sudo ./install_server.sh
</code></pre></li>
<li><p>Install memcached</p>

<pre><code> sudo apt-get install mysql-server php5-mysql php5 php5-memcached memcached
 sudo service memcached start
</code></pre></li>
<li><p>安裝mysql</p>

<pre><code>sudo apt-get install mysql-server mysql-client libmysqlclient-dev
</code></pre></li>
</ol>


<h2>安裝 Solr 環境 在search機器上</h2>

<p>我使用tomcat 安裝會有問題(<strong>missing core name in path</strong>)&#8230;.所以我最後手動安裝</p>

<ol>
<li><p>安裝 java</p>

<pre><code> sudo apt-get -y install openjdk-7-jdk
 mkdir /usr/java
 ln -s /usr/lib/jvm/java-7-openjdk-amd64 /usr/java/default
</code></pre></li>
<li><p>安裝Solr</p>

<pre><code> cd /opt
 wget http://archive.apache.org/dist/lucene/solr/4.7.2/solr-4.7.2.tgz
 tar -xvf solr-4.7.2.tgz
 cp -R solr-4.7.2/example /opt/solr
 cd /opt/solr
 java -jar start.jar
</code></pre></li>
<li><p>編輯 jetty</p>

<pre><code> sudo vim /etc/default/jetty 
</code></pre>

<p> 加入</p>

<pre><code> NO_START=0 # Start on boot
 JAVA_OPTIONS="-Dsolr.solr.home=/opt/solr/solr $JAVA_OPTIONS"
 JAVA_HOME=/usr/java/default
 JETTY_HOME=/opt/solr
 JETTY_USER=solr
 JETTY_LOGS=/opt/solr/logs
</code></pre>

<p> 下指令</p>

<pre><code> vim /opt/solr/etc/jetty-logging.xml
</code></pre>

<p> 加入</p>

<pre><code> &lt;?xml version="1.0"?&gt;
   &lt;!DOCTYPE Configure PUBLIC "-//Mort Bay Consulting//DTD Configure//EN" "http://jetty.mortbay.org/configure.dtd"&gt;
   &lt;!-- =============================================================== --&gt;
   &lt;!-- Configure stderr and stdout to a Jetty rollover log file --&gt;
   &lt;!-- this configuration file should be used in combination with --&gt;
   &lt;!-- other configuration files.  e.g. --&gt;
   &lt;!--    java -jar start.jar etc/jetty-logging.xml etc/jetty.xml --&gt;
   &lt;!-- =============================================================== --&gt;
   &lt;Configure id="Server" class="org.mortbay.jetty.Server"&gt;

       &lt;New id="ServerLog" class="java.io.PrintStream"&gt;
         &lt;Arg&gt;
           &lt;New class="org.mortbay.util.RolloverFileOutputStream"&gt;
             &lt;Arg&gt;&lt;SystemProperty name="jetty.logs" default="."/&gt;/yyyy_mm_dd.stderrout.log&lt;/Arg&gt;
             &lt;Arg type="boolean"&gt;false&lt;/Arg&gt;
             &lt;Arg type="int"&gt;90&lt;/Arg&gt;
             &lt;Arg&gt;&lt;Call class="java.util.TimeZone" name="getTimeZone"&gt;&lt;Arg&gt;GMT&lt;/Arg&gt;&lt;/Call&gt;&lt;/Arg&gt;
             &lt;Get id="ServerLogName" name="datedFilename"/&gt;
           &lt;/New&gt;
         &lt;/Arg&gt;
       &lt;/New&gt;

       &lt;Call class="org.mortbay.log.Log" name="info"&gt;&lt;Arg&gt;Redirecting stderr/stdout to &lt;Ref id="ServerLogName"/&gt;&lt;/Arg&gt;&lt;/Call&gt;
       &lt;Call class="java.lang.System" name="setErr"&gt;&lt;Arg&gt;&lt;Ref id="ServerLog"/&gt;&lt;/Arg&gt;&lt;/Call&gt;
       &lt;Call class="java.lang.System" name="setOut"&gt;&lt;Arg&gt;&lt;Ref id="ServerLog"/&gt;&lt;/Arg&gt;&lt;/Call&gt;&lt;/Configure&gt;
</code></pre></li>
<li><p>加上 User: solr</p>

<pre><code> sudo useradd -d /opt/solr -s /sbin/false solr
 sudo chown solr:solr -R /opt/solr
</code></pre></li>
<li><p>安裝 jetty</p>

<pre><code> sudo wget -O /etc/init.d/jetty http://dev.eclipse.org/svnroot/rt/org.eclipse.jetty/jetty/trunk/jetty-distribution/src/main/resources/bin/jetty.sh
 sudo chmod a+x /etc/init.d/jetty
 sudo update-rc.d jetty defaults
</code></pre></li>
<li><p>跑起來</p>

<pre><code> sudo /etc/init.d/jetty start
</code></pre></li>
<li><p>設定檔</p>

<pre><code> cd /opt/solr/solr
</code></pre></li>
<li><p>把在sunspot改好的schema.xml 寫到這邊</p>

<pre><code> vim /opt/solr/solr/collection1/conf/schema.xml
</code></pre>

<p> 寫上下面那些，因為我要支援中文字詞，所以我有改過一些</p>

<p> 下面這個很重要，如果不改的話，會有連線內容錯誤之類的訊息</p>

<pre><code> &lt;?xml version="1.0" encoding="UTF-8"?&gt;
 &lt;!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
 --&gt;
 &lt;!--  
  This is the Solr schema file. This file should be named "schema.xml" and
  should be in the conf directory under the solr home
  (i.e. ./solr/conf/schema.xml by default) 
  or located where the classloader for the Solr webapp can find it.

  This example schema is the recommended starting point for users.
  It should be kept correct and concise, usable out-of-the-box.

  For more information, on how to customize this file, please see
  http://wiki.apache.org/solr/SchemaXml

  PERFORMANCE NOTE: this schema includes many optional features and should not
  be used for benchmarking.  To improve performance one could
   - set stored="false" for all fields possible (esp large fields) when you
     only need to search on the field but don't need to return the original
     value.
   - set indexed="false" if you don't need to search on the field, but only
     return the field as a result of searching on other indexed fields.
   - remove all unneeded copyField statements
   - for best index size and searching performance, set "index" to false
     for all general text fields, use copyField to copy them to the
     catchall "text" field, and use that for searching.
   - For maximum indexing performance, use the StreamingUpdateSolrServer
     java client.
   - Remember to run the JVM in server mode, and use a higher logging level
     that avoids logging every request
 --&gt;
 &lt;schema name="sunspot" version="1.0"&gt;
   &lt;types&gt;
     &lt;!-- field type definitions. The "name" attribute is
        just a label to be used by field definitions.  The "class"
        attribute and any other attributes determine the real
        behavior of the fieldType.
          Class names starting with "solr" refer to java classes in the
        org.apache.solr.analysis package.
     --&gt;
     &lt;!-- *** This fieldType is used by Sunspot! *** --&gt;
     &lt;fieldType name="string" class="solr.StrField" omitNorms="true"/&gt;
     &lt;!-- *** This fieldType is used by Sunspot! *** --&gt;
     &lt;fieldType name="tdouble" class="solr.TrieDoubleField" omitNorms="true"/&gt;
     &lt;!-- *** This fieldType is used by Sunspot! *** --&gt;
     &lt;fieldType name="rand" class="solr.RandomSortField" omitNorms="true"/&gt;
     &lt;!-- *** This fieldType is used by Sunspot! *** --&gt;
     &lt;fieldType name="text" class="solr.TextField" omitNorms="false"&gt;
       &lt;analyzer&gt;
         &lt;tokenizer class="solr.CJKTokenizerFactory"/&gt;
         &lt;filter class="solr.StandardFilterFactory"/&gt;
         &lt;filter class="solr.LowerCaseFilterFactory"/&gt;
         &lt;filter class="solr.PorterStemFilterFactory"/&gt;
         &lt;filter class="solr.NGramFilterFactory" minGramSize="2" maxGramSize="15"/&gt;
       &lt;/analyzer&gt;

       &lt;analyzer type="query"&gt;
         &lt;tokenizer class="solr.CJKTokenizerFactory"/&gt;
         &lt;filter class="solr.StandardFilterFactory"/&gt;
         &lt;filter class="solr.LowerCaseFilterFactory"/&gt;
       &lt;/analyzer&gt;

     &lt;/fieldType&gt;
     &lt;!-- *** This fieldType is used by Sunspot! *** --&gt;
     &lt;fieldType name="boolean" class="solr.BoolField" omitNorms="true"/&gt;
     &lt;!-- *** This fieldType is used by Sunspot! *** --&gt;
     &lt;fieldType name="date" class="solr.DateField" omitNorms="true"/&gt;
     &lt;!-- *** This fieldType is used by Sunspot! *** --&gt;
     &lt;fieldType name="sdouble" class="solr.SortableDoubleField" omitNorms="true"/&gt;
     &lt;!-- *** This fieldType is used by Sunspot! *** --&gt;
     &lt;fieldType name="sfloat" class="solr.SortableFloatField" omitNorms="true"/&gt;
     &lt;!-- *** This fieldType is used by Sunspot! *** --&gt;
     &lt;fieldType name="sint" class="solr.SortableIntField" omitNorms="true"/&gt;
     &lt;!-- *** This fieldType is used by Sunspot! *** --&gt;
     &lt;fieldType name="slong" class="solr.SortableLongField" omitNorms="true"/&gt;
     &lt;!-- *** This fieldType is used by Sunspot! *** --&gt;
     &lt;fieldType name="tint" class="solr.TrieIntField" omitNorms="true"/&gt;
     &lt;!-- *** This fieldType is used by Sunspot! *** --&gt;
     &lt;fieldType name="tfloat" class="solr.TrieFloatField" omitNorms="true"/&gt;
     &lt;!-- *** This fieldType is used by Sunspot! *** --&gt;
     &lt;fieldType name="tdate" class="solr.TrieDateField" omitNorms="true"/&gt;

     &lt;!-- A specialized field for geospatial search. If indexed, this fieldType must not be multivalued. --&gt;
     &lt;fieldType name="location" class="solr.LatLonType" subFieldSuffix="_coordinate"/&gt;
   &lt;/types&gt;
   &lt;fields&gt;
     &lt;!-- Valid attributes for fields:
      name: mandatory - the name for the field
      type: mandatory - the name of a previously defined type from the
        &lt;types&gt; section
      indexed: true if this field should be indexed (searchable or sortable)
      stored: true if this field should be retrievable
      compressed: [false] if this field should be stored using gzip compression
        (this will only apply if the field type is compressable; among
        the standard field types, only TextField and StrField are)
      multiValued: true if this field may contain multiple values per document
      omitNorms: (expert) set to true to omit the norms associated with
        this field (this disables length normalization and index-time
        boosting for the field, and saves some memory).  Only full-text
        fields or fields that need an index-time boost need norms.
      termVectors: [false] set to true to store the term vector for a
        given field.
        When using MoreLikeThis, fields used for similarity should be
        stored for best performance.
      termPositions: Store position information with the term vector.  
        This will increase storage costs.
      termOffsets: Store offset information with the term vector. This 
        will increase storage costs.
      default: a value that should be used if no value is specified
        when adding a document.
    --&gt;
     &lt;!-- *** This field is used by Sunspot! *** --&gt;
     &lt;field name="id" stored="true" type="string" multiValued="false" indexed="true"/&gt;
     &lt;!-- *** This field is used by Sunspot! *** --&gt;
     &lt;field name="type" stored="false" type="string" multiValued="true" indexed="true"/&gt;
     &lt;!-- *** This field is used by Sunspot! *** --&gt;
     &lt;field name="class_name" stored="false" type="string" multiValued="false" indexed="true"/&gt;
     &lt;!-- *** This field is used by Sunspot! *** --&gt;
     &lt;field name="text" stored="false" type="string" multiValued="true" indexed="true"/&gt;
     &lt;!-- *** This field is used by Sunspot! *** --&gt;
     &lt;field name="lat" stored="true" type="tdouble" multiValued="false" indexed="true"/&gt;
     &lt;!-- *** This field is used by Sunspot! *** --&gt;
     &lt;field name="lng" stored="true" type="tdouble" multiValued="false" indexed="true"/&gt;
     &lt;!-- *** This dynamicField is used by Sunspot! *** --&gt;
     &lt;dynamicField name="random_*" stored="false" type="rand" multiValued="false" indexed="true"/&gt;
     &lt;!-- *** This dynamicField is used by Sunspot! *** --&gt;
     &lt;dynamicField name="_local*" stored="false" type="tdouble" multiValued="false" indexed="true"/&gt;
     &lt;!-- *** This dynamicField is used by Sunspot! *** --&gt;
     &lt;dynamicField name="*_text" stored="false" type="text" multiValued="true" indexed="true"/&gt;
     &lt;!-- *** This dynamicField is used by Sunspot! *** --&gt;
     &lt;dynamicField name="*_texts" stored="true" type="text" multiValued="true" indexed="true"/&gt;
     &lt;!-- *** This dynamicField is used by Sunspot! *** --&gt;
     &lt;dynamicField name="*_b" stored="false" type="boolean" multiValued="false" indexed="true"/&gt;
     &lt;!-- *** This dynamicField is used by Sunspot! *** --&gt;
     &lt;dynamicField name="*_bm" stored="false" type="boolean" multiValued="true" indexed="true"/&gt;
     &lt;!-- *** This dynamicField is used by Sunspot! *** --&gt;
     &lt;dynamicField name="*_bs" stored="true" type="boolean" multiValued="false" indexed="true"/&gt;
     &lt;!-- *** This dynamicField is used by Sunspot! *** --&gt;
     &lt;dynamicField name="*_bms" stored="true" type="boolean" multiValued="true" indexed="true"/&gt;
     &lt;!-- *** This dynamicField is used by Sunspot! *** --&gt;
     &lt;dynamicField name="*_d" stored="false" type="date" multiValued="false" indexed="true"/&gt;
     &lt;!-- *** This dynamicField is used by Sunspot! *** --&gt;
     &lt;dynamicField name="*_dm" stored="false" type="date" multiValued="true" indexed="true"/&gt;
     &lt;!-- *** This dynamicField is used by Sunspot! *** --&gt;
     &lt;dynamicField name="*_ds" stored="true" type="date" multiValued="false" indexed="true"/&gt;
     &lt;!-- *** This dynamicField is used by Sunspot! *** --&gt;
     &lt;dynamicField name="*_dms" stored="true" type="date" multiValued="true" indexed="true"/&gt;
     &lt;!-- *** This dynamicField is used by Sunspot! *** --&gt;
     &lt;dynamicField name="*_e" stored="false" type="sdouble" multiValued="false" indexed="true"/&gt;
     &lt;!-- *** This dynamicField is used by Sunspot! *** --&gt;
     &lt;dynamicField name="*_em" stored="false" type="sdouble" multiValued="true" indexed="true"/&gt;
     &lt;!-- *** This dynamicField is used by Sunspot! *** --&gt;
     &lt;dynamicField name="*_es" stored="true" type="sdouble" multiValued="false" indexed="true"/&gt;
     &lt;!-- *** This dynamicField is used by Sunspot! *** --&gt;
     &lt;dynamicField name="*_ems" stored="true" type="sdouble" multiValued="true" indexed="true"/&gt;
     &lt;!-- *** This dynamicField is used by Sunspot! *** --&gt;
     &lt;dynamicField name="*_f" stored="false" type="sfloat" multiValued="false" indexed="true"/&gt;
     &lt;!-- *** This dynamicField is used by Sunspot! *** --&gt;
     &lt;dynamicField name="*_fm" stored="false" type="sfloat" multiValued="true" indexed="true"/&gt;
     &lt;!-- *** This dynamicField is used by Sunspot! *** --&gt;
     &lt;dynamicField name="*_fs" stored="true" type="sfloat" multiValued="false" indexed="true"/&gt;
     &lt;!-- *** This dynamicField is used by Sunspot! *** --&gt;
     &lt;dynamicField name="*_fms" stored="true" type="sfloat" multiValued="true" indexed="true"/&gt;
     &lt;!-- *** This dynamicField is used by Sunspot! *** --&gt;
     &lt;dynamicField name="*_i" stored="false" type="sint" multiValued="false" indexed="true"/&gt;
     &lt;!-- *** This dynamicField is used by Sunspot! *** --&gt;
     &lt;dynamicField name="*_im" stored="false" type="sint" multiValued="true" indexed="true"/&gt;
     &lt;!-- *** This dynamicField is used by Sunspot! *** --&gt;
     &lt;dynamicField name="*_is" stored="true" type="sint" multiValued="false" indexed="true"/&gt;
     &lt;!-- *** This dynamicField is used by Sunspot! *** --&gt;
     &lt;dynamicField name="*_ims" stored="true" type="sint" multiValued="true" indexed="true"/&gt;
     &lt;!-- *** This dynamicField is used by Sunspot! *** --&gt;
     &lt;dynamicField name="*_l" stored="false" type="slong" multiValued="false" indexed="true"/&gt;
     &lt;!-- *** This dynamicField is used by Sunspot! *** --&gt;
     &lt;dynamicField name="*_lm" stored="false" type="slong" multiValued="true" indexed="true"/&gt;
     &lt;!-- *** This dynamicField is used by Sunspot! *** --&gt;
     &lt;dynamicField name="*_ls" stored="true" type="slong" multiValued="false" indexed="true"/&gt;
     &lt;!-- *** This dynamicField is used by Sunspot! *** --&gt;
     &lt;dynamicField name="*_lms" stored="true" type="slong" multiValued="true" indexed="true"/&gt;
     &lt;!-- *** This dynamicField is used by Sunspot! *** --&gt;
     &lt;dynamicField name="*_s" stored="false" type="string" multiValued="false" indexed="true"/&gt;
     &lt;!-- *** This dynamicField is used by Sunspot! *** --&gt;
     &lt;dynamicField name="*_sm" stored="false" type="string" multiValued="true" indexed="true"/&gt;
     &lt;!-- *** This dynamicField is used by Sunspot! *** --&gt;
     &lt;dynamicField name="*_ss" stored="true" type="string" multiValued="false" indexed="true"/&gt;
     &lt;!-- *** This dynamicField is used by Sunspot! *** --&gt;
     &lt;dynamicField name="*_sms" stored="true" type="string" multiValued="true" indexed="true"/&gt;
     &lt;!-- *** This dynamicField is used by Sunspot! *** --&gt;
     &lt;dynamicField name="*_it" stored="false" type="tint" multiValued="false" indexed="true"/&gt;
     &lt;!-- *** This dynamicField is used by Sunspot! *** --&gt;
     &lt;dynamicField name="*_itm" stored="false" type="tint" multiValued="true" indexed="true"/&gt;
     &lt;!-- *** This dynamicField is used by Sunspot! *** --&gt;
     &lt;dynamicField name="*_its" stored="true" type="tint" multiValued="false" indexed="true"/&gt;
     &lt;!-- *** This dynamicField is used by Sunspot! *** --&gt;
     &lt;dynamicField name="*_itms" stored="true" type="tint" multiValued="true" indexed="true"/&gt;
     &lt;!-- *** This dynamicField is used by Sunspot! *** --&gt;
     &lt;dynamicField name="*_ft" stored="false" type="tfloat" multiValued="false" indexed="true"/&gt;
     &lt;!-- *** This dynamicField is used by Sunspot! *** --&gt;
     &lt;dynamicField name="*_ftm" stored="false" type="tfloat" multiValued="true" indexed="true"/&gt;
     &lt;!-- *** This dynamicField is used by Sunspot! *** --&gt;
     &lt;dynamicField name="*_fts" stored="true" type="tfloat" multiValued="false" indexed="true"/&gt;
     &lt;!-- *** This dynamicField is used by Sunspot! *** --&gt;
     &lt;dynamicField name="*_ftms" stored="true" type="tfloat" multiValued="true" indexed="true"/&gt;
     &lt;!-- *** This dynamicField is used by Sunspot! *** --&gt;
     &lt;dynamicField name="*_dt" stored="false" type="tdate" multiValued="false" indexed="true"/&gt;
     &lt;!-- *** This dynamicField is used by Sunspot! *** --&gt;
     &lt;dynamicField name="*_dtm" stored="false" type="tdate" multiValued="true" indexed="true"/&gt;
     &lt;!-- *** This dynamicField is used by Sunspot! *** --&gt;
     &lt;dynamicField name="*_dts" stored="true" type="tdate" multiValued="false" indexed="true"/&gt;
     &lt;!-- *** This dynamicField is used by Sunspot! *** --&gt;
     &lt;dynamicField name="*_dtms" stored="true" type="tdate" multiValued="true" indexed="true"/&gt;
     &lt;!-- *** This dynamicField is used by Sunspot! *** --&gt;
     &lt;dynamicField name="*_textv" stored="false" termVectors="true" type="text" multiValued="true" indexed="true"/&gt;
     &lt;!-- *** This dynamicField is used by Sunspot! *** --&gt;
     &lt;dynamicField name="*_textsv" stored="true" termVectors="true" type="text" multiValued="true" indexed="true"/&gt;
     &lt;!-- *** This dynamicField is used by Sunspot! *** --&gt;
     &lt;dynamicField name="*_et" stored="false" termVectors="true" type="tdouble" multiValued="false" indexed="true"/&gt;
     &lt;!-- *** This dynamicField is used by Sunspot! *** --&gt;
     &lt;dynamicField name="*_etm" stored="false" termVectors="true" type="tdouble" multiValued="true" indexed="true"/&gt;
     &lt;!-- *** This dynamicField is used by Sunspot! *** --&gt;
     &lt;dynamicField name="*_ets" stored="true" termVectors="true" type="tdouble" multiValued="false" indexed="true"/&gt;
     &lt;!-- *** This dynamicField is used by Sunspot! *** --&gt;
     &lt;dynamicField name="*_etms" stored="true" termVectors="true" type="tdouble" multiValued="true" indexed="true"/&gt;

     &lt;!-- Type used to index the lat and lon components for the "location" FieldType --&gt;
     &lt;dynamicField name="*_coordinate"  type="tdouble" indexed="true"  stored="false" multiValued="false"/&gt;
     &lt;dynamicField name="*_p" type="location" indexed="true" stored="true" multiValued="false"/&gt;

     &lt;dynamicField name="*_ll" stored="false" type="location" multiValued="false" indexed="true"/&gt;
     &lt;dynamicField name="*_llm" stored="false" type="location" multiValued="true" indexed="true"/&gt;
     &lt;dynamicField name="*_lls" stored="true" type="location" multiValued="false" indexed="true"/&gt;
     &lt;dynamicField name="*_llms" stored="true" type="location" multiValued="true" indexed="true"/&gt;

     &lt;!-- required by Solr 4 --&gt;
     &lt;field name="_version_" type="string" indexed="true" stored="true" multiValued="false" /&gt;
   &lt;/fields&gt;

   &lt;!-- Field to use to determine and enforce document uniqueness.
       Unless this field is marked with required="false", it will be a required field
    --&gt;
   &lt;uniqueKey&gt;id&lt;/uniqueKey&gt;
   &lt;!-- field for the QueryParser to use when an explicit fieldname is absent --&gt;
   &lt;defaultSearchField&gt;text&lt;/defaultSearchField&gt;
   &lt;!-- SolrQueryParser configuration: defaultOperator="AND|OR" --&gt;
   &lt;solrQueryParser defaultOperator="AND"/&gt;
   &lt;!-- copyField commands copy one field to another at the time a document
         is added to the index.  It's used either to index the same field differently,
         or to add multiple fields to the same field for easier/faster searching.  --&gt;
 &lt;/schema&gt;
</code></pre></li>
<li><p>改好別忘重啟</p>

<pre><code> sudo /etc/init.d/jetty restart
</code></pre></li>
<li><p>但是&#8230;.目前不是用Chef安裝環境&#8230;.所以如果要改config檔，就是要到這個地方去修改</p>

<p><strong>/opt/solr/solr/collection1/conf</strong></p></li>
</ol>


<h2>專案上的程式碼</h2>

<ol>
<li>基本上，專案什麼都不用動，因為Sunspot都幫你做掉了</li>
</ol>


<p>你只需要改 <strong>config/sunspot.yml</strong></p>

<p>原先的設定：</p>

<pre><code>production:
  solr:
    hostname: localhost
    port: 8983
    log_level: INFO
    path: /solr/production
    # read_timeout: 2
    # open_timeout: 0.5

development:
  solr:
    hostname: localhost
    port: 8982
    log_level: INFO
    path: /solr/development


test:
  solr:
    hostname: localhost
    port: 8981
    log_level: WARNING
    path: /solr/test
</code></pre>

<p> 把它改成：</p>

<pre><code> production:
  solr:
    hostname: 33.33.13.12
    port: 8983
    log_level: INFO
    path: /solr
    # read_timeout: 2
    # open_timeout: 0.5

development:
  solr:
    hostname: localhost
    port: 8982
    log_level: INFO
    path: /solr/development


test:
  solr:
    hostname: localhost
    port: 8981
    log_level: WARNING
    path: /solr/test
</code></pre>

<p>恭喜完成！</p>

<h2>Capistrano Deployment</h2>

<p>如果你參考我的 Sunspot本機端 Deploy的話，</p>

<p>我試過幾種方法，試著讓app機器，可以去search機器 開關solr&#8230;.(</p>

<pre><code>sudo /etc/init.d/jetty start
</code></pre>

<p>但是小弟對於Capistrano才疏學淺，實在無法達成</p>

<p>所以我的Deploy Code就先把 solr:start 和 solr:stop 先拿掉</p>

<p>所以原先，我是這樣寫的</p>

<p><strong>/lib/capistrano/taks/sunspot.cap</strong></p>

<pre><code>namespace :deploy do
  before :updated, :setup_solr_data_dir do
    on roles(:app) do
      unless test "[ -d #{shared_path}/solr/data ]"
        execute :mkdir, "-p #{shared_path}/solr/data"
      end
    end
  end
end

namespace :solr do

  %w[start stop].each do |command|
    desc "#{command} solr"
    task command do
      on roles(:app) do
        solr_pid = "#{shared_path}/pids/sunspot-solr.pid"
        if command == "start" or (test "[ -f #{solr_pid} ]" and test "kill -0 $( cat #{solr_pid} )")
          within current_path do
            with rails_env: fetch(:rails_env, 'production') do
              execute :bundle, 'exec', 'sunspot-solr', command, "--port=8983 --data-directory=#{shared_path}/solr/data --pid-dir=#{shared_path}/pids --solr-home=#{release_path}/solr"
            end
          end
        end
      end
    end
  end

  desc "reindex solr"
  task :restart do
    invoke 'solr:reindex'
  end

  after 'deploy:finished', 'solr:restart'

  desc "reindex the whole solr database"

  task :reindex do
    invoke 'solr:stop' 
    on roles(:app) do
      execute :rm, "-rf #{shared_path}/solr/data"
    end
    invoke 'solr:start'
    sleep 10
    on roles(:app) do
      within current_path do
        with rails_env: fetch(:rails_env, 'production') do
          info "Reindexing Solr database"
          execute :bundle, 'exec', :rake, 'sunspot:solr:reindex[,,true]'
        end
      end
    end
  end

end
</code></pre>

<p>現在變成：</p>

<pre><code>namespace :deploy do
  before :updated, :setup_solr_data_dir do
    on roles(:app) do
      unless test "[ -d #{shared_path}/solr/data ]"
        execute :mkdir, "-p #{shared_path}/solr/data"
      end
    end
  end
end

namespace :solr do

  %w[start stop].each do |command|
    desc "#{command} solr"
    task command do
      on roles(:app) do
        solr_pid = "#{shared_path}/pids/sunspot-solr.pid"
        if command == "start" or (test "[ -f #{solr_pid} ]" and test "kill -0 $( cat #{solr_pid} )")
          within current_path do
            with rails_env: fetch(:rails_env, 'production') do
              execute :bundle, 'exec', 'sunspot-solr', command, "--port=8983 --data-directory=#{shared_path}/solr/data --pid-dir=#{shared_path}/pids --solr-home=#{release_path}/solr" # 就算加上 --bind-address=33.33.13.12  也在在本機端跑
            end
          end
        end
      end

      #  嘗試直接從本機去重開 search機器，但是都不work，找解答ing
      #on %w{apps@33.33.13.12} do |host|
      #    as 'apps' do
      #      execute "sudo /etc/init.d/jetty #{command}"
      #    end
      #end
    end
  end

  desc "reindex solr"
  task :restart do
    invoke 'solr:reindex'
  end

  after 'deploy:finished', 'solr:restart'

  desc "reindex the whole solr database"

  task :reindex do
    #invoke 'solr:stop' #這指令是操控本機的solr
    on roles(:app) do
      execute :rm, "-rf #{shared_path}/solr/data"
    end
    #invoke 'solr:start' #這指令是操控本機的solr
    sleep 10
    on roles(:app) do
      within current_path do
        with rails_env: fetch(:rails_env, 'production') do
          info "Reindexing Solr database"
          execute :bundle, 'exec', :rake, 'sunspot:solr:reindex[,,true]'
        end
      end
    end
  end

end
</code></pre>

<h2>恭喜完成！</h2>

<h3>ps. 如果你想要讓在vagrant裡頭app可以存取Mac裡頭的DB</h3>

<p>請把把 host改成 10.0.2.2</p>

<pre><code>host: 10.0.2.2
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[HOWTO] Using Sunspot(Solr) in Rails including easy suggestion feature and deployment to production environment - Part1]]></title>
    <link href="http://ccaloha.cc/blog/2014/09/06/using-sunspot-in-rails-including-suggestion-feature-and-deployment-to-production-machine-part1/"/>
    <updated>2014-09-06T00:06:35+08:00</updated>
    <id>http://ccaloha.cc/blog/2014/09/06/using-sunspot-in-rails-including-suggestion-feature-and-deployment-to-production-machine-part1</id>
    <content type="html"><![CDATA[<p>這系列文章，你可以學到：</p>

<pre><code>1. 如何使用sunspot，作為你的全站全文搜尋
2. 如何使用work around的方式達成sunspot搜尋的推薦字詞 - 利用solmate
3. 如何將sunspot deploy到production 機器，並且自動做index
4. 簡單調整sunspot
</code></pre>

<!-- more -->


<p>首先，當然是要感謝這些文章：</p>

<ol>
<li><p>Jimmy 高手：  <a href="http://gogojimmy.net/2012/01/25/full-text-search-in-rails-with-solr">在 Rails 中使用 Solr 做全文搜尋</a></p></li>
<li><p><a href="http://josephndungu.com/tutorials/fast-autocomplete-search-terms-rails">FAST AUTOCOMPLETE SEARCH TERMS - RAILS</a></p></li>
<li><p><a href="https://gist.github.com/cec/5508303">Capistrano Tasks to setup and interact with SolR and SunSpot</a></p></li>
</ol>


<h1>Part 1. 如何使用sunspot，作為你的全站全文搜尋</h1>

<h2>Step1. 使用gem</h2>

<p>[手做] 修改 <strong>Gemfile</strong></p>

<pre><code>gem 'sunspot_rails'
gem 'sunspot_solr'
</code></pre>

<p>做完後，別忘了</p>

<pre><code>bundle install
</code></pre>

<h2>Step2. 建立sunspot 設定檔</h2>

<pre><code>rails generate sunspot_rails:install
</code></pre>

<p>他會幫你建立 <strong>config/sunspot.yml</strong></p>

<pre><code>production:
 solr:
   hostname: localhost
   port: 8983
   log_level: WARNING
   path: /solr/production
   # read_timeout: 2
   # open_timeout: 0.5

development:
 solr:
   hostname: localhost
   port: 8982
   log_level: INFO
   path: /solr/development

test:
 solr:
   hostname: localhost
   port: 8981
   log_level: WARNING
   path: /solr/test
</code></pre>

<h2>Step3. 在model 建立搜尋功能</h2>

<p>假設我們現在有個 產品的model叫做： <strong>Product</strong> ，我們希望它的產品名稱、描述、價錢、建立時間、是否上架列為我們要搜尋的項目(也是要建index的部分)</p>

<p>所以我們需要在model加上</p>

<pre><code>searchable do
    ....
end
</code></pre>

<p>就像：<strong>app/models/product.rb</strong></p>

<pre><code># == Schema Information
#
# Table name: products
#
#  id                 :integer          not null, primary key
#  name               :string(20)
#  description        :text             not null
#  price              :integer
#  is_on_the_shelf    :boolean
#  created_at                 :datetime
#  updated_at                 :datetime
#

class Product &lt; ActiveRecord::Base  
  searchable do
    text :description,
    string :name
    integer :price
    time :created_at
    boolean :is_on_the_shelf
  end
end
</code></pre>

<h2>Step 4. 在controller建立搜尋動作</h2>

<p>接下來，我們會透過controller來取得view的搜尋字，然後把搜尋結果印出</p>

<p>假設我們希望在每一頁上方都有 搜尋bar給使用者做搜尋，在這邊我是假設用product本身的controller來做</p>

<p>在 <strong>app/controllers/products_controller.rb</strong></p>

<pre><code>class ProductsController &lt; ApplicationController
    def search
        @search = Product.search do
            fulltext params[:keyword] do 
              fields(:description, :name =&gt; 2.0)
              query_phrase_slop 1
            end
            with(:is_on_the_shelf, true)
            with(:created_at).less_than(Time.zone.now)
        end
        @products = @search.results
    end
end
</code></pre>

<p>上面是什麼意思呢？</p>

<p>首先，起手式 - 使用搜尋引擎來做等一下的搜尋</p>

<pre><code>@search = Product.search do
            ....
        end
</code></pre>

<p>再來，</p>

<pre><code>fulltext params[:keyword] do 
    fields(:description, :name =&gt; 2.0) 
    # =&gt; 全文搜尋 描述 和 名稱這兩個欄位，而且，名稱的欄位重要度比較高
    query_phrase_slop 1
    # =&gt; 中間有空一個字也成立，所以 “great big pizza” 也會符合 "great pizza這個字"
end
</code></pre>

<p>最後，條件部分：</p>

<pre><code>with(:is_on_the_shelf, true)  
# =&gt; 我要找所有上架的商品
with(:created_at).less_than(Time.zone.now)
# =&gt; 我要找所有建立時間，小於現在時間的商品
</code></pre>

<p>還有一件事：</p>

<pre><code>@products = @search.results 
# =&gt; 這樣會拿到Array 裡頭有預設 30 個 選出的Product
</code></pre>

<h2>Step 5. 在route建立搜尋link</h2>

<p><strong>config/routes.rb</strong></p>

<pre><code>get '/search', to: 'products#search'
</code></pre>

<h2>Step 6. 建立View</h2>

<pre><code>= form_tag search_path, :method =&gt; :get, class: 'search' do
.input-box
  = text_field_tag :keyword, params[:keyword], class: 'input-search'
  = button_tag "搜尋", class: 'icon-search btn btn-primary'
</code></pre>

<h2>Step 7. 恭喜本機端大致完成，只剩跑起來</h2>

<p>注意歐！這邊要做index歐～ 不然不會生效！</p>

<pre><code>rake sunspot:solr:start
rake sunspot:reindex 
</code></pre>

<p>ps. 當你跑完 <strong>rake sunspot:solr:start</strong>後，你會發現產生很多檔案，基本上我只有追蹤</p>

<p><strong>solr/conf/</strong>*底下的設定檔而已</p>

<h2>Step 7-1. 如果在做index時，你有遇到 “illegal character”</h2>

<p>請加上：</p>

<p><strong>config/initializers/sunspot_fix_illegal_chars.rb</strong></p>

<pre><code>module Sunspot
  # 
  # DataExtractors present an internal API for the indexer to use to extract
  # field values from models for indexing. They must implement the #value_for
  # method, which takes an object and returns the value extracted from it.
  #
  module DataExtractor #:nodoc: all
    # 
    # AttributeExtractors extract data by simply calling a method on the block.
    #
    class AttributeExtractor
      def initialize(attribute_name)
        @attribute_name = attribute_name
      end

      def value_for(object)
        Filter.new( object.send(@attribute_name) ).value
      end
    end

    # 
    # BlockExtractors extract data by evaluating a block in the context of the
    # object instance, or if the block takes an argument, by passing the object
    # as the argument to the block. Either way, the return value of the block is
    # the value returned by the extractor.
    #
    class BlockExtractor
      def initialize(&amp;block)
        @block = block
      end

      def value_for(object)
        Filter.new( Util.instance_eval_or_call(object, &amp;@block) ).value
      end
    end

    # 
    # Constant data extractors simply return the same value for every object.
    #
    class Constant
      def initialize(value)
        @value = value
      end

      def value_for(object)
        Filter.new(@value).value
      end
    end

    # 
    # A Filter to allow easy value cleaning
    #
    class Filter
      def initialize(value)
        @value = value
      end
      def value
        strip_control_characters @value
      end
      def strip_control_characters(value)
        return value unless value.is_a? String

        value.chars.inject("") do |str, char|
          unless char.ascii_only? and (char.ord &lt; 32 or char.ord == 127)
            str &lt;&lt; char
          end
          str
        end

      end
    end

  end
end
</code></pre>

<h1>Part 2. 如何利用solmate使用達成sunspot搜尋的推薦字詞</h1>

<p>因為我實在找不太到 sunspot的設定方法，所以我只好用work around的方式做到這件事情</p>

<p>我是使用 solmate這個 gem 來達成自動推薦。</p>

<p>由於solmate是使用redis當作臨時儲存的空間</p>

<p>若是redis 重啟&#8230;..那就gg了，你之前建的推薦資料都會不見。</p>

<p>所以，我有另外新建一個model: <strong>Keyword</strong> 去記錄使用者搜尋過的關鍵字</p>

<p>那就開始吧</p>

<h2>Step 1. 加上Gem</h2>

<p>首先，要先加入gem到 <strong>Gemfile</strong></p>

<pre><code>gem 'rack-contrib'
gem 'soulmate', :require =&gt; 'soulmate/server'
</code></pre>

<p>別忘了</p>

<pre><code>bundle install
</code></pre>

<p>再來你要確保你啟用<strong>redis-server</strong></p>

<pre><code>redis-server
</code></pre>

<h2>Step 2. 建立 Keyword model</h2>

<pre><code>rails g model keyword
</code></pre>

<p>然後 migration檔案：(這邊的結構單純就是為了soulmate設計)</p>

<pre><code>class CreateKeywords &lt; ActiveRecord::Migration
  def change
    create_table :keywords do |t|
        t.string :name
        t.integer :score
        t.string :url
        t.string :subtitle
        t.string :keyword_type
      t.timestamps
    end
  end
end
</code></pre>

<p>別忘了</p>

<pre><code>rake db:migrate
</code></pre>

<h2>Step 3. 將使用者輸入的關鍵字，記錄到solmate和keyword model [重要！]</h2>

<p>還記得，剛剛part 1的 Step 4，基本上我們是將下面的code加進去</p>

<pre><code># 如果有搜尋結果我們在記錄關鍵字 
if @products.present?   
    @keyword = Keyword.find_or_create_by(name: "#{params[:keyword]}") do |k|
        k.score = 0
        k.url = "/search?keyword=#{params[:keyword]}"
        k.keyword_type = "Keyword"
    end
    @keyword.update_attribute(:score, @keyword.score+=1) #代表多搜尋了一次
    remove_from_soulmate(@keyword) #先移除soulmate裡面的記錄
    load_into_soulmate(@keyword)    #更新新的紀錄
end

private

def load_into_soulmate(keyword)
    loader = Soulmate::Loader.new("#{keyword.keyword_type}")
    loader.add("term" =&gt; keyword.name, "id" =&gt; keyword.id, "score" =&gt; keyword.score, "data" =&gt; {
  "link" =&gt; "#{keyword.url}"
  })
end

def remove_from_soulmate(keyword)
    loader = Soulmate::Loader.new("#{keyword.keyword_type}")
    loader.remove("id" =&gt; keyword.id)
end
</code></pre>

<p>所以在 <strong>app/controllers/products_controller.rb</strong>，變成了</p>

<pre><code>class ProductsController &lt; ApplicationController
    def search
        @search = Product.search do
            fulltext params[:keyword] do 
              fields(:description, :name =&gt; 2.0)
              query_phrase_slop 1
            end
            with(:is_on_the_shelf, true)
            with(:created_at).less_than(Time.zone.now)
        end
        @products = @search.results

        # 如果有搜尋結果我們在記錄關鍵字 
        if @products.present?   
            @keyword = Keyword.find_or_create_by(name: "#{params[:keyword]}") do |k|
                k.score = 0
                k.url = "/search?keyword=#{params[:keyword]}"
                k.keyword_type = "Keyword"
            end
            @keyword.update_attribute(:score, @keyword.score+=1) #代表多搜尋了一次
            remove_from_soulmate(@keyword) #先移除soulmate裡面的記錄
            load_into_soulmate(@keyword)    #更新新的紀錄
        end

        private

        def load_into_soulmate(keyword)
            loader = Soulmate::Loader.new("#{keyword.keyword_type}")
            loader.add("term" =&gt; keyword.name, "id" =&gt; keyword.id, "score" =&gt; keyword.score, "data" =&gt; {
          "link" =&gt; "#{keyword.url}"
          })
        end

        def remove_from_soulmate(keyword)
            loader = Soulmate::Loader.new("#{keyword.keyword_type}")
            loader.remove("id" =&gt; keyword.id)
        end
        return @products
    end
end
</code></pre>

<h2>Step 4. 當使用者在輸入關鍵字時，進行推薦</h2>

<p>這邊我們需要借助 js了，這邊我就直接copy上面的參考資料了</p>

<pre><code>var ready = function(){
  var render, select;

  render = function(term, data, type) {
    return term;
  }

  select = function(term, data, type){
    // populate our search form with the autocomplete result
    $('#keyword').val(term);

    // hide our autocomplete results
    $('ul#soulmate').hide();

    // then redirect to the result's link 
    // remember we have the link in the 'data' metadata
    return window.location.href = data.link
  }

  $('#keyword').soulmate({
    url: '/autocomplete/search',
    types: ['keyword'],
    renderCallback : render,
    selectCallback : select,
    minQueryLength : 2,
    maxResults     : 10
  })


}
// when our document is ready, call our ready function
$(document).ready(ready);

// if using turbolinks, listen to the page:load event and fire our ready function
$(document).on('page:load', ready);
</code></pre>

<h2>Step 5. 別忘了，補上 JQUERY 和 SOULMATE.JS</h2>

<p>請參考： https://github.com/mcrowe/soulmate.js</p>

<p>下載：https://github.com/mcrowe/soulmate.js/blob/master/src/compiled/jquery.soulmate.js</p>

<p>因為它屬於第三方資源，所以我是把它放在</p>

<p><strong>vender/assets/javascripts/jquery.soulmate.js</strong></p>

<p>另外別忘了在你global的 <strong>app/assets/javascripts/application.js</strong>確保有</p>

<pre><code>//= require jquery
//= require jquery_ujs
//= require jquery.soulmate
</code></pre>

<h2>Step 6. 還有route</h2>

<p><strong>config/routes.rb</strong></p>

<pre><code>mount Soulmate::Server, :at =&gt; "/autocomplete"
</code></pre>

<h2>Step 7. CSS的部分，就請參考</h2>

<p><a href="http://josephndungu.com/tutorials/fast-autocomplete-search-terms-rails">FAST AUTOCOMPLETE SEARCH TERMS - RAILS</a></p>

<p>待續&#8230;&#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[HOWTO] 5 steps let your EC website applying GA E-commerce using Ruby on Rails]]></title>
    <link href="http://ccaloha.cc/blog/2014/08/17/5-steps-let-your-ec-website-applying-ga-e-commerce-using-ruby-on-rails/"/>
    <updated>2014-08-17T21:25:55+08:00</updated>
    <id>http://ccaloha.cc/blog/2014/08/17/5-steps-let-your-ec-website-applying-ga-e-commerce-using-ruby-on-rails</id>
    <content type="html"><![CDATA[<p>這篇你會知道如何在 Rails 加上 GA E-commerce的 code</p>

<p>基本上就是參考<a href="https://developers.google.com/analytics/devguides/collection/analyticsjs/ecommerce">GA- Ecommerce Tracking - Web Tracking (analytics.js)</a></p>

<p>google 是建議 GATC(google analytic tracking code)可以埋在當使用者完成交易後的感謝頁面</p>

<p>所以，我也是加上訂單created 後的動作，</p>

<p>就讓我們開始吧!</p>

<!-- more -->


<p></p>

<h2>Step 1. Order Controller</h2>

<p>在 <strong>app/controllers/orders_controller.rb</strong></p>

<p>因為需要多一個步驟，所以我是新增一個新的 action，<strong>send_data_to_ga_ec</strong></p>

<pre><code>def send_data_to_ga_ec
    @order = Order.find_by_order_no(params[:id]) 
end
</code></pre>

<h2>Step 2. Route and Controller</h2>

<p>在 <strong>config/routes.rb</strong></p>

<p>因為加了一個action, 所以我補上一條新的routing規則</p>

<pre><code>  get '/orders/send_data_to_ga_ec', :to =&gt; 'orders#send_data_to_ga_ec' 
</code></pre>

<p><em>ps. 注意！一定要放在resource :orders前面，不然會無效</em></p>

<p>回到 <strong>app/controllers/orders_controller.rb</strong></p>

<p>把當訂單完成後，要導向的動作，補上去</p>

<pre><code>def create
    @order = current_user.orders.build(permitted_params.order)
      if @order 
        @order.add_line_items_from_cart(@cart)
            respond_to do |format|
                if @order.save
                    format.html { 
                       redirect_to orders_send_data_to_ga_ec_path(:id =&gt; @order.order_no), notice: "感謝您的訂購，您可以點選[我的訂單]查看訂單資訊，或於幾分鐘後，檢查是否收到訂單確認信"
                    }
                else
                    format.html { render action: 'new' }
                end
            end
        end
end
</code></pre>

<h2>Step 3. View</h2>

<p>這邊就是單純把他購買的東西show出來而已！重點在下兩步！</p>

<pre><code>.home-block 
  h2.home-block-heading
    span  這是您本次的購買資訊

  table.table.cart-table.table-striped.table-bordered.table-hover.span12
        thead
          tr
            th 產品名稱
            th 購買數量
            th 購買顏色
            th 購買尺寸
            th 購買時優惠方案
        tbody
          - @order.line_items.each do |line_item|
              tr
                td= link_to line_item.product.name, product_path(line_item.product.id)
                td= line_item.count
                td= line_item.color
                td= line_item.size
                td= line_item.discount_name
</code></pre>

<h2>Step 4. Application Layout</h2>

<p>因為一般的GATC，我們都是裝在header，所以以Rails來說，就是寫在</p>

<p><strong>app/views/layouts/application.html.slim</strong></p>

<pre><code>  - if controller_name == 'orders' &amp;&amp; action_name == 'send_data_to_ga_ec'
    = render 'shared/google_analytics_ec' , user_id: current_user.try(:id), order: @order
  - else
    = render 'shared/google_analytics' , user_id: current_user.try(:id) 
</code></pre>

<p> 有沒有看到那個 <strong>if controller_name == &#8216;orders&#8217; &amp;&amp; action_name == &#8216;send_data_to_ga_ec&#8217;</strong></p>

<p> 就是那個讓我判斷說，當這個action時，要load不同的GATC</p>

<h2>Step 5. Partial View - for google_analytics_ec</h2>

<p>要填的參數，我就不再贅述了～ 請看GA 的官方 document</p>

<p><strong>app/views/shared/_google_analytics_ec.html.erb</strong></p>

<pre><code>&lt;script&gt;
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-XXXX-XXX', 'auto');
  &lt;%- if user_id.present? %&gt;
    ga('set', '&amp;uid', &lt;%= user_id %&gt;);
  &lt;% end %&gt;
  ga('require', 'displayfeatures');

  // =========================== GA-Ecommerce Start==========================
  ga('require', 'ecommerce');
  ga('ecommerce:addTransaction', {
    'id': '&lt;%= order.order_no %&gt;',                        // Transaction ID. Required.
    'affiliation': 'Heartbeat',                           // Affiliation or store name.
    'revenue': '&lt;%= order.total_price %&gt;',                // Grand Total.
    'shipping': '&lt;%= order.transaction.ship_fee %&gt;',      // Shipping.
    'tax': '' ,                                           // Tax.
    'currency': 'TWD'                                     // local currency code.
  });

  &lt;% order.line_items.each do |line_item| %&gt;
  ga('ecommerce:addItem', {
    'id': '&lt;%= order.order_no %&gt;',                        // Transaction ID. Required.
    'name': '&lt;%= line_item.product.name %&gt;',              // Product name. Required.
    'sku': '&lt;%= line_item.product.product_no %&gt;',         // SKU/code.
    'category': '&lt;%= line_item.product.tag_list%&gt;',       // Category or variation.
    'price': '&lt;%= line_item.product.selling_price%&gt;',     // Unit price.
    'quantity': '&lt;%= line_item.count%&gt;',                  // Quantity.
    'currency': 'TWD' 
  });
  &lt;% end %&gt;
  ga('ecommerce:send');
  // =========================== GA-Ecommerce End==========================
  ga('send', 'pageview');
&lt;/script&gt;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[HOWTO] 跳出視窗，內含動態選單]]></title>
    <link href="http://ccaloha.cc/blog/2014/08/08/howto-rails-popup-window-and-ajax-form/"/>
    <updated>2014-08-08T12:40:10+08:00</updated>
    <id>http://ccaloha.cc/blog/2014/08/08/howto-rails-popup-window-and-ajax-form</id>
    <content type="html"><![CDATA[<p>屁話區：</p>

<p>最近要準備開發比較user friendly的後台，於是乎，想到這樣的功能，</p>

<p>於是，我拿了之前開發過的專案來試玩看看～～ 快來看一下中間的眉角～(ps.其實也沒有什麼眉角&#8230;都是g來的XDDDD)</p>

<h2>需求描述：</h2>

<p>使用者希望點選&#8221;編輯&#8221;後，直接popup編輯視窗，裡頭還包含了動態表格</p>

<p>More specific, 來個簡單使用者情境：</p>

<blockquote><p>後台管理人員，需要幫其中一張訂單，加購商品</p></blockquote>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/%5Bhowto%5D%20%E8%B7%B3%E5%87%BA%E8%A6%96%E7%AA%97%EF%BC%8C%E5%85%A7%E5%90%AB%E5%8B%95%E6%85%8B%E9%81%B8%E5%96%AE/popup%E8%A6%96%E7%AA%97.png" alt="加購商品跳出視窗"></p>

<p>就讓我們繼續看下去&#8230;.這崮中有什麼訣竅～～～～</p>

<!-- more -->


<p>在文章的開始，當然要先感謝前人的知識、還有一堆Open Source</p>

<h2>REF</h2>

<p><a href="http://ericlondon.com/2014/03/13/rails-4-submit-modal-form-via-ajax-and-render-js-response-as-table-row.html">Rails 4 submit modal form via AJAX and render JS response as table row</a></p>

<p><a href="http://www.petermac.com/rails-3-jquery-and-multi-select-dependencies/">Rails 3, jQuery and multi-select dependencies</a></p>

<p><a href="http://getbootstrap.com/javascript/#modals">Bootstrap- modal.js</a> => 用來做popup視窗</p>

<p><a href="http://ivaynberg.github.io/select2/">Selec2 js</a> => 用來做動態選資料</p>

<h1>流程</h1>

<ol>
<li>管理人員在後台，訂單的list頁，有一個加購的button</li>
<li>點選這個button後，會跳出一個視窗</li>
<li>視窗裡面有一個表格，上面會預先帶入這個訂單的ID，還有一個產品編號的select功能</li>
<li>當管理人員慢慢打字輸入了產品編號，系統會自動搜尋可能的結果</li>
<li>選擇了一個產品編號，底下會自動跳出這個加購的資訊，例如：顏色、尺寸、數量</li>
</ol>


<p>ps. 我的View是使用slim</p>

<h1>流程一：管理人員在後台，訂單的list頁，有一個加購的button</h1>

<p>你可能會有一個訂單清單</p>

<p>在 <em>app/views/orders/index.html.slim</em> 你只要加上</p>

<pre><code>= link_to '加購', '#add_product_modal', 'data-toggle' =&gt; 'modal', class: 'btn 
btn-mini', 'data-order' =&gt; order.id
</code></pre>

<p><strong>重點是那個&#8217;data-toggle&#8217; => &#8216;modal&#8217;</strong> => 加了就有modal的功效歐～～</p>

<p>還有另外一個伏筆，那個 &#8216;data-order&#8217; => order.id</p>

<p>慢慢讀下去你就會知道那個要幹嘛了！</p>

<p>大概可能會長這樣</p>

<pre><code>- @orders.each do |order|
    = ...
    = link_to '加購', '#add_product_modal', 'data-toggle' =&gt; 'modal', class: 'btn btn-mini', 'data-order' =&gt; order.id
</code></pre>

<p>ps. 這邊你可能會有個疑惑，囧～這個link_to 怎麼沒有 link to 的位置?! 人客啊～不要急～讓我們繼續看下去</p>

<h3>成果：</h3>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/%5Bhowto%5D%20%E8%B7%B3%E5%87%BA%E8%A6%96%E7%AA%97%EF%BC%8C%E5%85%A7%E5%90%AB%E5%8B%95%E6%85%8B%E9%81%B8%E5%96%AE/%E8%A8%82%E5%96%AElist.png" alt="訂單list"></p>

<h1>流程二：點選這個button後，會跳出一個視窗</h1>

<p>在 <em>app/views/orders/index.html.slim</em> 繼續加上，我是把它加在最底下，不過你也可以考慮拉出一個partial view，depend on you摟～</p>

<p>不要覺得好像很厲害(但是寫這個套件很厲害!)～這一串是從Modal官網看到的sample，只是把它拿出來用而已</p>

<pre><code>.modal.fade#add_product_modal tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true"
  .modal-dialog
    .modal-content
      .modal-header
        button.close type="button" data-dismiss="modal" aria-hidden="true"
          | &amp;times;
        h4.modal-title#myModalLabel
          | 加購產品
      .modal-body
        = render 'extra_buy_form' 
      .modal-footer
        button type="button" class="btn btn-default" data-dismiss="modal"
          | 關閉
</code></pre>

<p>這裡頭有ㄧ個關鍵，就是那個跳出來視窗，裡頭的內容(在我們的例子，也就是表格)</p>

<p>我把它寫成 partial view: <strong>extra_buy_form</strong></p>

<p>其他的東東，我想看那個class name就知道了吧～</p>

<h2>流程二 - 1 既然都已經寫好modal，那當然要記得要有他的js歐～不然不會有效果</h2>

<p>加入在<em>app/assets/javascripts/admin.js</em> (這是因為我的admin有自己的版，裡頭會抓admin.js)</p>

<pre><code>//= require bootstrap.min 
</code></pre>

<h1>流程三：視窗裡面有一個表格，上面會預先帶入這個訂單的ID，還有一個產品編號的select功能</h1>

<p>這邊就進到了，<strong>extra_buy_form</strong>的部分，</p>

<p>由於是在order底下，所以我的檔案是建立在 <em>app/views/admin/orders/_extra_buy_form.html.slim</em></p>

<pre><code>= simple_form_for :line_item,:url =&gt; update_extra_buy_admin_orders_path, defaults: { input_html: { remote: true, 'data-model' =&gt; 'product'}}do |f|
  = f.input :order_id,  label: '加入訂單編號：'
  = f.input :product_id, input_html: {class: 'form-control', data: {product_selector: 'true'} }
  #buying_detail
  .text-center.small-padding
    = submit_tag '送出', disabled_with: '送出中', class: 'btn block-btn'
</code></pre>

<p>這邊有幾個點要講：</p>

<ol>
<li>由於我們這個不屬於orde model的屬性，也沒有任何 instance variable (例如：@line_item)被帶入，所以simple_form 我是使用 symbol (:) 來表示</li>
<li>再來，那個url，就代表著等一下這張表格會被 post到哪裡，等下會說明 order controller的部分和route</li>
<li>第三行，就是要用select2 來實作的動態select內容的寫法，最重要的是那個：data: {product_selector}</li>
<li>第四行非常重要的！ 當你選完產品id後，這邊就會render出這個產品的相關資訊，等一下會介紹到！！！</li>
<li>那個order_id，嘿嘿～～ 等一下流程五會提到！</li>
</ol>


<h2>流程四：當管理人員慢慢打字輸入了產品編號，系統會自動搜尋可能的結果</h2>

<p>這邊就是select2的實作！</p>

<p>首先，先建立一個js吧～ <em>app/assets/javascripts/admin/proudct_selector.js.coffee</em></p>

<pre><code>jQuery ($) -&gt;
  $(document).on 'ready page:load', -&gt;
    $('[data-product-selector]').each -&gt;
      $this = $(this)
      $this.select2(
        placeholder: "輸入產品編號"
        minimumInputLength: 0
        allowClear: true

        ajax:
          url: '/admin/products/get_product_list.json'
          data: (term, page) -&gt; q: term
          results: (data, page) -&gt; results: data

        initSelection: (element, callback) -&gt;
          if $this.val() isnt ''
            $.ajax(
              url: "/admin/products/#{$this.val()}.json"
              success: (data) -&gt; callback(data)
            )
      )
</code></pre>

<p>這邊有幾個點要講：</p>

<ol>
<li><strong>$(&#8216;[data-product-selector]&#8217;)</strong> 就是找到 這個 => <strong>data: {product_selector}</strong></li>
<li><strong>url: &#8216;/admin/products/get_product_list.json&#8217;</strong> => 這邊要去跟controller要資料</li>
<li><strong>url: &#8220;/admin/products/#{$this.val()}.json&#8221;</strong> => 這邊其實用不太到，不過，如果你可能會有預設值的話，譬如說，你是某個form 可以給人家編輯</li>
</ol>


<h3>成果：</h3>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/%5Bhowto%5D%20%E8%B7%B3%E5%87%BA%E8%A6%96%E7%AA%97%EF%BC%8C%E5%85%A7%E5%90%AB%E5%8B%95%E6%85%8B%E9%81%B8%E5%96%AE/select2%20serarch%E5%8A%9F%E8%83%BD.png" alt="select2 search"></p>

<h2>流程四 - 1：既然這邊用到了select2、還有你自己寫的js，別忘了&#8230;.</h2>

<p>加入在<em>app/assets/javascripts/admin.js</em> (這是因為我的admin有自己的版，裡頭會抓admin.js)</p>

<pre><code>//= require select2
//= require admin/product_selector
</code></pre>

<h2>流程四 - 2：剛剛提到說兩個 admin/products/XXX.json 就是要跟controller拿資料，所以當然我們要新增action給他摟</h2>

<p>請加在： <em>app/controllers/admin/products_controller.rb</em></p>

<p>首先</p>

<pre><code>def serial_products(products)
    products.map { |p| {id: p.id, text: p.product_no}}
end

def show 
    @product = Product.find(params[:id])

    respond_to do |f|
        f.html
        f.json { render json: serial_products(@product) } #要給ajax使用
    end
end
</code></pre>

<p>再來</p>

<pre><code>def get_product_list
    @products = if params[:q]
                    Product.on_sale.filter_by(params[:q])
                else
                    Product.on_sale
                end
    respond_to do |f|
        f.json { render json: serial_products(@products)} #只給ajax使用
    end
end
</code></pre>

<p>重要的眉角：</p>

<pre><code>if params[:q]
    Product.on_sale.filter_by(params[:q])
...
</code></pre>

<p>為甚麼要有這個呢？</p>

<p>那是因為<em>app/assets/javascripts/admin/proudct_selector.js.coffee</em>這個js不是有一個</p>

<pre><code>url: '/admin/products/get_product_list.json'
data: (term, page) -&gt; q: term
</code></pre>

<p>有沒有看到那個 “q“</p>

<p>沒錯！ 就是那個q，他會丟一個param[:q]的值給get_product_list，</p>

<p>也就是這個，我們就可以達成 <strong>慢慢打字輸入了產品編號，系統會自動搜尋可能的結果</strong></p>

<h2>流程四 - 3： 從上一個步驟(四-3)裡頭有&#8221;Product.on_sale.filter_by&#8221;，這邊是model的方法</h2>

<p>我們來看一下model，並加在 <em>app/models/product.rb</em></p>

<pre><code>scope :on_sale, -&gt; {where(is_added: true)}
scope :filter_by, lambda { |q| where('product_no LIKE :qurey', qurey: "%#{q}%") }
</code></pre>

<p>這邊小眉角：</p>

<pre><code>where('product_no LIKE :qurey', qurey: "%#{q}%")
</code></pre>

<p>這個就是rails用來做 like搜尋(我把它稱作模糊搜尋，不知道有沒有錯)</p>

<h2>流程四 - 4： 既然controller都寫完了，別忘記route歐！</h2>

<p>要改：<em>config/routes.rb</em></p>

<pre><code>namespace :admin do

  ...

  resources :products do
    ...

    collection { get :get_product_list}
  end

  resources :orders do
    ...
    collection { post :update_extra_buy }
  end

  ....

end
</code></pre>

<h1>流程五：選擇了一個產品編號，底下會自動跳出這個加購的資訊，例如：顏色、尺寸、數量</h1>

<p>這邊我們要來看，<em>app/views/admin/orders/_extra_buy_form.html.slim</em></p>

<p>裡面的</p>

<pre><code>  #buying_detail
</code></pre>

<p>怪怪&#8230;.為甚麼這一行，就可以讓它自動跳出加購的資訊？！</p>

<p>接下來厲害了！！</p>

<h2>流程五-1：表格上面select 也已經動態可以選了，那底下的動態表格，怎麼沒有render出來？！</h2>

<p>這邊 我們必須使用一個javascript來監控那個select2的行為， 不過貌似可以寫在select2裡面，但是&#8230;我是覺得怪怪的～應該要猜開才是(ps. 其實是我不太會寫XDDDD)</p>

<p>沒錯！ 我們需要新增 <em>app/assets/admin/order.js</em></p>

<pre><code>jQuery(function($) {
  // when the #data-product-selector field changes
  $("[data-product-selector]").change(function() {
    var product_id = $('[data-product-selector]').val();
    if(product_id == "") product_id="0";
    var product = 'product_id='+ product_id;
    jQuery.get("/admin/products/update_product_atts",product, function(data){
        $("#buying_detail").html(data);
    })
    return false;
  });

  $(document).on('click', '[data-toggle=modal]', function(e) {
    $('#line_item_order_id').val(e.target.getAttribute('data-order'));
  });

})
</code></pre>

<p>重點：</p>

<p>1.jQuery.get(&#8220;/admin/products/update_product_atts&#8221;,product, function(data){</p>

<pre><code>        $("#buying_detail").html(data);
    })
</code></pre>

<p>我覺得 可以算是本日最精彩！</p>

<p>第一次知道原來partial view可以這樣用！！！！</p>

<p>等一下在講那個update_product_atts</p>

<p>2.<strong>$(&#8216;#line_item_order_id&#8217;).val(e.target.getAttribute(&#8216;data-order&#8217;));</strong></p>

<p>這個是為了那個pop視窗 <em>app/views/admin/orders/_extra_buy_form.html.slim</em> 的裡頭預設的order id值</p>

<pre><code>= simple_form_for :line_item,:url =&gt; update_extra_buy_admin_orders_path, defaults: { input_html: { remote: true, 'data-model' =&gt; 'product'}}do |f|
  = f.input :order_id,  label: '加入訂單編號：'
</code></pre>

<p>為甚麼會有 <strong>e.target.getAttribute(&#8216;data-order&#8217;)</strong></p>

<p>那是因為，我希望直接知道 使用者點的是那張訂單，所以&#8230;. 還記得&#8230;.</p>

<p>在 <em>app/views/orders/index.html.slim</em> 你只要加上</p>

<pre><code>= link_to '加購', '#add_product_modal', 'data-toggle' =&gt; 'modal', class: 'btn 
btn-mini', 'data-order' =&gt; order.id
</code></pre>

<p>有沒有看到&#8217;data-order&#8217; => order.id</p>

<p>所以那段js只是把 值抓出來而已，然後再餵給 <strong>f.input :order_id</strong></p>

<h2>流程五-2：/admin/products/update_product_atts 、$(&#8220;#buying_detail&#8221;).html(data) 在搞什麼鬼？</h2>

<p>其實從js來看，就會知道他就是要跟 products controller拿東東</p>

<p>所以，繼續來編輯我們的 <em>app/controllers/admin/products_controller.rb</em></p>

<pre><code> def update_product_atts
        product = Product.find(params[:product_id]) unless params[:product_id].blank?
        render :partial =&gt; "admin/orders/product_attrs", :locals =&gt; { :product =&gt; product} #這邊還挺酷的，只會render那個partial頁面
 end
</code></pre>

<p>還有view歐  <em>app/views/admin/order/_product_attrs.html.slim</em></p>

<pre><code>- if product.present?
  = simple_form_for :line_item_attr, defaults: { input_html: { remote: true, url: '#'}} do |f|
    = f.input :color, label: '顏色：' , collection: "#{product.color}".split(",").map(&amp;:to_s)
    = f.input :size, label: '尺寸：', collection: "#{product.size}".split(",").map(&amp;:to_s)
    = f.input :count, label: '數量：' , collection: (1..50), selected: '1'
</code></pre>

<p>有沒有看到～ 那個</p>

<p><strong>jQuery.get(&#8220;/admin/products/update_product_atts&#8221;,product</strong></p>

<p>就是會丟出一個 params[:product_id] 給 product controller</p>

<p>當controller 抓到 id 後，就把那個product 資料，依照  admin/orders/product_attrs 樣子render給data，然後讓</p>

<pre><code>$("#buying_detail").html(data); 
</code></pre>

<p>把資料畫出來</p>

<p>傑克！這實在太神奇了！！！！！！！！！！！！</p>

<h3>成果：</h3>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/%5Bhowto%5D%20%E8%B7%B3%E5%87%BA%E8%A6%96%E7%AA%97%EF%BC%8C%E5%85%A7%E5%90%AB%E5%8B%95%E6%85%8B%E9%81%B8%E5%96%AE/%E8%87%AA%E5%8B%95%E5%B8%B6%E5%87%BAform.png" alt="select2 search"></p>

<h2>流程五-3：既然你自己寫的js，別忘了&#8230;.</h2>

<p>加入在<em>app/assets/javascripts/admin.js</em> (這是因為我的admin有自己的版，裡頭會抓admin.js)</p>

<pre><code>//= require admin/orders
</code></pre>

<h2>打完收工！</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[閱讀筆記系列] 23 + 1 設計模式 - Part4. 工廠方法(Factory Method)]]></title>
    <link href="http://ccaloha.cc/blog/2014/07/11/reading-note-23-plus-1-design-pattern-part3-factory-method/"/>
    <updated>2014-07-11T22:57:34+08:00</updated>
    <id>http://ccaloha.cc/blog/2014/07/11/reading-note-23-plus-1-design-pattern-part3-factory-method</id>
    <content type="html"><![CDATA[<p>重點在於</p>

<blockquote><p>將建立物件的程式碼集中在一個物件或行為中，可避免程式碼重複，方便以後修改</p></blockquote>

<p>你是否常需要建立某個object，但是這個object內容卻時常需要變化，但是又很類似</p>

<p>之前的閱讀筆記(懶惰版)</p>

<iframe id="xmindshare_embedviewer" src="http://www.xmind.net/embed/w4XW?size=medium" width="750px" height="450px" frameborder="0" scrolling="no"></iframe>



]]></content>
  </entry>
  
</feed>
