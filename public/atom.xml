<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[AlohaCC]]></title>
  <link href="http://ccaloha.cc/atom.xml" rel="self"/>
  <link href="http://ccaloha.cc/"/>
  <updated>2014-09-06T00:08:51+08:00</updated>
  <id>http://ccaloha.cc/</id>
  <author>
    <name><![CDATA[Aloha]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[HOWTO] Using Sunspot(Solr) in Rails including easy suggestion feature and deployment to production environment - Part1]]></title>
    <link href="http://ccaloha.cc/blog/2014/09/06/using-sunspot-in-rails-including-suggestion-feature-and-deployment-to-production-machine-part1/"/>
    <updated>2014-09-06T00:06:35+08:00</updated>
    <id>http://ccaloha.cc/blog/2014/09/06/using-sunspot-in-rails-including-suggestion-feature-and-deployment-to-production-machine-part1</id>
    <content type="html"><![CDATA[<p>這系列文章，你可以學到：</p>

<pre><code>1. 如何使用sunspot，作為你的全站全文搜尋
2. 如何使用work around的方式達成sunspot搜尋的推薦字詞 - 利用solmate
3. 如何將sunspot deploy到production 機器，並且自動做index
4. 簡單調整sunspot
</code></pre>

<!-- more -->


<p>首先，當然是要感謝這些文章：</p>

<ol>
<li><p>Jimmy 高手：  <a href="http://gogojimmy.net/2012/01/25/full-text-search-in-rails-with-solr">在 Rails 中使用 Solr 做全文搜尋</a></p></li>
<li><p><a href="http://josephndungu.com/tutorials/fast-autocomplete-search-terms-rails">FAST AUTOCOMPLETE SEARCH TERMS - RAILS</a></p></li>
<li><p><a href="https://gist.github.com/cec/5508303">Capistrano Tasks to setup and interact with SolR and SunSpot</a></p></li>
</ol>


<h1>Part 1. 如何使用sunspot，作為你的全站全文搜尋</h1>

<h2>Step1. 使用gem</h2>

<p>[手做] 修改 <strong>Gemfile</strong></p>

<pre><code>gem 'sunspot_rails'
gem 'sunspot_solr'
</code></pre>

<p>做完後，別忘了</p>

<pre><code>bundle install
</code></pre>

<h2>Step2. 建立sunspot 設定檔</h2>

<pre><code>rails generate sunspot_rails:install
</code></pre>

<p>他會幫你建立 <strong>config/sunspot.yml</strong></p>

<pre><code>production:
 solr:
   hostname: localhost
   port: 8983
   log_level: WARNING
   path: /solr/production
   # read_timeout: 2
   # open_timeout: 0.5

development:
 solr:
   hostname: localhost
   port: 8982
   log_level: INFO
   path: /solr/development

test:
 solr:
   hostname: localhost
   port: 8981
   log_level: WARNING
   path: /solr/test
</code></pre>

<h2>Step3. 在model 建立搜尋功能</h2>

<p>假設我們現在有個 產品的model叫做： <strong>Product</strong> ，我們希望它的產品名稱、描述、價錢、建立時間、是否上架列為我們要搜尋的項目(也是要建index的部分)</p>

<p>所以我們需要在model加上</p>

<pre><code>searchable do
    ....
end
</code></pre>

<p>就像：<strong>app/models/product.rb</strong></p>

<pre><code># == Schema Information
#
# Table name: products
#
#  id                 :integer          not null, primary key
#  name               :string(20)
#  description        :text             not null
#  price              :integer
#  is_on_the_shelf    :boolean
#  created_at                 :datetime
#  updated_at                 :datetime
#

class Product &lt; ActiveRecord::Base  
  searchable do
    text :description,
    string :name
    integer :price
    time :created_at
    boolean :is_on_the_shelf
  end
end
</code></pre>

<h2>Step 4. 在controller建立搜尋動作</h2>

<p>接下來，我們會透過controller來取得view的搜尋字，然後把搜尋結果印出</p>

<p>假設我們希望在每一頁上方都有 搜尋bar給使用者做搜尋，在這邊我是假設用product本身的controller來做</p>

<p>在 <strong>app/controllers/products_controller.rb</strong></p>

<pre><code>class ProductsController &lt; ApplicationController
    def search
        @search = Product.search do
            fulltext params[:keyword] do 
              fields(:description, :name =&gt; 2.0)
              query_phrase_slop 1
            end
            with(:is_on_the_shelf, true)
            with(:created_at).less_than(Time.zone.now)
        end
        @products = @search.results
    end
end
</code></pre>

<p>上面是什麼意思呢？</p>

<p>首先，起手式 - 使用搜尋引擎來做等一下的搜尋</p>

<pre><code>@search = Product.search do
            ....
        end
</code></pre>

<p>再來，</p>

<pre><code>fulltext params[:keyword] do 
    fields(:description, :name =&gt; 2.0) 
    # =&gt; 全文搜尋 描述 和 名稱這兩個欄位，而且，名稱的欄位重要度比較高
    query_phrase_slop 1
    # =&gt; 中間有空一個字也成立，所以 “great big pizza” 也會符合 "great pizza這個字"
end
</code></pre>

<p>最後，條件部分：</p>

<pre><code>with(:is_on_the_shelf, true)  
# =&gt; 我要找所有上架的商品
with(:created_at).less_than(Time.zone.now)
# =&gt; 我要找所有建立時間，小於現在時間的商品
</code></pre>

<p>還有一件事：</p>

<pre><code>@products = @search.results 
# =&gt; 這樣會拿到Array 裡頭有預設 30 個 選出的Product
</code></pre>

<h2>Step 5. 在route建立搜尋link</h2>

<p><strong>config/routes.rb</strong></p>

<pre><code>get '/search', to: 'products#search'
</code></pre>

<h2>Step 6. 建立View</h2>

<pre><code>= form_tag search_path, :method =&gt; :get, class: 'search' do
.input-box
  = text_field_tag :keyword, params[:keyword], class: 'input-search'
  = button_tag "搜尋", class: 'icon-search btn btn-primary'
</code></pre>

<h2>Step 7. 恭喜本機端大致完成，只剩跑起來</h2>

<p>注意歐！這邊要做index歐～ 不然不會生效！</p>

<pre><code>rake sunspot:solr:start
rake sunspot:reindex 
</code></pre>

<p>ps. 當你跑完 <strong>rake sunspot:solr:start</strong>後，你會發現產生很多檔案，基本上我只有追蹤</p>

<p><strong>solr/conf/</strong>*底下的設定檔而已</p>

<h2>Step 7-1. 如果在做index時，你有遇到 “illegal character”</h2>

<p>請加上：</p>

<p><strong>config/initializers/sunspot_fix_illegal_chars.rb</strong></p>

<pre><code>module Sunspot
  # 
  # DataExtractors present an internal API for the indexer to use to extract
  # field values from models for indexing. They must implement the #value_for
  # method, which takes an object and returns the value extracted from it.
  #
  module DataExtractor #:nodoc: all
    # 
    # AttributeExtractors extract data by simply calling a method on the block.
    #
    class AttributeExtractor
      def initialize(attribute_name)
        @attribute_name = attribute_name
      end

      def value_for(object)
        Filter.new( object.send(@attribute_name) ).value
      end
    end

    # 
    # BlockExtractors extract data by evaluating a block in the context of the
    # object instance, or if the block takes an argument, by passing the object
    # as the argument to the block. Either way, the return value of the block is
    # the value returned by the extractor.
    #
    class BlockExtractor
      def initialize(&amp;block)
        @block = block
      end

      def value_for(object)
        Filter.new( Util.instance_eval_or_call(object, &amp;@block) ).value
      end
    end

    # 
    # Constant data extractors simply return the same value for every object.
    #
    class Constant
      def initialize(value)
        @value = value
      end

      def value_for(object)
        Filter.new(@value).value
      end
    end

    # 
    # A Filter to allow easy value cleaning
    #
    class Filter
      def initialize(value)
        @value = value
      end
      def value
        strip_control_characters @value
      end
      def strip_control_characters(value)
        return value unless value.is_a? String

        value.chars.inject("") do |str, char|
          unless char.ascii_only? and (char.ord &lt; 32 or char.ord == 127)
            str &lt;&lt; char
          end
          str
        end

      end
    end

  end
end
</code></pre>

<h1>Part 2. 如何利用solmate使用達成sunspot搜尋的推薦字詞</h1>

<p>因為我實在找不太到 sunspot的設定方法，所以我只好用work around的方式做到這件事情</p>

<p>我是使用 solmate這個 gem 來達成自動推薦。</p>

<p>由於solmate是使用redis當作臨時儲存的空間</p>

<p>若是redis 重啟&#8230;..那就gg了，你之前建的推薦資料都會不見。</p>

<p>所以，我有另外新建一個model: <strong>Keyword</strong> 去記錄使用者搜尋過的關鍵字</p>

<p>那就開始吧</p>

<h2>Step 1. 加上Gem</h2>

<p>首先，要先加入gem到 <strong>Gemfile</strong></p>

<pre><code>gem 'rack-contrib'
gem 'soulmate', :require =&gt; 'soulmate/server'
</code></pre>

<p>別忘了</p>

<pre><code>bundle install
</code></pre>

<p>再來你要確保你啟用<strong>redis-server</strong></p>

<pre><code>redis-server
</code></pre>

<h2>Step 2. 建立 Keyword model</h2>

<pre><code>rails g model keyword
</code></pre>

<p>然後 migration檔案：(這邊的結構單純就是為了soulmate設計)</p>

<pre><code>class CreateKeywords &lt; ActiveRecord::Migration
  def change
    create_table :keywords do |t|
        t.string :name
        t.integer :score
        t.string :url
        t.string :subtitle
        t.string :keyword_type
      t.timestamps
    end
  end
end
</code></pre>

<p>別忘了</p>

<pre><code>rake db:migrate
</code></pre>

<h2>Step 3. 將使用者輸入的關鍵字，記錄到solmate和keyword model [重要！]</h2>

<p>還記得，剛剛part 1的 Step 4，基本上我們是將下面的code加進去</p>

<pre><code># 如果有搜尋結果我們在記錄關鍵字 
if @products.present?   
    @keyword = Keyword.find_or_create_by(name: "#{params[:keyword]}") do |k|
        k.score = 0
        k.url = "/search?keyword=#{params[:keyword]}"
        k.keyword_type = "Keyword"
    end
    @keyword.update_attribute(:score, @keyword.score+=1) #代表多搜尋了一次
    remove_from_soulmate(@keyword) #先移除soulmate裡面的記錄
    load_into_soulmate(@keyword)    #更新新的紀錄
end

private

def load_into_soulmate(keyword)
    loader = Soulmate::Loader.new("#{keyword.keyword_type}")
    loader.add("term" =&gt; keyword.name, "id" =&gt; keyword.id, "score" =&gt; keyword.score, "data" =&gt; {
  "link" =&gt; "#{keyword.url}"
  })
end

def remove_from_soulmate(keyword)
    loader = Soulmate::Loader.new("#{keyword.keyword_type}")
    loader.remove("id" =&gt; keyword.id)
end
</code></pre>

<p>所以在 <strong>app/controllers/products_controller.rb</strong>，變成了</p>

<pre><code>class ProductsController &lt; ApplicationController
    def search
        @search = Product.search do
            fulltext params[:keyword] do 
              fields(:description, :name =&gt; 2.0)
              query_phrase_slop 1
            end
            with(:is_on_the_shelf, true)
            with(:created_at).less_than(Time.zone.now)
        end
        @products = @search.results

        # 如果有搜尋結果我們在記錄關鍵字 
        if @products.present?   
            @keyword = Keyword.find_or_create_by(name: "#{params[:keyword]}") do |k|
                k.score = 0
                k.url = "/search?keyword=#{params[:keyword]}"
                k.keyword_type = "Keyword"
            end
            @keyword.update_attribute(:score, @keyword.score+=1) #代表多搜尋了一次
            remove_from_soulmate(@keyword) #先移除soulmate裡面的記錄
            load_into_soulmate(@keyword)    #更新新的紀錄
        end

        private

        def load_into_soulmate(keyword)
            loader = Soulmate::Loader.new("#{keyword.keyword_type}")
            loader.add("term" =&gt; keyword.name, "id" =&gt; keyword.id, "score" =&gt; keyword.score, "data" =&gt; {
          "link" =&gt; "#{keyword.url}"
          })
        end

        def remove_from_soulmate(keyword)
            loader = Soulmate::Loader.new("#{keyword.keyword_type}")
            loader.remove("id" =&gt; keyword.id)
        end
        return @products
    end
end
</code></pre>

<h2>Step 4. 當使用者在輸入關鍵字時，進行推薦</h2>

<p>這邊我們需要借助 js了，這邊我就直接copy上面的參考資料了</p>

<pre><code>var ready = function(){
  var render, select;

  render = function(term, data, type) {
    return term;
  }

  select = function(term, data, type){
    // populate our search form with the autocomplete result
    $('#keyword').val(term);

    // hide our autocomplete results
    $('ul#soulmate').hide();

    // then redirect to the result's link 
    // remember we have the link in the 'data' metadata
    return window.location.href = data.link
  }

  $('#keyword').soulmate({
    url: '/autocomplete/search',
    types: ['keyword'],
    renderCallback : render,
    selectCallback : select,
    minQueryLength : 2,
    maxResults     : 10
  })


}
// when our document is ready, call our ready function
$(document).ready(ready);

// if using turbolinks, listen to the page:load event and fire our ready function
$(document).on('page:load', ready);
</code></pre>

<h2>Step 5. 別忘了，補上 JQUERY 和 SOULMATE.JS</h2>

<p>請參考： https://github.com/mcrowe/soulmate.js</p>

<p>下載：https://github.com/mcrowe/soulmate.js/blob/master/src/compiled/jquery.soulmate.js</p>

<p>因為它屬於第三方資源，所以我是把它放在</p>

<p><strong>vender/assets/javascripts/jquery.soulmate.js</strong></p>

<p>另外別忘了在你global的 <strong>app/assets/javascripts/application.js</strong>確保有</p>

<pre><code>//= require jquery
//= require jquery_ujs
//= require jquery.soulmate
</code></pre>

<h2>Step 6. 還有route</h2>

<p><strong>config/routes.rb</strong></p>

<pre><code>mount Soulmate::Server, :at =&gt; "/autocomplete"
</code></pre>

<h2>Step 7. CSS的部分，就請參考</h2>

<p><a href="http://josephndungu.com/tutorials/fast-autocomplete-search-terms-rails">FAST AUTOCOMPLETE SEARCH TERMS - RAILS</a></p>

<p>待續&#8230;&#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[HOWTO] 5 steps let your EC website applying GA E-commerce using Ruby on Rails]]></title>
    <link href="http://ccaloha.cc/blog/2014/08/17/5-steps-let-your-ec-website-applying-ga-e-commerce-using-ruby-on-rails/"/>
    <updated>2014-08-17T21:25:55+08:00</updated>
    <id>http://ccaloha.cc/blog/2014/08/17/5-steps-let-your-ec-website-applying-ga-e-commerce-using-ruby-on-rails</id>
    <content type="html"><![CDATA[<p>這篇你會知道如何在 Rails 加上 GA E-commerce的 code</p>

<p>基本上就是參考<a href="https://developers.google.com/analytics/devguides/collection/analyticsjs/ecommerce">GA- Ecommerce Tracking - Web Tracking (analytics.js)</a></p>

<p>google 是建議 GATC(google analytic tracking code)可以埋在當使用者完成交易後的感謝頁面</p>

<p>所以，我也是加上訂單created 後的動作，</p>

<p>就讓我們開始吧!</p>

<!-- more -->


<p></p>

<h2>Step 1. Order Controller</h2>

<p>在 <strong>app/controllers/orders_controller.rb</strong></p>

<p>因為需要多一個步驟，所以我是新增一個新的 action，<strong>send_data_to_ga_ec</strong></p>

<pre><code>def send_data_to_ga_ec
    @order = Order.find_by_order_no(params[:id]) 
end
</code></pre>

<h2>Step 2. Route and Controller</h2>

<p>在 <strong>config/routes.rb</strong></p>

<p>因為加了一個action, 所以我補上一條新的routing規則</p>

<pre><code>  get '/orders/send_data_to_ga_ec', :to =&gt; 'orders#send_data_to_ga_ec' 
</code></pre>

<p><em>ps. 注意！一定要放在resource :orders前面，不然會無效</em></p>

<p>回到 <strong>app/controllers/orders_controller.rb</strong></p>

<p>把當訂單完成後，要導向的動作，補上去</p>

<pre><code>def create
    @order = current_user.orders.build(permitted_params.order)
      if @order 
        @order.add_line_items_from_cart(@cart)
            respond_to do |format|
                if @order.save
                    format.html { 
                       redirect_to orders_send_data_to_ga_ec_path(:id =&gt; @order.order_no), notice: "感謝您的訂購，您可以點選[我的訂單]查看訂單資訊，或於幾分鐘後，檢查是否收到訂單確認信"
                    }
                else
                    format.html { render action: 'new' }
                end
            end
        end
end
</code></pre>

<h2>Step 3. View</h2>

<p>這邊就是單純把他購買的東西show出來而已！重點在下兩步！</p>

<pre><code>.home-block 
  h2.home-block-heading
    span  這是您本次的購買資訊

  table.table.cart-table.table-striped.table-bordered.table-hover.span12
        thead
          tr
            th 產品名稱
            th 購買數量
            th 購買顏色
            th 購買尺寸
            th 購買時優惠方案
        tbody
          - @order.line_items.each do |line_item|
              tr
                td= link_to line_item.product.name, product_path(line_item.product.id)
                td= line_item.count
                td= line_item.color
                td= line_item.size
                td= line_item.discount_name
</code></pre>

<h2>Step 4. Application Layout</h2>

<p>因為一般的GATC，我們都是裝在header，所以以Rails來說，就是寫在</p>

<p><strong>app/views/layouts/application.html.slim</strong></p>

<pre><code>  - if controller_name == 'orders' &amp;&amp; action_name == 'send_data_to_ga_ec'
    = render 'shared/google_analytics_ec' , user_id: current_user.try(:id), order: @order
  - else
    = render 'shared/google_analytics' , user_id: current_user.try(:id) 
</code></pre>

<p> 有沒有看到那個 <strong>if controller_name == &#8216;orders&#8217; &amp;&amp; action_name == &#8216;send_data_to_ga_ec&#8217;</strong></p>

<p> 就是那個讓我判斷說，當這個action時，要load不同的GATC</p>

<h2>Step 5. Partial View - for google_analytics_ec</h2>

<p>要填的參數，我就不再贅述了～ 請看GA 的官方 document</p>

<p><strong>app/views/shared/_google_analytics_ec.html.erb</strong></p>

<pre><code>&lt;script&gt;
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-XXXX-XXX', 'auto');
  &lt;%- if user_id.present? %&gt;
    ga('set', '&amp;uid', &lt;%= user_id %&gt;);
  &lt;% end %&gt;
  ga('require', 'displayfeatures');

  // =========================== GA-Ecommerce Start==========================
  ga('require', 'ecommerce');
  ga('ecommerce:addTransaction', {
    'id': '&lt;%= order.order_no %&gt;',                        // Transaction ID. Required.
    'affiliation': 'Heartbeat',                           // Affiliation or store name.
    'revenue': '&lt;%= order.total_price %&gt;',                // Grand Total.
    'shipping': '&lt;%= order.transaction.ship_fee %&gt;',      // Shipping.
    'tax': '' ,                                           // Tax.
    'currency': 'TWD'                                     // local currency code.
  });

  &lt;% order.line_items.each do |line_item| %&gt;
  ga('ecommerce:addItem', {
    'id': '&lt;%= order.order_no %&gt;',                        // Transaction ID. Required.
    'name': '&lt;%= line_item.product.name %&gt;',              // Product name. Required.
    'sku': '&lt;%= line_item.product.product_no %&gt;',         // SKU/code.
    'category': '&lt;%= line_item.product.tag_list%&gt;',       // Category or variation.
    'price': '&lt;%= line_item.product.selling_price%&gt;',     // Unit price.
    'quantity': '&lt;%= line_item.count%&gt;',                  // Quantity.
    'currency': 'TWD' 
  });
  &lt;% end %&gt;
  ga('ecommerce:send');
  // =========================== GA-Ecommerce End==========================
  ga('send', 'pageview');
&lt;/script&gt;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[HOWTO] 跳出視窗，內含動態選單]]></title>
    <link href="http://ccaloha.cc/blog/2014/08/08/howto-rails-popup-window-and-ajax-form/"/>
    <updated>2014-08-08T12:40:10+08:00</updated>
    <id>http://ccaloha.cc/blog/2014/08/08/howto-rails-popup-window-and-ajax-form</id>
    <content type="html"><![CDATA[<p>屁話區：</p>

<p>最近要準備開發比較user friendly的後台，於是乎，想到這樣的功能，</p>

<p>於是，我拿了之前開發過的專案來試玩看看～～ 快來看一下中間的眉角～(ps.其實也沒有什麼眉角&#8230;都是g來的XDDDD)</p>

<h2>需求描述：</h2>

<p>使用者希望點選&#8221;編輯&#8221;後，直接popup編輯視窗，裡頭還包含了動態表格</p>

<p>More specific, 來個簡單使用者情境：</p>

<blockquote><p>後台管理人員，需要幫其中一張訂單，加購商品</p></blockquote>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/%5Bhowto%5D%20%E8%B7%B3%E5%87%BA%E8%A6%96%E7%AA%97%EF%BC%8C%E5%85%A7%E5%90%AB%E5%8B%95%E6%85%8B%E9%81%B8%E5%96%AE/popup%E8%A6%96%E7%AA%97.png" alt="加購商品跳出視窗"></p>

<p>就讓我們繼續看下去&#8230;.這崮中有什麼訣竅～～～～</p>

<!-- more -->


<p>在文章的開始，當然要先感謝前人的知識、還有一堆Open Source</p>

<h2>REF</h2>

<p><a href="http://ericlondon.com/2014/03/13/rails-4-submit-modal-form-via-ajax-and-render-js-response-as-table-row.html">Rails 4 submit modal form via AJAX and render JS response as table row</a></p>

<p><a href="http://www.petermac.com/rails-3-jquery-and-multi-select-dependencies/">Rails 3, jQuery and multi-select dependencies</a></p>

<p><a href="http://getbootstrap.com/javascript/#modals">Bootstrap- modal.js</a> => 用來做popup視窗</p>

<p><a href="http://ivaynberg.github.io/select2/">Selec2 js</a> => 用來做動態選資料</p>

<h1>流程</h1>

<ol>
<li>管理人員在後台，訂單的list頁，有一個加購的button</li>
<li>點選這個button後，會跳出一個視窗</li>
<li>視窗裡面有一個表格，上面會預先帶入這個訂單的ID，還有一個產品編號的select功能</li>
<li>當管理人員慢慢打字輸入了產品編號，系統會自動搜尋可能的結果</li>
<li>選擇了一個產品編號，底下會自動跳出這個加購的資訊，例如：顏色、尺寸、數量</li>
</ol>


<p>ps. 我的View是使用slim</p>

<h1>流程一：管理人員在後台，訂單的list頁，有一個加購的button</h1>

<p>你可能會有一個訂單清單</p>

<p>在 <em>app/views/orders/index.html.slim</em> 你只要加上</p>

<pre><code>= link_to '加購', '#add_product_modal', 'data-toggle' =&gt; 'modal', class: 'btn 
btn-mini', 'data-order' =&gt; order.id
</code></pre>

<p><strong>重點是那個&#8217;data-toggle&#8217; => &#8216;modal&#8217;</strong> => 加了就有modal的功效歐～～</p>

<p>還有另外一個伏筆，那個 &#8216;data-order&#8217; => order.id</p>

<p>慢慢讀下去你就會知道那個要幹嘛了！</p>

<p>大概可能會長這樣</p>

<pre><code>- @orders.each do |order|
    = ...
    = link_to '加購', '#add_product_modal', 'data-toggle' =&gt; 'modal', class: 'btn btn-mini', 'data-order' =&gt; order.id
</code></pre>

<p>ps. 這邊你可能會有個疑惑，囧～這個link_to 怎麼沒有 link to 的位置?! 人客啊～不要急～讓我們繼續看下去</p>

<h3>成果：</h3>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/%5Bhowto%5D%20%E8%B7%B3%E5%87%BA%E8%A6%96%E7%AA%97%EF%BC%8C%E5%85%A7%E5%90%AB%E5%8B%95%E6%85%8B%E9%81%B8%E5%96%AE/%E8%A8%82%E5%96%AElist.png" alt="訂單list"></p>

<h1>流程二：點選這個button後，會跳出一個視窗</h1>

<p>在 <em>app/views/orders/index.html.slim</em> 繼續加上，我是把它加在最底下，不過你也可以考慮拉出一個partial view，depend on you摟～</p>

<p>不要覺得好像很厲害(但是寫這個套件很厲害!)～這一串是從Modal官網看到的sample，只是把它拿出來用而已</p>

<pre><code>.modal.fade#add_product_modal tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true"
  .modal-dialog
    .modal-content
      .modal-header
        button.close type="button" data-dismiss="modal" aria-hidden="true"
          | &amp;times;
        h4.modal-title#myModalLabel
          | 加購產品
      .modal-body
        = render 'extra_buy_form' 
      .modal-footer
        button type="button" class="btn btn-default" data-dismiss="modal"
          | 關閉
</code></pre>

<p>這裡頭有ㄧ個關鍵，就是那個跳出來視窗，裡頭的內容(在我們的例子，也就是表格)</p>

<p>我把它寫成 partial view: <strong>extra_buy_form</strong></p>

<p>其他的東東，我想看那個class name就知道了吧～</p>

<h2>流程二 - 1 既然都已經寫好modal，那當然要記得要有他的js歐～不然不會有效果</h2>

<p>加入在<em>app/assets/javascripts/admin.js</em> (這是因為我的admin有自己的版，裡頭會抓admin.js)</p>

<pre><code>//= require bootstrap.min 
</code></pre>

<h1>流程三：視窗裡面有一個表格，上面會預先帶入這個訂單的ID，還有一個產品編號的select功能</h1>

<p>這邊就進到了，<strong>extra_buy_form</strong>的部分，</p>

<p>由於是在order底下，所以我的檔案是建立在 <em>app/views/admin/orders/_extra_buy_form.html.slim</em></p>

<pre><code>= simple_form_for :line_item,:url =&gt; update_extra_buy_admin_orders_path, defaults: { input_html: { remote: true, 'data-model' =&gt; 'product'}}do |f|
  = f.input :order_id,  label: '加入訂單編號：'
  = f.input :product_id, input_html: {class: 'form-control', data: {product_selector: 'true'} }
  #buying_detail
  .text-center.small-padding
    = submit_tag '送出', disabled_with: '送出中', class: 'btn block-btn'
</code></pre>

<p>這邊有幾個點要講：</p>

<ol>
<li>由於我們這個不屬於orde model的屬性，也沒有任何 instance variable (例如：@line_item)被帶入，所以simple_form 我是使用 symbol (:) 來表示</li>
<li>再來，那個url，就代表著等一下這張表格會被 post到哪裡，等下會說明 order controller的部分和route</li>
<li>第三行，就是要用select2 來實作的動態select內容的寫法，最重要的是那個：data: {product_selector}</li>
<li>第四行非常重要的！ 當你選完產品id後，這邊就會render出這個產品的相關資訊，等一下會介紹到！！！</li>
<li>那個order_id，嘿嘿～～ 等一下流程五會提到！</li>
</ol>


<h2>流程四：當管理人員慢慢打字輸入了產品編號，系統會自動搜尋可能的結果</h2>

<p>這邊就是select2的實作！</p>

<p>首先，先建立一個js吧～ <em>app/assets/javascripts/admin/proudct_selector.js.coffee</em></p>

<pre><code>jQuery ($) -&gt;
  $(document).on 'ready page:load', -&gt;
    $('[data-product-selector]').each -&gt;
      $this = $(this)
      $this.select2(
        placeholder: "輸入產品編號"
        minimumInputLength: 0
        allowClear: true

        ajax:
          url: '/admin/products/get_product_list.json'
          data: (term, page) -&gt; q: term
          results: (data, page) -&gt; results: data

        initSelection: (element, callback) -&gt;
          if $this.val() isnt ''
            $.ajax(
              url: "/admin/products/#{$this.val()}.json"
              success: (data) -&gt; callback(data)
            )
      )
</code></pre>

<p>這邊有幾個點要講：</p>

<ol>
<li><strong>$(&#8216;[data-product-selector]&#8217;)</strong> 就是找到 這個 => <strong>data: {product_selector}</strong></li>
<li><strong>url: &#8216;/admin/products/get_product_list.json&#8217;</strong> => 這邊要去跟controller要資料</li>
<li><strong>url: &#8220;/admin/products/#{$this.val()}.json&#8221;</strong> => 這邊其實用不太到，不過，如果你可能會有預設值的話，譬如說，你是某個form 可以給人家編輯</li>
</ol>


<h3>成果：</h3>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/%5Bhowto%5D%20%E8%B7%B3%E5%87%BA%E8%A6%96%E7%AA%97%EF%BC%8C%E5%85%A7%E5%90%AB%E5%8B%95%E6%85%8B%E9%81%B8%E5%96%AE/select2%20serarch%E5%8A%9F%E8%83%BD.png" alt="select2 search"></p>

<h2>流程四 - 1：既然這邊用到了select2、還有你自己寫的js，別忘了&#8230;.</h2>

<p>加入在<em>app/assets/javascripts/admin.js</em> (這是因為我的admin有自己的版，裡頭會抓admin.js)</p>

<pre><code>//= require select2
//= require admin/product_selector
</code></pre>

<h2>流程四 - 2：剛剛提到說兩個 admin/products/XXX.json 就是要跟controller拿資料，所以當然我們要新增action給他摟</h2>

<p>請加在： <em>app/controllers/admin/products_controller.rb</em></p>

<p>首先</p>

<pre><code>def serial_products(products)
    products.map { |p| {id: p.id, text: p.product_no}}
end

def show 
    @product = Product.find(params[:id])

    respond_to do |f|
        f.html
        f.json { render json: serial_products(@product) } #要給ajax使用
    end
end
</code></pre>

<p>再來</p>

<pre><code>def get_product_list
    @products = if params[:q]
                    Product.on_sale.filter_by(params[:q])
                else
                    Product.on_sale
                end
    respond_to do |f|
        f.json { render json: serial_products(@products)} #只給ajax使用
    end
end
</code></pre>

<p>重要的眉角：</p>

<pre><code>if params[:q]
    Product.on_sale.filter_by(params[:q])
...
</code></pre>

<p>為甚麼要有這個呢？</p>

<p>那是因為<em>app/assets/javascripts/admin/proudct_selector.js.coffee</em>這個js不是有一個</p>

<pre><code>url: '/admin/products/get_product_list.json'
data: (term, page) -&gt; q: term
</code></pre>

<p>有沒有看到那個 “q“</p>

<p>沒錯！ 就是那個q，他會丟一個param[:q]的值給get_product_list，</p>

<p>也就是這個，我們就可以達成 <strong>慢慢打字輸入了產品編號，系統會自動搜尋可能的結果</strong></p>

<h2>流程四 - 3： 從上一個步驟(四-3)裡頭有&#8221;Product.on_sale.filter_by&#8221;，這邊是model的方法</h2>

<p>我們來看一下model，並加在 <em>app/models/product.rb</em></p>

<pre><code>scope :on_sale, -&gt; {where(is_added: true)}
scope :filter_by, lambda { |q| where('product_no LIKE :qurey', qurey: "%#{q}%") }
</code></pre>

<p>這邊小眉角：</p>

<pre><code>where('product_no LIKE :qurey', qurey: "%#{q}%")
</code></pre>

<p>這個就是rails用來做 like搜尋(我把它稱作模糊搜尋，不知道有沒有錯)</p>

<h2>流程四 - 4： 既然controller都寫完了，別忘記route歐！</h2>

<p>要改：<em>config/routes.rb</em></p>

<pre><code>namespace :admin do

  ...

  resources :products do
    ...

    collection { get :get_product_list}
  end

  resources :orders do
    ...
    collection { post :update_extra_buy }
  end

  ....

end
</code></pre>

<h1>流程五：選擇了一個產品編號，底下會自動跳出這個加購的資訊，例如：顏色、尺寸、數量</h1>

<p>這邊我們要來看，<em>app/views/admin/orders/_extra_buy_form.html.slim</em></p>

<p>裡面的</p>

<pre><code>  #buying_detail
</code></pre>

<p>怪怪&#8230;.為甚麼這一行，就可以讓它自動跳出加購的資訊？！</p>

<p>接下來厲害了！！</p>

<h2>流程五-1：表格上面select 也已經動態可以選了，那底下的動態表格，怎麼沒有render出來？！</h2>

<p>這邊 我們必須使用一個javascript來監控那個select2的行為， 不過貌似可以寫在select2裡面，但是&#8230;我是覺得怪怪的～應該要猜開才是(ps. 其實是我不太會寫XDDDD)</p>

<p>沒錯！ 我們需要新增 <em>app/assets/admin/order.js</em></p>

<pre><code>jQuery(function($) {
  // when the #data-product-selector field changes
  $("[data-product-selector]").change(function() {
    var product_id = $('[data-product-selector]').val();
    if(product_id == "") product_id="0";
    var product = 'product_id='+ product_id;
    jQuery.get("/admin/products/update_product_atts",product, function(data){
        $("#buying_detail").html(data);
    })
    return false;
  });

  $(document).on('click', '[data-toggle=modal]', function(e) {
    $('#line_item_order_id').val(e.target.getAttribute('data-order'));
  });

})
</code></pre>

<p>重點：</p>

<p>1.jQuery.get(&#8220;/admin/products/update_product_atts&#8221;,product, function(data){</p>

<pre><code>        $("#buying_detail").html(data);
    })
</code></pre>

<p>我覺得 可以算是本日最精彩！</p>

<p>第一次知道原來partial view可以這樣用！！！！</p>

<p>等一下在講那個update_product_atts</p>

<p>2.<strong>$(&#8216;#line_item_order_id&#8217;).val(e.target.getAttribute(&#8216;data-order&#8217;));</strong></p>

<p>這個是為了那個pop視窗 <em>app/views/admin/orders/_extra_buy_form.html.slim</em> 的裡頭預設的order id值</p>

<pre><code>= simple_form_for :line_item,:url =&gt; update_extra_buy_admin_orders_path, defaults: { input_html: { remote: true, 'data-model' =&gt; 'product'}}do |f|
  = f.input :order_id,  label: '加入訂單編號：'
</code></pre>

<p>為甚麼會有 <strong>e.target.getAttribute(&#8216;data-order&#8217;)</strong></p>

<p>那是因為，我希望直接知道 使用者點的是那張訂單，所以&#8230;. 還記得&#8230;.</p>

<p>在 <em>app/views/orders/index.html.slim</em> 你只要加上</p>

<pre><code>= link_to '加購', '#add_product_modal', 'data-toggle' =&gt; 'modal', class: 'btn 
btn-mini', 'data-order' =&gt; order.id
</code></pre>

<p>有沒有看到&#8217;data-order&#8217; => order.id</p>

<p>所以那段js只是把 值抓出來而已，然後再餵給 <strong>f.input :order_id</strong></p>

<h2>流程五-2：/admin/products/update_product_atts 、$(&#8220;#buying_detail&#8221;).html(data) 在搞什麼鬼？</h2>

<p>其實從js來看，就會知道他就是要跟 products controller拿東東</p>

<p>所以，繼續來編輯我們的 <em>app/controllers/admin/products_controller.rb</em></p>

<pre><code> def update_product_atts
        product = Product.find(params[:product_id]) unless params[:product_id].blank?
        render :partial =&gt; "admin/orders/product_attrs", :locals =&gt; { :product =&gt; product} #這邊還挺酷的，只會render那個partial頁面
 end
</code></pre>

<p>還有view歐  <em>app/views/admin/order/_product_attrs.html.slim</em></p>

<pre><code>- if product.present?
  = simple_form_for :line_item_attr, defaults: { input_html: { remote: true, url: '#'}} do |f|
    = f.input :color, label: '顏色：' , collection: "#{product.color}".split(",").map(&amp;:to_s)
    = f.input :size, label: '尺寸：', collection: "#{product.size}".split(",").map(&amp;:to_s)
    = f.input :count, label: '數量：' , collection: (1..50), selected: '1'
</code></pre>

<p>有沒有看到～ 那個</p>

<p><strong>jQuery.get(&#8220;/admin/products/update_product_atts&#8221;,product</strong></p>

<p>就是會丟出一個 params[:product_id] 給 product controller</p>

<p>當controller 抓到 id 後，就把那個product 資料，依照  admin/orders/product_attrs 樣子render給data，然後讓</p>

<pre><code>$("#buying_detail").html(data); 
</code></pre>

<p>把資料畫出來</p>

<p>傑克！這實在太神奇了！！！！！！！！！！！！</p>

<h3>成果：</h3>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/%5Bhowto%5D%20%E8%B7%B3%E5%87%BA%E8%A6%96%E7%AA%97%EF%BC%8C%E5%85%A7%E5%90%AB%E5%8B%95%E6%85%8B%E9%81%B8%E5%96%AE/%E8%87%AA%E5%8B%95%E5%B8%B6%E5%87%BAform.png" alt="select2 search"></p>

<h2>流程五-3：既然你自己寫的js，別忘了&#8230;.</h2>

<p>加入在<em>app/assets/javascripts/admin.js</em> (這是因為我的admin有自己的版，裡頭會抓admin.js)</p>

<pre><code>//= require admin/orders
</code></pre>

<h2>打完收工！</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[閱讀筆記系列] 23 + 1 設計模式 - Part4. 工廠方法(Factory Method)]]></title>
    <link href="http://ccaloha.cc/blog/2014/07/11/reading-note-23-plus-1-design-pattern-part3-factory-method/"/>
    <updated>2014-07-11T22:57:34+08:00</updated>
    <id>http://ccaloha.cc/blog/2014/07/11/reading-note-23-plus-1-design-pattern-part3-factory-method</id>
    <content type="html"><![CDATA[<p>重點在於</p>

<blockquote><p>將建立物件的程式碼集中在一個物件或行為中，可避免程式碼重複，方便以後修改</p></blockquote>

<p>你是否常需要建立某個object，但是這個object內容卻時常需要變化，但是又很類似</p>

<p>之前的閱讀筆記(懶惰版)</p>

<iframe id="xmindshare_embedviewer" src="http://www.xmind.net/embed/w4XW?size=medium" width="750px" height="450px" frameborder="0" scrolling="no"></iframe>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何動態管理權限-使用cancan]]></title>
    <link href="http://ccaloha.cc/blog/2014/06/30/dynamic-roles-and-permissions-management-using-cancan/"/>
    <updated>2014-06-30T15:27:55+08:00</updated>
    <id>http://ccaloha.cc/blog/2014/06/30/dynamic-roles-and-permissions-management-using-cancan</id>
    <content type="html"><![CDATA[<p>這篇是參考自<a href="http://blog.joshsoftware.com/2012/10/23/dynamic-roles-and-permissions-using-cancan/">Dynamic roles and permissions using cancan</a></p>

<p>大概分成幾個流程：</p>

<ol>
<li>建立Gemfile</li>
<li>建立需要的Model</li>
<li>寫rake爬controller的action(懶惰專用，不想要資料庫一個一個建權限)</li>
<li>設定Ability => 這邊是關鍵，他會去抓user的role底下的權限</li>
<li>設定Controller => 用來擋權限,設定權限</li>
<li>設定route</li>
<li>建立View</li>
</ol>


<h1>前言</h1>

<p>網站後台往往可能有多個員工進去作業，但是有些功能並不希望開放給低層級的員工使用，</p>

<p>所以後台也需要做權限管理～</p>

<p>但是人員進進出出，陞遷、轉職相對應的職務也會調整，總不能每次都要去改hard code吧～～</p>

<p>所以才有動態權限設定的需求！</p>

<h1>Step 1. Gemfile</h1>

<p>因為我們要使用Railscast網站開發者兼Boss Ryanb寫的<a href="https://github.com/ryanb/cancan">cancan</a>，提供權限管理的服務</p>

<p><strong>[手做]</strong> 所以，要在Gemfile寫入</p>

<pre><code>gem 'cancan'
</code></pre>

<p><strong>[手做]</strong> 在terminal執行</p>

<pre><code>bundle install
</code></pre>

<!-- more -->


<h1>Step 2. 建立Model</h1>

<p>由於後台的管理員，</p>

<p>在建立model之前，先來看一下Model的架構，</p>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/%28Blog%E4%BD%BF%E7%94%A8%29%E5%8B%95%E6%85%8B%E6%AC%8A%E9%99%90%E7%AE%A1%E7%90%86%20%E8%B3%87%E6%96%99%E5%BA%AB%E8%A8%AD%E8%A8%88.jpg" alt="cancan dynamic database design"></p>

<p>讓我們開始動手吧</p>

<h3>Step 2-1. 建立Model: Role</h3>

<p>Role 的資料表要有：</p>

<pre><code># == Schema Information
#
# Table name: roles
#
#  id         :integer          not null, primary key
#  name       :string(255)
#  created_at :datetime
#  updated_at :datetime
#
</code></pre>

<p><strong>[手做]</strong> 在terminal</p>

<pre><code>rails g model role
</code></pre>

<p><strong>[手做]</strong> 在檔案db/migrate/時間戳記_create_roles.rb</p>

<pre><code>class CreateRoles &lt; ActiveRecord::Migration
  def change
    create_table :roles do |t|
      t.string :name
      t.timestamps
    end
  end
end
</code></pre>

<p><strong>[手做]</strong> 在檔案app/models/role.rb</p>

<pre><code>class Role &lt; ActiveRecord::Base
  has_many :admin_users         
  has_many :role_permissionships
  has_many :permissions , :through =&gt; :role_permissionships

  def set_permissions(permissions)
    permissions.each do |id|
      permission = Permission.find(id)
      self.permissions &lt;&lt; permission
    end
  end

end
</code></pre>

<p>其中set_permissions就是設定這個role底下的權限</p>

<h3>Step 2-2. 建立Model: Permission</h3>

<p>Permission 的資料表要有：</p>

<pre><code># == Schema Information
#
# Table name: permissions
#
#  id            :integer          not null, primary key
#  name          :string(255)
#  subject_class :string(255)
#  action        :string(255)
#  created_at    :datetime
#  updated_at    :datetime
#
</code></pre>

<p><strong>[手做]</strong> 在terminal</p>

<pre><code>rails g model permission
</code></pre>

<p><strong>[手做]</strong> 在檔案db/migrate/時間戳記_create_permissions.rb</p>

<pre><code>class CreatePermissions &lt; ActiveRecord::Migration
  def change
    create_table :permissions do |t|
      t.string :name
      t.string :subject_class
      t.string :action
      t.timestamps
    end
  end
end
</code></pre>

<p><strong>[手做]</strong> 在檔案app/models/permission.rb</p>

<p>ps. 其實，permision好像不需要知道role有哪些，不過我還是保留這個關聯</p>

<pre><code>class Permission &lt; ActiveRecord::Base
  has_many :role_permissionships
  has_many :roles , :through =&gt; :role_permissionships
end
</code></pre>

<h3>Step 2-3. 建立Model: Role Permissionship</h3>

<p>主要是想要連結Role和Permission</p>

<p>RolePermissionship 的資料表要有：</p>

<pre><code># == Schema Information
#
# Table name: role_permissionships
#
#  id            :integer          not null, primary key
#  role_id       :integer
#  permission_id :integer
#  created_at    :datetime
#  updated_at    :datetime
#
</code></pre>

<p><strong>[手做]</strong> 在terminal</p>

<pre><code>rails g model role_permissionship
</code></pre>

<p><strong>[手做]</strong> 在檔案db/migrate/時間戳記_create_role_permissionships.rb</p>

<pre><code>class CreateRolePermissionships &lt; ActiveRecord::Migration
  def change
    create_table :role_permissionships do |t|
      t.belongs_to :role
      t.belongs_to :permission
      t.timestamps
    end
  end
end
</code></pre>

<p><strong>[手做]</strong> 在檔案app/models/role_permissionship.rb</p>

<pre><code>class RolePermissionship &lt; ActiveRecord::Base
  belongs_to :role
  belongs_to :permission
end
</code></pre>

<h3>Step 2-4. 補上role_id: AdminUser</h3>

<p>Adminuser資料表要有：</p>

<pre><code># == Schema Information
#
# Table name: admin_users
#
#  id                     :integer          not null, primary key
#  email                  :string(255)      default(""), not null
#  encrypted_password     :string(255)      default(""), not null
#  reset_password_token   :string(255)
#  reset_password_sent_at :datetime
#  remember_created_at    :datetime
#  sign_in_count          :integer          default(0)
#  current_sign_in_at     :datetime
#  last_sign_in_at        :datetime
#  current_sign_in_ip     :string(255)
#  last_sign_in_ip        :string(255)
#  old_data               :text
#  created_at             :datetime
#  updated_at             :datetime
#  role_id                :integer
#
</code></pre>

<p>ps. 這是本來的admin_user (透過devise建立的)，這邊我就跳過了，主要是要加入<strong>role_id</strong></p>

<p><strong>[手做]</strong> 在terminal</p>

<pre><code>rails g migration add_role_id_to_admin_user
</code></pre>

<p><strong>[手做]</strong> 在檔案db/migrate/時間戳記_add_role_id_to_admin_user.rb</p>

<pre><code>class AddRoleIdToAdminUser &lt; ActiveRecord::Migration
  def change
    add_column :admin_users, :role_id , :integer
  end
end
</code></pre>

<p><strong>[手做]</strong> 在檔案app/models/admin_user.rb</p>

<pre><code>class AdminUser &lt; ActiveRecord::Base
  devise :database_authenticatable, :rememberable, :trackable, :validatable,
         :recoverable
  serialize :old_data, Hash
  belongs_to :role

  def super_admin?
    self.role.name == "Super Admin"
  end
end
</code></pre>

<h1>Step 3 寫rake 去爬 所有controller資料</h1>

<p>原始程式可參考：<a href="http://blog.joshsoftware.com/2012/10/23/dynamic-roles-and-permissions-using-cancan/">Dynamic roles and permissions using cancan</a></p>

<p><strong>[手做]</strong> 新增檔案permissions.rake在 lib/tasks/底下</p>

<p><strong>[手做]</strong> 在檔案lib/tasks/permissions.rake</p>

<p>簡單來說，就是去爬controllers/admin底下的controller的所有action然後把它建立到permission 資料表</p>

<pre><code>namespace 'permissions' do 

  desc "Loading all models and their related controller methods inpermissions table."
  task(:permissions =&gt; :environment) do 
    arr = []
    # Load all the admin controllers
    controllers = Dir.new("#{Rails.root}/app/controllers/admin").entries
    controllers.each do |entry|
      if entry =~ /_controller/
        arr &lt;&lt; "Admin::#{entry.camelize.gsub('.rb','')}".constantize #namescoped controllers
      end
    end

    arr.each do |controller|
      # only that controller which represents a model
      if controller.permission
        # create a universal permission for that model. eg: "manage User" will allow all actions on User model.
        write_permission(controller.permission,"manage","manage") # add permission to do CRUD for every model.
        controller.action_methods.each do |method|
          if method =~ /^([A-Za-z\d*]+)+([\w]*)+([A-Za-z\d*]+)$/ #add_user , add_user_info, Add_user, add_User
            name, cancan_action = eval_cancan_action(method)
            write_permission(controller.permission,cancan_action,name)
          end
        end
      end
    end
  end
end

# this method returns the cancan action for the action passed.
def eval_cancan_action(action)
  case action.to_s
  when "index"
    name = 'list'
    cancan_action = "index" #let the cancan action be the actual method name
    action_desc = I18n.t :list
  when "new", "create"
    name = 'create and update'
    cancan_action = "create"
    action_desc = I18n.t :create
  when "show"
    name = "view"
    cancan_action = "view"
    action_desc = I18n.t :view
  when "edit","update"
    name = "create and update"
    cancan_action = "update"
    action_desc = I18n.t :update
  when "delete", "destroy"
    name = 'delete'
    cancan_action = 'destroy'
    action_desc = I18n.t :destroy
  else
    name = action.to_s
    cancan_action = action.to_s
    action_desc = "Other: " &lt; cancan_action
  end
  return name, cancan_action 
end

# check if the permission is present else add a new one.
def write_permission(model, cancan_action, name)
  permission = Permission.find(:first, :conditions =&gt; ["subject_class = ? and action = ? ", model, cancan_action])
  unless permission
    permission = Permission.new
    permission.name = name
    permission.subject_class = model
    permission.action = cancan_action
    permission.save    
  end
end
</code></pre>

<p><strong>[手做]</strong> 在terminal</p>

<pre><code>rake -T #查看所有可執行的rake
rake permissions:permissions #做剛剛那個rake file的事
</code></pre>

<h1>Step 4. 設定Ability</h1>

<p><strong>[手做]</strong> 在terminal</p>

<pre><code>rails g cancan:ability
</code></pre>

<p><strong>[手做]</strong> 在檔案app/models/ability.rb</p>

<pre><code>class Ability
  include CanCan::Ability

  def initialize(user)
    user.role.permissions.each do |permission|
        if permission.subject_class == 'all'
            can permission.action.to_sym, permission.subject_class.to_sym
        else
            can permission.action.to_sym, permission.subject_class.constantize
        end
    end
  end
end
</code></pre>

<p><strong>這邊就是關鍵</strong></p>

<p>他會動態去load使用者，然後看他權限</p>

<pre><code>user.role.permissions.each do |permission|
      if permission.subject_class == 'all'
          can permission.action.to_sym, permission.subject_class.to_sym
      else
          can permission.action.to_sym, permission.subject_class.constantize
      end
  end
</code></pre>

<h1>Step 5. 建立管理者、員工並給權限</h1>

<p><strong>[手做]</strong> 在檔案db/seeds.rb</p>

<pre><code># the highest role with all the permissions.
Role.create!(:name =&gt; "Super Admin")

# other role
Role.create!(:name =&gt; "Staff")

#create universal permission
Permission.create!(:subject_class =&gt; "all", :action =&gt; "manage")

#assign super admin the permission to manage all the models and controllers
role = Role.find_by_name('Super Admin')
role.permissions &lt;&lt; Permission.find_by(:subject_class =&gt; 'all', :action =&gt; "manage")

user = AdminUser.new(email: 'aloha@aloha.aloha', password: '12345678')
user.role = role
user.save

AdminUser.create(email: 'staff@staff.staff', password: '12345678', :role_id =&gt; Role.find_by_name('Staff').id)
</code></pre>

<p><strong>[手做]</strong> 在terminal</p>

<pre><code>rake db:seed
</code></pre>

<p>所以等一下你可以使用aloha@aloha.aloha登入最高權限，使用staff@staff.staff登入測試</p>

<h1>Step 6. 設定Controller</h1>

<p>因為我是希望後台有權限管理，所以這邊我是使用admin_controller</p>

<p><strong>[手做]</strong> 在檔案app/controllers/admin_controller.rb</p>

<pre><code>class AdminController &lt; ApplicationController
  rescue_from CanCan::AccessDenied do |exception|
    flash[:alert] = "存取失敗，你沒有權限做這個動作"
    redirect_to admin_root_path 
  end
  # 下面不做的話，會有CanCan ActiveModel::ForbiddenAttributesError 的問題
  # As load_resource will only load if resource is not there. 
  # 下面那個步驟就是要用，就是這邊resource_params 貌似要使用 send(params.require(:role).permit(:name)) 才會work
  # def build_resource
  #       resource = resource_base.new(resource_params || {})
  #         .....
  # end
  before_filter do
    resource = controller_path.singularize.gsub('admin/', '').to_sym
    method = "#{resource}_params"
    params[resource] &amp;&amp;= send(method) if respond_to?(method, true)
  end
  before_action :authenticate_admin_user!
  load_and_authorize_resource
  before_filter :load_permissions # call this after load_and_authorize else it gives a cancan error.
  layout 'admin'

  protected

  # Derive the model name from the controller. EX: UsersController will return User
  def self.permission
    return name = self.name.gsub('Controller','').singularize.split('::').last.constantize.name rescue nil
  end

  def current_ability
    @current_ability ||= Ability.new(current_admin_user)
  end

  # load the permissions for the current admin user so that UI can be manipulated.
  def load_permissions 
    @current_permissions = current_admin_user.role.permissions.collect{|i| [i.subject_class, i.action]}
  end

end
</code></pre>

<p>如果需要在後台可以編輯的話，我們當然需要role controller</p>

<p><strong>[手做]</strong> 在檔案app/controllers/admin/roles_controller.rb</p>

<pre><code>class Admin::RolesController &lt; AdminController

  #only user with super admin role can access
  before_filter :is_super_admin?

  def index
    #you dont want to set the permissions for Super Admin.
    @roles = Role.all.keep_if{|i| i.name != "Super Admin"}
  end

  def show
    @role = Role.find(params[:id])
    @permissions = @role.permissions
  end

  def edit
    @role = Role.find(params[:id])
    @permissions = Permission.all
    @role_permissions = @role.permissions.collect{|p| p.id}
  end

  def update
    @role = Role.find(params[:id])
    @role.permissions = []
    @role.set_permissions(params[:permissions]) if params[:permissions]
    if @role.save
      redirect_to admin_roles_path and return
    end
    @permissions = Permission.all
    render 'edit'
  end

  def new
    @role = Role.new
  end

  def create
    @role = Role.new(permitted_params.role)
    if @role.save
      redirect_to admin_roles_path, flash: { notice: "成功建立角色#{@role.name}" }
    else
      render :new
    end
  end

  def role_params
    params.require(:role).permit(:name)
  end

  private

  def is_super_admin?
    redirect_to admin_root_path and return unless current_admin_user.super_admin?
  end
end
</code></pre>

<h1>Step 7. 建立routes</h1>

<p><strong>[手做]</strong> config/routes.rb</p>

<p>在admin裏面新增</p>

<pre><code> namespace :admin do
  ...
  resources :roles
  ...
 end
</code></pre>

<h1>Step 8. 建立View</h1>

<p>首先，當然是要new，但是這邊我很單純，我就是讓他先建立角色，之後再編輯權限</p>

<p>所以&#8221;建立&#8221;的地方很簡單</p>

<p><strong>[手做]</strong> app/views/admin/roles/new.html.slim</p>

<pre><code>= simple_form_for [:admin, @role], wrapper: :admin, html: { class: 'form-horizontal' } do |f|
  = f.input :name, label: '角色名稱'
  .form-actions
    = f.submit '送出', disabled_with: '送出中', class: 'btn btn-primary'
</code></pre>

<p><strong>[手做]</strong> app/views/admin/roles/edit.html.slim</p>

<p>&#8220;編輯&#8221;的部分，可以用打勾的方式選取權限</p>

<pre><code>.span12
  = form_for @role , :url =&gt; admin_role_path, :method =&gt; :put do |f|
    .fieldset
      legend 
        | Role： 
        = @role.name
      br 權限管理
      br
      table.table.table-bordered.table-striped.table-hover
        thead 
          tr 
            th Class
            th Action
            th 是否有權限
            - @permissions.each do |permission|
              tr 
                td= permission.subject_class
                td= permission.action
                td= check_box_tag 'permissions[]', permission.id, @role_permissions.include?(permission.id), {array: true, class: "check_box"}
      .span16.offset2
        .clearfix
          = f.submit "更新", :class =&gt; 'btn btn-primary'
          = link_to '取消', admin_roles_path  
</code></pre>

<p>大概會像這樣</p>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/Role_edit_sample.png" alt="cancan dynamic database design"></p>

<p><strong>[手做]</strong> app/views/admin/roles/index.html.slim</p>

<pre><code>h1 角色清單
- content_for :btns do
  = link_to '新增角色', new_admin_role_path, class: 'btn btn-primary'
table.table.table-bordered.table-striped.table-hover
  thead
    tr
      th Name
      th
      th
  tbody
    - @roles.each do |role|
      tr
        td= role.name
        td= link_to 'Show', admin_role_path(role)
        td= link_to 'Edit', edit_admin_role_path(role)
br
</code></pre>

<p>大概會像這樣</p>

<p><img src="https://dl.dropboxusercontent.com/u/22307926/Blog%20Image/Role_index_sample.png" alt="cancan dynamic database design"></p>

<p>ps 若是你像我一樣，有一個後台的管理頁面</p>

<p>你可能需要加上，在你的menu裏面</p>

<pre><code>li
  = link_to "權限管理", admin_roles_path
</code></pre>

<p>以上！大功告成</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSV匯入中文編碼問題]]></title>
    <link href="http://ccaloha.cc/blog/2014/05/14/fight-invalid-utf-8-bytes-when-csv-importing/"/>
    <updated>2014-05-14T11:17:11+08:00</updated>
    <id>http://ccaloha.cc/blog/2014/05/14/fight-invalid-utf-8-bytes-when-csv-importing</id>
    <content type="html"><![CDATA[<blockquote><p>情境ㄧ：若是使用者(window平台)先從自己系統download資料，之後要再匯入</p></blockquote>

<p>對於CSV檔案本身解決方法&#8230;.</p>

<h3>=>  請他先用google drive 上傳他的CSV檔，再從google抓下來</h3>

<p>程式端醜陋的解法</p>

<pre><code>def import(file)
  csv_text = File.read(file.csv_textpath)
  begin  
    csv_text_new = Iconv.conv('utf-8','big5',csv_text) #若是使用者使用自己excel轉csv匯入
  rescue  
    #do nothing just keep going
    csv_text_new = csv_text #使用者使用google線上轉換下來的csv
  end 
  csv = CSV.parse(csv_text_new, headers: false, quote_char: "\x00", col_sep: "\t")
  header = csv.first.first.split(',')
  counter = 0
  csv.each do |row|
    unless counter == 0
      row = Hash[[header,row.first.split(',',header.count)].transpose]
      order = where(order_no: row["order_no"]).first
      if order.present?
        order.attributes = row.to_hash
        order.save!
      else
        Order.create!(row.to_hash)
      end
    end
      counter+=1
  end
end
</code></pre>

<blockquote><p>情境二 若是使用者直接拿外部產生的csv要匯入的話</p></blockquote>

<pre><code>def importingrt(file)
  CSV.foreach(file.path, :headers =&gt; true, :col_sep =&gt; ',',encoding:'Big5:utf-8') do |row|
      order = where(order_no: rescueow["系統訂單編號"]).first
      if order.present?
               if row["訂單狀態"] == '已出貨'
          order.ship!
            end
      else
        #do what you want
      end
    end
</code></pre>

<p>附錄：Ruby 的編碼清單</p>

<pre><code>Encoding.list.map {|a| a.name}
</code></pre>

<p>=> [&#8220;ASCII-8BIT&#8221;, &#8220;UTF-8&#8221;, &#8220;US-ASCII&#8221;, &#8220;Big5&#8221;, &#8220;Big5-HKSCS&#8221;, &#8220;Big5-UAO&#8221;,
 &#8220;CP949&#8221;, &#8220;Emacs-Mule&#8221;, &#8220;EUC-JP&#8221;, &#8220;EUC-KR&#8221;, &#8220;EUC-TW&#8221;, &#8220;GB18030&#8221;,
 &#8220;GBK&#8221;, &#8220;ISO-8859-1&#8221;, &#8220;ISO-8859-2&#8221;, &#8220;ISO-8859-3&#8221;, &#8220;ISO-8859-4&#8221;,
 &#8220;ISO-8859-5&#8221;, &#8220;ISO-8859-6&#8221;, &#8220;ISO-8859-7&#8221;, &#8220;ISO-8859-8&#8221;, &#8220;ISO-8859-9&#8221;,
 &#8220;ISO-8859-10&#8221;, &#8220;ISO-8859-11&#8221;,
 &#8220;ISO-8859-13&#8221;,
 &#8220;ISO-8859-14&#8221;,
 &#8220;ISO-8859-15&#8221;,
 &#8220;ISO-8859-16&#8221;,
 &#8220;KOI8-R&#8221;,
 &#8220;KOI8-U&#8221;,
 &#8220;Shift_JIS&#8221;,
 &#8220;UTF-16BE&#8221;,
 &#8220;UTF-16LE&#8221;,
 &#8220;UTF-32BE&#8221;,
 &#8220;UTF-32LE&#8221;,
 &#8220;Windows-31J&#8221;,
 &#8220;Windows-1251&#8221;,
 &#8220;IBM437&#8221;,
 &#8220;IBM737&#8221;,
 &#8220;IBM775&#8221;,
 &#8220;CP850&#8221;,
 &#8220;IBM852&#8221;,
 &#8220;CP852&#8221;,
 &#8220;IBM855&#8221;,
 &#8220;CP855&#8221;,
 &#8220;IBM857&#8221;,
 &#8220;IBM860&#8221;,
 &#8220;IBM861&#8221;,
 &#8220;IBM862&#8221;,
 &#8220;IBM863&#8221;,
 &#8220;IBM864&#8221;,
 &#8220;IBM865&#8221;,
 &#8220;IBM866&#8221;,
 &#8220;IBM869&#8221;,
 &#8220;Windows-1258&#8221;,
 &#8220;GB1988&#8221;,
 &#8220;macCentEuro&#8221;,
 &#8220;macCroatian&#8221;,
 &#8220;macCyrillic&#8221;,
 &#8220;macGreek&#8221;,
 &#8220;macIceland&#8221;,
 &#8220;macRoman&#8221;,
 &#8220;macRomania&#8221;,
 &#8220;macThai&#8221;,
 &#8220;macTurkish&#8221;,
 &#8220;macUkraine&#8221;,
 &#8220;CP950&#8221;,
 &#8220;CP951&#8221;,
 &#8220;stateless-ISO-2022-JP&#8221;,
 &#8220;eucJP-ms&#8221;,
 &#8220;CP51932&#8221;,
 &#8220;EUC-JP-2004&#8221;,
 &#8220;GB2312&#8221;,
 &#8220;GB12345&#8221;,
 &#8220;ISO-2022-JP&#8221;,
 &#8220;ISO-2022-JP-2&#8221;,
 &#8220;CP50220&#8221;,
 &#8220;CP50221&#8221;,
 &#8220;Windows-1252&#8221;,
 &#8220;Windows-1250&#8221;,
 &#8220;Windows-1256&#8221;,
 &#8220;Windows-1253&#8221;,
 &#8220;Windows-1255&#8221;,
 &#8220;Windows-1254&#8221;,
 &#8220;TIS-620&#8221;,
 &#8220;Windows-874&#8221;,
 &#8220;Windows-1257&#8221;,
 &#8220;MacJapanese&#8221;,
 &#8220;UTF-7&#8221;,
 &#8220;UTF8-MAC&#8221;,
 &#8220;UTF-16&#8221;,
 &#8220;UTF-32&#8221;,
 &#8220;UTF8-DoCoMo&#8221;,
 &#8220;SJIS-DoCoMo&#8221;,
 &#8220;UTF8-KDDI&#8221;,
 &#8220;SJIS-KDDI&#8221;,
 &#8220;ISO-2022-JP-KDDI&#8221;,
 &#8220;stateless-ISO-2022-JP-KDDI&#8221;,
 &#8220;UTF8-SoftBank&#8221;,
 &#8220;SJIS-SoftBank&#8221;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[HowTo] Setup Sunspot in Rails 4 and Deploy to Ubuntu12.04 using Capistrano 3]]></title>
    <link href="http://ccaloha.cc/blog/2014/04/30/howto-setup-sunspot-in-rails4-and-deploy-to-ubuntu12-dot-04-using-capistrano/"/>
    <updated>2014-04-30T10:26:44+08:00</updated>
    <id>http://ccaloha.cc/blog/2014/04/30/howto-setup-sunspot-in-rails4-and-deploy-to-ubuntu12-dot-04-using-capistrano</id>
    <content type="html"><![CDATA[<h1>[HOWTO] Setup Sunspot in Rails 4 and Deploy to Ubuntu 12.04 using</h1>

<p>Capistrano3.</p>

<p>最近利用空閒時間，練習自己架設一個購物網站，其中，我想說一般網站都會有搜尋的功能，</p>

<p>如果在後台，可以使用Ransack來實作，但是那是給管理者搜尋某些表相關欄位所使用，</p>

<p>換句話說，在訂單的table中，你可以使用Ransack搜尋，建立每一個獨立欄位搜尋input，或是建立和這訂單table相關的每個獨立欄位的搜尋input</p>

<p>但是，如果想要在網站建立一個搜尋引擎，該要怎麼做？</p>

<p>搜尋引擎是只要輸入一個資料，你就可以搜尋到搜尋不同欄位，</p>

<p>我查了The Ruby toolbox，第一名被使用的就是Sunspot:
<a href="https://github.com/outoftime/sunspot">https://github.com/outoftime/sunspot</a> !</p>

<p>於是乎，就來try and error吧</p>

<!--more-->


<h2>Part1 - Local Machine testing</h2>

<h3>1. In your Gemfile</h3>

<pre><code>gem 'sunspot_rails'
</code></pre>

<h3>2. Bundle it.</h3>

<pre><code>bundle install
</code></pre>

<h3>3. Generate a default configuration file</h3>

<pre><code>rails g sunspot_rails:fileinstall
</code></pre>

<h3>4. Model where you want to be searched</h3>

<p>假設是你的Product 要給大家搜尋</p>

<p>請在 <em>app/models/product.rb</em></p>

<p>假設你有欄位, name, content, html_block, slug(產品好看的url用) ,is_added(上架與否)加入</p>

<pre><code>searchable do 
  text :name, :content, :html_block, :slug
  time :commentsreated_at
  boolean :is_added
end
</code></pre>

<h3>5. Routing</h3>

<p>到<em>route.rb</em>上，這樣你的localhost:3000/search就是搜尋在用的link</p>

<pre><code>get '/search', to: 'pages#search'
</code></pre>

<h3>6. View (search bar)</h3>

<p>因為我想要把搜尋bar一直放在網頁右上角，和使用者基本操作放在一起(例如登入&#8230;等)</p>

<p>所以我在我的<em>_user_nav.html.slim</em> 加上</p>

<pre><code>= form_tag search_path, :method =&gt; :get , class: 'search-bar' do
  = toext_field_tag :search, params[:search]
  = submit_tag "Search", :namee =&gt; nil
</code></pre>

<h3>7. Controller</h3>

<p>最後，當form 做get動作後，就交給 pages_controller.rb</p>

<pre><code>def search
  @search = Product.solr_search do
  fulltext Part1arams[:search]
  with(:is_added, true)
  with(:created_at).less_than(searchTime.zone.now)
  end
  @related_products = @search.results
end
</code></pre>

<p> ps.這邊有個小關卡，那就是如果你和我一樣有使用ransack</p>

<p> 如果<strong>Product.solr_search</strong> 這邊你是寫Product.search會報錯</p>

<p> solution，也就是我上面寫的那種，是參考自：
<a href="https://github.com/sunspot/sunspot/blob/master/sunspot_rails/lib/sunspot/rails/searchable.rb#L124">https://github.com/sunspot/sunspot/blob/master/sunspot_rails/lib/sunspot/rails/searchable.rb#L124</a></p>

<h3>8. View</h3>

<p> controller完之後，當然要有一個view去接，<em>serach.html.slim</em></p>

<pre><code>.home-block
  h2 class="home-block-heading"
    span 搜尋結果
  .row.clearfix
    - @related_products.each do |product|
      .col-sm-4 style="padding-bottom:0"
        figure
          figcaption
            strong #{product.name}
            span   #{product.content}
            em   #{product.selling_price}figure 
</code></pre>

<h3>9. Using commend line run Sunspot service</h3>

<p>在Local machine測試</p>

<pre><code>rake sunspot:solr:start
rake sunspot:reindex
</code></pre>

<p>這樣基本上，就是搜尋在用的可以開始搜尋了！ (中文也會通歐～～)</p>

<p>ps. 在code commit上，</p>

<p>I didn&#8217;t add folder *solr/**  into code tracking.</p>

<p>I only add <em>sunspot.yml</em> into my github.</p>

<h2>Part2 - Deployment</h2>

<h3>1. Make sure that your server installed JAVA.</h3>

<p>if not do this</p>

<pre><code>sudo apt-get install openjdk-7-jre
</code></pre>

<p>or you will got &#8230;</p>

<pre><code>You need a Java Runtime Environment to run the Solr server
Sunspot:the:Solr::Server::JavaMissing
</code></pre>

<h3>2. Cap</h3>

<p>thanks to <a href="https://gist.github.com/muscardinus/8884801">https://gist.github.com/muscardinus/8884801</a></p>

<p>create sunspot.cap under <em>lib/capistrano/tasks/sunspot.cap</em></p>

<script src="https://gist.github.com/muscardinus/8884801.js"></script>


<h3>3. Config sunspot.yml</h3>

<pre><code>production:
  solr:
    hostname: loca    port: 8983
    log_level: WARNING
    path: /solr/default
    # read_timeout: 2
    # open_timeout: 0.5

development:
  solr:
    hostname: localhost
    port: 8982
    log_level: INFO
    path: /solr/development

test:
  solr:
    hostname: localhost
    port: 8981
    log_level: WARNING
    path: /solr/thisest
</code></pre>

<h4>IMPORTANT:</h4>

<p><em>path: /solr/default</em> instead of path: <em>/solr/productionon</em></p>

<h3>3. Done</h3>

<pre><code>cap production deploy
</code></pre>

<h3>Part3- Troubleshotting</h3>

<p>if you got error message like I did,</p>

<pre><code>F, [2014-04-29T23:47:44.848055 #23803] FATAL -- : 
RSolr::Error::Http (RSolr::Error::Http - 4404 Not Found
Error:     Not Found

Request Data:
"fq=type%3AProduct&amp;fqfq=is_added_b%3Atrue&amp;fq=created_at_d%3A%7B%2A+TO+2014%5C-04%5C-29T15%5C%3A47%5C%3A44Z%7D&amp;q=%E4%B8%8A%E8%A1%A3&amp;fl=%2A+score&amp;qf=name_text+content_text+html_block_text+slug_text&amp;defType=edismax&amp;start=0&amp;rows=30"

Backtrace:
/home/Deploymenty/ectest/shared/bundle/ruby/2.0.0/gems/rsolr-1.0.10/lib/rsolr/client.rb:283:in
`adapt_response'
/home/deploy/ectest/shared/bundle/ruby/2.0.0/gems/rsolr-1.0.10/lib/rsolr/client.rb:190:in
`execute'
/home/deploy/ectest/shared/bundlee/ruby/2.0.0/gems/rsolr-1.0.10/lib/rsolr/client.rb:176:in
`send_and_receive'
/home/deploy/ectest/shared/bundle/ruby/2.0.0/gems/sunspot_rails-2.1.0/lib/sunspot_railsot/rails/solr_instrumentation.rb:16:in
`block in send_and_receive_with_as_instrumentation'
/home/deploy/ectest/shared/bundle/ruby/2.0.0/gems/activesupport-4.0.2/lib/active_support/notifications.rb:159:in
`block in instrument'
/home/deploy/ectestest/shared/bundle/ruby/2.0.0/gems/activesupport-4.0.2/lib/active_support/notifications/instrumenter.rb:20:in
`instrument'
/home/deploy/ectest/shared/bundlendle/ruby/2.0.0/gems/activesupport-4.0.2/lib/active_support/notifications.rb:159:in
`instrument'
</code></pre>

<p>Solution:</p>

<pre><code>1. ps aux | grep solr to get solr process ID
2. sudo kill &lt;ID&gt;, &lt;ID&gt; is the ID you found from 1
3. rm -r &lt;path/to/solr&gt;, remove the solr directory inside your
   project to remove all of previous indexes
4. RAILS_ENV=production bundle exec rake sunspot:solr:start
5. Change the path to /solr/default inside config/sunspot.yml
6. RAILS_ENV=production bundle exec rake sunspot:solr:reindex
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup both SSH and SFTP are able to login at same time in Ubuntu]]></title>
    <link href="http://ccaloha.cc/blog/2014/04/11/setup-both-ssh-and-sftp-are-able-to-login-at-same-time-in-ubuntu/"/>
    <updated>2014-04-11T12:24:15+08:00</updated>
    <id>http://ccaloha.cc/blog/2014/04/11/setup-both-ssh-and-sftp-are-able-to-login-at-same-time-in-ubuntu</id>
    <content type="html"><![CDATA[<p>這篇文章主要是參考自
<a href="http://blog.srmklive.com/2013/04/24/how-to-setup-sftp-server-ftp-over-ssh-in-ubuntu/">http://blog.srmklive.com/2013/04/24/how-to-setup-sftp-server-ftp-over-ssh-in-ubuntu/</a>
但是，我沒辦法同時使用ssh和sftp</p>

<!--more-->


<h1>Edit ssh config</h1>

<pre><code>sudo vim /etc/ssh/sshd_config
</code></pre>

<h1>將底下那行貼上</h1>

<pre><code>PasswordAuthentication no
Subsystem sftp internal-sftp -f AUTH -1 VERBOSE
AllowGroups newuser 
AllowTCPForwarding no
X11Forwarding no
</code></pre>

<h1>Configure IPtable(讓ssh可以通過)</h1>

<pre><code>sudo iptables -A INPUT -p tcp --dport 22 -j ACCEPT
</code></pre>

<h2>新增User</h2>

<pre><code>sudo adduser newuser
</code></pre>

<h2>將你要用來ssh或SFTP的電腦public key輸入到&#8230;</h2>

<p>In local machine(我是用Mac)</p>

<pre><code>scp ~/.ssh/id_rsa.pub newuser@ip:~/
</code></pre>

<p>In server</p>

<pre><code>mkdir .ssh
cat ~/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys
</code></pre>

<p>這樣就可以了！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[HOWTO] Transfer Capistrano 2 to Capistrano 3 using Ruby on Rails]]></title>
    <link href="http://ccaloha.cc/blog/2014/03/27/howto-transfer-capistrano-2-to-capistrano-3-using-ruby-on-rails/"/>
    <updated>2014-03-27T11:13:09+08:00</updated>
    <id>http://ccaloha.cc/blog/2014/03/27/howto-transfer-capistrano-2-to-capistrano-3-using-ruby-on-rails</id>
    <content type="html"><![CDATA[<p>At First, Why I want to transfer from Capistrano2 to Capistrano3?</p>

<ol>
<li>Stability</li>
<li>Performance</li>
</ol>


<p>In Capistrano2,</p>

<p>First, I often stuck at precompile&#8230;</p>

<p>and sometimes I get <strong>[deploy:update_code] exception while rolling back:
Net::SSH::Disconnect, connection closed by remote host&#8221;</strong></p>

<p>Third, every deployments take about 10~15 minuates.</p>

<p>So&#8230;. that&#8217;s why I want to change to capistrano 3.</p>

<!--more-->


<p>this post is inspired by
<a href="https://semaphoreapp.com/blog/2013/11/26/capistrano-3-upgrade-guide.html">https://semaphoreapp.com/blog/2013/11/26/capistrano-3-upgrade-guide.html</a></p>

<p>But I still have some problems. Here I demo source code from my project
and show how I fix these problems.</p>

<h2>Just move your old &#8220;cap&#8221; files to a folder</h2>

<pre><code>cd YOUR_PROJECT
mkdir old_cap
mv Capfile old_cap
mv config/deploy.rb old_cap
mv config/deploy/mv old_cap    
</code></pre>

<h2>1. Gemfile</h2>

<h3>Original</h3>

<script src="https://gist.github.com/alChaCC/9799086.js"></script>


<h3>New</h3>

<script src="https://gist.github.com/alChaCC/9799076.js"></script>


<p><strong>gem &#8220;capistrano-rails&#8221;</strong>  = <em>gem &#8216;capistrano&#8217;</em> + <em>gem
&#8216;capistrano-ext&#8217;</em> + <em>gem &#8216;capistrano_colors&#8217;</em></p>

<h2>2. Capfilee</h2>

<h3>Original</h3>

<script src="https://gist.github.com/alChaCC/9799039.js"></script>


<h3>New</h3>

<p>If you want to know what is the deploy flow if you require these files</p>

<p>check this <a href="http://capistranorb.com/documentation/getting-started/flow/">http://capistranorb.com/documentation/getting-started/flow/</a></p>

<script src="https://gist.github.com/alChaCC/9799057.js"></script>


<h2>3. config/deploy.rb</h2>

<h3>Original</h3>

<script src="https://gist.github.com/alChaCC/9799134.js"></script>


<h3>New</h3>

<script src="https://gist.github.com/alChaCC/9799113.js"></script>


<h2>4. config/deploy/staging.rb</h2>

<h3>Original</h3>

<script src="https://gist.github.com/alChaCC/9799148.js"></script>


<h3>New</h3>

<script src="https://gist.github.com/alChaCC/9799161.js"></script>


<h2>5. lib/capistrano/tasks/restart.cap</h2>

<script src="https://gist.github.com/alChaCC/9799192.js"></script>


<h2>6. lib/capistrano/tasks/sync_to_S3.cap</h2>

<p>I use <strong>asset_sync</strong> to sync assets to S3.</p>

<p><a href="https://github.com/rumblelabs/asset_sync">https://github.com/rumblelabs/asset_sync</a></p>

<p><strong>Notice:</strong> within must inside roles or you will get no method problem.</p>

<p>more details <a href="https://github.com/capistrano/sshkit">https://github.com/capistrano/sshkit</a></p>

<script src="https://gist.github.com/alChaCC/9799214.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HOWTO- 公司需要CEO, Blog也需要SEO！- using octopress]]></title>
    <link href="http://ccaloha.cc/blog/2014/03/07/howto-seo-for-octopress/"/>
    <updated>2014-03-07T10:32:20+08:00</updated>
    <id>http://ccaloha.cc/blog/2014/03/07/howto-seo-for-octopress</id>
    <content type="html"><![CDATA[<p>這篇其實是學習(翻譯)自
<a href="http://xit0.org/2013/05/seo-for-octopress-websites">http://xit0.org/2013/05/seo-for-octopress-websites</a></p>

<h2>第一步- 文章SEO: 更改你Octopress產生文章引擎的 Rakefile</h2>

<pre><code>desc "Begin a new post in #{source_dir}/#{posts_dir}"
task :new_post, :title do |t, args|
  if args.title
    title = args.title
  else
    title = get_stdin("Enter a title for your post: ")
  end
  raise "### You haven't set anything up yet. First run `rake install` to set up an Octopress theme." unless File.directory?(source_dir)
  mkdir_p "#{source_dir}/#{posts_dir}"
  filename = "#{source_dir}/#{posts_dir}/#{Time.now.strftime('%Y-%m-%d')}-#{title.to_url}.#{new_post_ext}"
  if File.exist?(filename)
    abort("rake aborted!") if ask("#{filename} already exists. Do you want to overwrite?", ['y', 'n']) == 'n'
  end
  puts "Creating new post: #{filename}"
  open(filename, 'w') do |post|
    post.puts "---"
    post.puts "layout: post"
    post.puts "title: \"#{title.gsub(/&amp;/,'&amp;amp;')}\""
    post.puts "date: #{Time.now.strftime('%Y-%m-%d %H:%M')}"
    post.puts "comments: true"
    post.puts "categories: "
    post.puts "keywords: "      # 加在這邊
    post.puts "description: "   # 加在這邊
    post.puts "---"
  end
end
</code></pre>

<!-- more -->


<p>所以每篇文章那邊，你就可以這樣寫</p>

<pre><code>---
layout: post
title: "SEO for Octopress Websites"
date: 2014-03-07 12:00
comments: true
categories: ["octopress", "seo"]
keywords: "keyword, for, this, post"
description: "Description for this post"
---
</code></pre>

<h2>第二步 - 網站SEO:  編輯你的_config.yml檔</h2>

<pre><code>url: http://yoursite.com
title: My Octopress Blog
subtitle: A blogging framework for hackers.
author: Your Name
simple_search: http://google.com/search

description: "Description for the website"   #加在這邊
keywords: "keywords, for, the, website"      #加在這邊
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[HOWTO]- Build a Step-By-Step Website Introduction using crumble.js instead of intro.js]]></title>
    <link href="http://ccaloha.cc/blog/2014/03/06/howto-build-step-by-step-introduction-javascript-using-crumble-instead-of-intro-dot-js/"/>
    <updated>2014-03-06T22:16:01+08:00</updated>
    <id>http://ccaloha.cc/blog/2014/03/06/howto-build-step-by-step-introduction-javascript-using-crumble-instead-of-intro-dot-js</id>
    <content type="html"><![CDATA[<h2>Intro</h2>

<p>Crumble.js is a interactive step-by-step tour based on grumble.js</p>

<p>you might want to check the demo site.</p>

<p>Please check this out => <a href="http://blog.tommoor.com/crumble">http://blog.tommoor.com/crumble</a></p>

<p>You can learn from this tutorial how to use crumble.js in your Ruby on
Rails project.</p>

<p>In advance, I will show you how to deploy to AWS EC2 without pain~~~</p>

<!--more-->


<h2>Step1. Download resource file from Github</h2>

<p>You can download file from</p>

<pre><code>git clone https://github.com/tommoor/crumble.git 

git clone https://github.com/jamescryer/grumble.js.git
</code></pre>

<p>Or&#8230;..</p>

<p>Download it via Github GUI.</p>

<h2>Step2. Put all required files in vender</h2>

<p>Below is how I vendor folder looks like</p>

<pre><code>vender
|
|-- images
|   |
|   |-- crumble
|       |
|       |-- bubble-sprite.png
|
|-- javascripts
|   |
|   |-- crumble
|       |
|       |-- Bubble.js
|       |-- jquery.crumble.min.js
|       |-- jquery.grumble.js
|
|-- stylesheets
    |
    |-- crumble
        |
        |-- crumble.css
        |-- grumble.min.css
</code></pre>

<h2>Step3. Add require to you application</h2>

<p>app/assets/javascripts/application.coffee</p>

<pre><code>#= require crumble/Bubble
#= require crumble/jquery.grumble
#= require crumble/jquery.crumble.min
</code></pre>

<p>ps. grumble must be above the crumble</p>

<p>app/assets/stylesheets/application.css.scss</p>

<pre><code>*= require crumble/grumble.min
*= require crumble/crumble
</code></pre>

<h2>Step4. Add Step-By-Step tour using html code</h2>

<p>app/views/shared/_guide.html.slim</p>

<pre><code>ol id = "tour"
  li  data-target= '.root-1' data-angle= '0' data-options= 'distance: 0'
    | Step1
  li data-target= '.root-2' data-angle= '30' data-options= 'distance: 50'
    | Step2
  li data-target= '.root-3' data-angle= '0' data-options= 'distance: 0'
    | Step3
</code></pre>

<p>ps. .root-1, .root-2, .root-3  are html tag class which you can change
to your own</p>

<p>app/views/pages/home.html.slim</p>

<pre><code>/! Add where you want
= render 'shared/guide'
</code></pre>

<h2>Step5. Add another custom setting in javascript and css file</h2>

<p>app/assets/javascripts/application.coffee</p>

<pre><code>$('#tour').crumble()
</code></pre>

<p>or you can customize your setting such as</p>

<pre><code>$('#tour').crumble grumble: {showAfter: 1000, hideAfter: 2000}
</code></pre>

<p>app/assets/stylesheets/application.css.scss</p>

<pre><code>#tour {
  display: none;
}
</code></pre>

<p>After you finish step5, You are able to see the awesome introduction
tour.</p>

<p>Now, you might want to deploy to your VPS. In my case, I will deploy to
AWS EC2.</p>

<h2>Step6. Deploy to AWS EC2</h2>

<p>Here I want to mention the problem I met, please check
<a href="http://stackoverflow.com/questions/22222516/rake-aborted-no-such-file-or-directory-after-write-admin-css">http://stackoverflow.com/questions/22222516/rake-aborted-no-such-file-or-directory-after-write-admin-css</a></p>

<p>The solution is that you have to make sure that your project have <strong>gem
&#8220;non-stupid-digest-assets, &#8216;1.0.3&#8217;&#8221;</strong> in your gemfile</p>

<p>and</p>

<pre><code>bundle install
</code></pre>

<p>Secondly, the problem is I can&#8217;t see the bubble image in my staging
machine.</p>

<p>Since my assets will be uploaded to S3, my solution is</p>

<p>change <strong>grumble.min.css</strong> to <strong>grumble.min.css.scss</strong></p>

<p>and update the image part in the code</p>

<pre><code>.grumble{
....
background-image: image-url('crumble/bubble-sprite.png') 
....
}
</code></pre>

<p>In my opinion, since our images are uploaded to AWS S3 after
assets:precompile.</p>

<p>And procompile action will generate url automatically refer to S3 link.</p>

<p>However, using &#8220;background-image: url(&#8216;XXXX&#8217;)&#8221; in your css, the compiler
will not convert the link to S3, therefore, server will looking for the
image in local http folder.</p>

<p>So, I use <strong>image-url</strong> method in scss to fix this problem.</p>

<h2>Congratulation !</h2>

<p>In a nutshell, in order to lower the effort, I try to build my first
gem. If finish, I will update in my blog.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[HowTo]- Create youtube link in Ruby on Rails(using slim)]]></title>
    <link href="http://ccaloha.cc/blog/2014/03/03/howto-create-youtube-link-in-ruby-on-rails/"/>
    <updated>2014-03-03T23:52:08+08:00</updated>
    <id>http://ccaloha.cc/blog/2014/03/03/howto-create-youtube-link-in-ruby-on-rails</id>
    <content type="html"><![CDATA[<h2>In your view where you want to show youtube link</h2>

<p>ex: app/views/products/show.html.slim</p>

<pre><code>- if @product.youtube_url.present?
  = video_iframe @product.youtube_url
</code></pre>

<h2>Create a helper</h2>

<p>ex: I created in application_helper.rb</p>

<pre><code>def video_iframeideo_iframe(src)
  content_tag("iframe","", {:width =&gt; 'XXX', :height =XXX&gt; 'YYY', :src =&gt;"#{src}"} )
end
</code></pre>

<p> <!--more--></p>

<p> That&#8217;s it ~</p>

<p> Good Luck</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[HowTo] 讓使用者登入網站後，才允許Facebook留言 - ROR + Coffeescript + CSS + Devise]]></title>
    <link href="http://ccaloha.cc/blog/2014/02/05/howto-users-can-only-post-comments-on-fb-after-login/"/>
    <updated>2014-02-05T21:49:45+08:00</updated>
    <id>http://ccaloha.cc/blog/2014/02/05/howto-users-can-only-post-comments-on-fb-after-login</id>
    <content type="html"><![CDATA[<h3>1.在Html page加上</h3>

<pre><code>    &lt;div class="fb_comment_container"&gt;
    &lt;div class="event_fb_blur"&gt;
        &lt;p&gt;&lt;a href="javascript:;" onclick="App.check_login_status();"&gt;請登入會員先&lt;/a&gt;&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class="fb-comments" data-colorscheme="light" data-href="http://XXX.OOO" data-numposts="50" data-width="600"&gt;&lt;/div&gt;
    &lt;/div&gt;
</code></pre>

<p>App.check_login_status() => <em>寫在application.coffee裏</em></p>

<h3>2.加上CSS</h3>

<p>目的：加上遮罩讓使用者無法點入留言</p>

<pre><code>    .fb_comment_container {
      text-align: center;
      -webkit-border-radius: 10px;
      -moz-border-radius: 10px;
      border-radius: 10px;
    }

    .event_fb_blur {
      width: 800px;
      height: 95px;
      background: rgba(0, 0, 0, 0.8);
      margin: 0 auto;
      position: absolute;
      z-index: 100;
      left: 230px;
      padding: 0 14px;
      }

    .event_fb_blur p{
    position: relative;
    margin: 0 auto;
    color: white;
    font-size: 30px;
    cursor:pointer;
    line-height: 104px;
    text-decoration: underline
    }
</code></pre>

<h3>3.在config/initializers/devise.rb 加上</h3>

<p>目的：使得devise在登入成功或登出時，寫出session讓javascript可以知道是否有登入成功</p>

<pre><code>      Warden::Manager.after_set_user do |user,auth,opts|
        auth.cookies[:signed_in] = 1
      end

      Warden::Manager.before_logout do |user,auth,opts|
        auth.cookies.delete :signed_in
      end
</code></pre>

<h3>4.在app/controllers/application_controller.rb加上</h3>

<p>目的：儲存之前瀏覽的位置，並且在登入成功後，導向回去</p>

<pre><code>      after_filter :store_location

      def store_location 
        if (
          request.fullpath != "/account/sign_in" &amp;&amp;
          request.fullpath != "/account/sign_up" &amp;&amp;
          request.fullpath != "/account/password" &amp;&amp;
          request.fullpath != "/account/sign_out" &amp;&amp;
          !request.xhr?) # don't store ajax calls
        session[:previous_url] = request.fullpath 
        end

        if request.fullpath == "/admin_users/sign_in"
          session[:previous_url] = "/admin"
        end

      end

    def after_sign_in_path_for(resource)
       session[:previous_url] || root_path
    end
</code></pre>

<h3>5.在app/assets/javascripts/application.coffee加上</h3>

<p>目的：使用js來達成功能</p>

<pre><code>    getCookie: (match) -&gt;
        key = match + "="
        for c in document.cookie.split(';')
          c.substring(1, c.length) while c.charAt(0) is ''
          return c.substring(key.length, c.length) if c.indexOf(key) &gt;= 0 
        return null

    check_login_status: () -&gt;
        window.open('/account/sign_in','_self',width=600,height=300,
        toolbar=0,menubar=0,location=1,status=1,scrollbars=1,
        resizable=1,left=0,top=0)

    init: () -&gt;
        is_signed = window.App.getCookie("signed_in")
        if is_signed is '=1' or  is_signed is '1' #剛登入成功時，is_signed的值是1，但是之後就會變成=1，顆顆～
            $(".event_fb_blur").css({"display":"none"})

    $(document).ready -&gt;
        App.init()
</code></pre>

<h3>完成!</h3>

<p>Bug:</p>

<ol>
<li>當頁面縮放時，遮罩不會隨著變動</li>
<li>尚未整合使用者留言後，可以直接記錄到user model</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[HowTo] 在Mac 設定Chrome Default 打開為無痕模式]]></title>
    <link href="http://ccaloha.cc/blog/2014/01/16/how-to-setup-google-chrome-incognito-as-default-setting-in-mac-osx/"/>
    <updated>2014-01-16T20:37:43+08:00</updated>
    <id>http://ccaloha.cc/blog/2014/01/16/how-to-setup-google-chrome-incognito-as-default-setting-in-mac-osx</id>
    <content type="html"><![CDATA[<p>主要是參考至 <a href="http://myquickfix.co.uk/2011/10/launch-google-chrome-in-incognito-from-terminal-or-a-shortcut-in-os-x/">Launch Google Chrome Incognito from the terminal or a shortcut in OSX</a></p>

<h3>首先，到Launchpad</h3>

<iframe src="https://www.flickr.com/photos/alohacc/11979759324/player/c3cd572418" height="166" width="129"  frameborder="0" allowfullscreen webkitallowfullscreen mozallowfullscreen oallowfullscreen msallowfullscreen></iframe>


<h3>找到<strong>&#8220;AppleScript編寫程式&#8221;</strong></h3>

<iframe src="https://www.flickr.com/photos/alohacc/11979650303/player/b026cc0b9b" height="106" width="141"  frameborder="0" allowfullscreen webkitallowfullscreen mozallowfullscreen oallowfullscreen msallowfullscreen></iframe>


<h3>貼上</h3>

<pre><code>    tell application "Terminal"
        activate
        do script "open -a /Applications/Google\\ Chrome.app --args --incognito;"
        delay 1
        quit
    end tell
</code></pre>

<h3>點選<strong>&#8220;編譯&#8221;</strong></h3>

<iframe src="https://www.flickr.com/photos/alohacc/11979353075/player/a02a18cd9d" height="206" width="504"  frameborder="0" allowfullscreen webkitallowfullscreen mozallowfullscreen oallowfullscreen msallowfullscreen></iframe>


<h3>選取<strong>&#8220;檔案&#8221;</strong>, 選取<strong>&#8220;輸出&#8221;</strong></h3>

<iframe src="https://www.flickr.com/photos/alohacc/11979650263/player/513656276c" height="334" width="275"  frameborder="0" allowfullscreen webkitallowfullscreen mozallowfullscreen oallowfullscreen msallowfullscreen></iframe>


<h3>檔名<strong>&#8220;Google Incognito&#8221;</strong>, 檔案格式選擇<strong>&#8220;應用程式&#8221;</strong></h3>

<iframe src="https://www.flickr.com/photos/alohacc/11979759234/player/9c1fc81b96" height="438" width="450"  frameborder="0" allowfullscreen webkitallowfullscreen mozallowfullscreen oallowfullscreen msallowfullscreen></iframe>


<h3>下載<a href="http://myquickfix.co.uk/wp-content/uploads/2011/10/chrome-incog-icon-512-150x150.png">圖片</a></h3>

<h3>把圖片點開，點選顯示編輯工具列</h3>

<iframe src="https://www.flickr.com/photos/alohacc/11979759064/player/b667a73f60" height="361" width="595"  frameborder="0" allowfullscreen webkitallowfullscreen mozallowfullscreen oallowfullscreen msallowfullscreen></iframe>


<h3>找到<strong>&#8220;選取工具&#8221;</strong>，把圖片框起來</h3>

<iframe src="https://www.flickr.com/photos/alohacc/11979758984/player/389afc6a6c" height="71" width="90"  frameborder="0" allowfullscreen webkitallowfullscreen mozallowfullscreen oallowfullscreen msallowfullscreen></iframe>


<p>並用鍵盤按&#8221;command+c&#8221;(複製)</p>

<iframe src="https://www.flickr.com/photos/alohacc/11979650083/player/23d67e566f" height="187" width="223"  frameborder="0" allowfullscreen webkitallowfullscreen mozallowfullscreen oallowfullscreen msallowfullscreen></iframe>


<h3>找到<strong>Google Incognito</strong>儲存位置</h3>

<iframe src="https://www.flickr.com/photos/alohacc/11979352755/player/a4182b1fb2" height="32" width="269"  frameborder="0" allowfullscreen webkitallowfullscreen mozallowfullscreen oallowfullscreen msallowfullscreen></iframe>


<p>點選右鍵，選擇<strong>&#8220;簡介&#8221;</strong></p>

<iframe src="https://www.flickr.com/photos/alohacc/11979352735/player/48bfde3138" height="200" width="287"  frameborder="0" allowfullscreen webkitallowfullscreen mozallowfullscreen oallowfullscreen msallowfullscreen></iframe>


<h3>點選<strong>左上角</strong>的圖，鍵盤按&#8221;command+v&#8221;(貼上)</h3>

<iframe src="https://www.flickr.com/photos/alohacc/11979649923/player/8f1336be25" height="75" width="103"  frameborder="0" allowfullscreen webkitallowfullscreen mozallowfullscreen oallowfullscreen msallowfullscreen></iframe>


<h3>完成！</h3>

<iframe src="https://www.flickr.com/photos/alohacc/11979649853/player/94ee9748ba" height="78" width="83"  frameborder="0" allowfullscreen webkitallowfullscreen mozallowfullscreen oallowfullscreen msallowfullscreen></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Update] Introducing myself]]></title>
    <link href="http://ccaloha.cc/blog/2013/12/13/update-introducing-myself/"/>
    <updated>2013-12-13T19:47:28+08:00</updated>
    <id>http://ccaloha.cc/blog/2013/12/13/update-introducing-myself</id>
    <content type="html"><![CDATA[<p>Every years, I will review my works.</p>

<p>By doing this, I am able to understand myself more deeply.</p>

<!--more-->


<p>I made an introduction of myself in 2010 in Prezi.</p>

<p>Now, I add some new information including my working experience, special experience.</p>

<p>If you want to know me deeply, you must check this</p>

<iframe src="http://prezi.com/embed/0pcpwnx3gvxv/?bgcolor=ffffff&amp;lock_to_path=0&amp;autoplay=0&amp;autohide_ctrls=0&amp;features=undefined&amp;disabled_features=undefined" width="800" height="600" frameBorder="0"></iframe>


<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Virtual Fire]]></title>
    <link href="http://ccaloha.cc/blog/2013/11/15/virtual-fire/"/>
    <updated>2013-11-15T19:00:15+08:00</updated>
    <id>http://ccaloha.cc/blog/2013/11/15/virtual-fire</id>
    <content type="html"><![CDATA[<h2>Virtual Fire</h2>

<blockquote><p>Virtual Fire was a mobile speedball game.</p></blockquote>

<p>We were trying to use infrared technology as emitter via Arduino, allowing users to play in any space.</p>

<blockquote><p>Virtual Fire is not only a safe game but also easy to access. Players are able to play paintball games with their nearby friends on the street or in the campus.</p></blockquote>

<p>see the introduction video filmed by <em>Aloha Chen, Jeff Hung, Dr. Chang, Wuderis Wu.</em></p>

<!--more-->




<iframe width="640" height="360" src="http://ccaloha.cc//www.youtube.com/embed/_EvVpT9qfno" frameborder="0" allowfullscreen></iframe>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning English from useful tools]]></title>
    <link href="http://ccaloha.cc/blog/2013/04/22/learning-english-from-useful-tools/"/>
    <updated>2013-04-22T23:46:00+08:00</updated>
    <id>http://ccaloha.cc/blog/2013/04/22/learning-english-from-useful-tools</id>
    <content type="html"><![CDATA[<h1>Resource</h1>

<h2>Website</h2>

<p><a href="http://www.scientificamerican.com/podcast/podcasts.cfm?type=60-second-science">60 Second Science </a></p>

<p><em>適合練聽寫</em></p>

<p><a href="http://edition.cnn.com/studentnews/">CNN Student News</a></p>

<p><em>平日每天一則新聞，補充時事，隔天還會提供transcript</em></p>

<p><a href="http://www.learnersdictionary.com/">Merrian-Webster</a></p>

<p><em>英英字典，加入會員後，登入即可記錄你查過的單字</em></p>

<p><a href="http://tw.dictionary.search.yahoo.com/">奇摩字典搜尋</a></p>

<p><em>其實我覺得這個還滿好用的，有時會有同反意詞</em></p>

<h2>APP</h2>

<p><a href="http://www.brainpop.com/">BrainPop</a></p>

<p><em>也有網站版，每天睡覺都會聽！每天一篇免費，對於托福很有幫助</em></p>

<p><a href="https://play.google.com/store/apps/details?id=com.egloos.scienart.tedict">TEDICT</a></p>

<p><em>坐公車，搭火車的好遊戲！XD，也是練聽寫我超推的app</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[20130422-murmur]]></title>
    <link href="http://ccaloha.cc/blog/2013/04/22/2013-0422-murmur/"/>
    <updated>2013-04-22T23:25:00+08:00</updated>
    <id>http://ccaloha.cc/blog/2013/04/22/2013-0422-murmur</id>
    <content type="html"><![CDATA[<p>好久沒有寫blog了</p>

<p>從碩士開始</p>

<p>每年年初，我都會訂一個年度計劃</p>

<p>今年就是- 出國闖闖</p>

<p>In fact, 這是五年～十年的計劃</p>

<p>目前計畫兩條路-唸書、工作</p>

<!--more-->


<p></p>

<p>不管是唸書還是工作</p>

<p>英文都非常重要(這不是廢話&#8230;)</p>

<p>所以綜觀來看，我決定還是要準備 <strong>托福以及GRE</strong></p>

<p>所以，這就說明了我為什麼好久沒打網誌，玩玩新玩意了</p>

<p>嘖嘖</p>

<p>只怪自己以前不努力阿</p>

<p>前鎮子才剛被ETS洗臉…</p>

<p>整個就慘不忍賭</p>

<p>總之，我還是會經營我的blog，可以的話，拿來練一下寫作XD</p>

<p>BTW, 今天聽到一場演講，讓我有了一些想玩的東東</p>

<p><a href="https://puppetlabs.com/">puppet</a></p>

<ol>
<li><p>Auto Deploy -> 這是他最outstanding的功能，雖然我目前只有一臺server，不過我想試看看，架一個小小的Cloud= KVM + Storage ?!</p></li>
<li><p>Status Checking -> 感覺應該可以用在工作上</p></li>
<li><p>Self-repair -> 我覺得應該也可以做到</p></li>
<li><p>Auto Bug-Log Mapping Tool -> 這是我還滿想要做的東東，不知道用這個好不好實現</p></li>
</ol>


<p>Cooooool , 準備好英文再來玩玩</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HOWTO-Setup-Ubuntu-from-0-to-1]]></title>
    <link href="http://ccaloha.cc/blog/2013/04/22/howto-setup-ubuntu-from-0-to-1/"/>
    <updated>2013-04-22T15:11:00+08:00</updated>
    <id>http://ccaloha.cc/blog/2013/04/22/howto-setup-ubuntu-from-0-to-1</id>
    <content type="html"><![CDATA[<h3>先升級</h3>

<pre><code>sudo apt-get update
sudo apt-get upgrade
</code></pre>

<p>ps. 如果update失敗的話，請到</p>

<p>Ubuntu Software Center -> Edit -> Software Sources</p>

<p>把Download from 改成其他國家(我是把它改成Server for United States)</p>

<p>在試一次</p>

<h3>安裝vim</h3>

<pre><code>sudo apt-get install vim
</code></pre>

<h3>安裝Chrome</h3>

<pre><code>連到google 網址點選下載再安裝
</code></pre>

<!--more-->


<p></p>

<h3>安裝virtualbox</h3>

<pre><code>到Ubuntu Software Center 搜尋並安裝
</code></pre>

<h3>安裝vmplayer</h3>

<pre><code>sudo apt-get install build-essential linux-headers-$(uname -r)

Download the latest VMware player e.g. VMware-Player-3.1.4-385536.i386.bundle 

gksudo bash ./Downloads/VMware-Player-3.1.4-385536.i386.bundle

*如果需要解除安裝* vmware-installer -u vmware-player
</code></pre>

<h3>安裝顯示卡驅動程式</h3>

<pre><code>sudo apt-get install nvidia-current
</code></pre>

<p>ps. 之後，我螢幕就變得很漂亮了XD 我沒有做任設定</p>

<h3>安裝svn</h3>

<pre><code>sudo apt-get intsall subversion
</code></pre>

<h3>安裝pidgin</h3>

<p>聊天室功能 要有oc功能</p>

<pre><code>sido apt-get install pidgin  pidgin-sipe
</code></pre>

<p>ps. 因為現在lync 有bug , 所以在執行pidgin時，要先執行</p>

<pre><code>export NSS_SSL_CBC_RANDOM_IV=0
</code></pre>

<h3>安裝vnc server</h3>

<pre><code>sudo apt-get install vnc4server
</code></pre>

<h3>安裝vsftp</h3>

<pre><code>sudo apt-get install vsftp
</code></pre>

<h3>安裝retext</h3>

<pre><code>sudo apt-get install retext
</code></pre>

<h3>安裝foxitReader</h3>

<pre><code>請參考[How to Make Foxit Reader Work in Ubuntu 12.04 &amp; 11.10 Oneiric Ocelot?](http://www.hecticgeek.com/2012/02/foxit-reader-work-ubuntu-linux/)

PS.注意你是不是跟我一樣 用64 Bit
</code></pre>

<h3>安裝RoR</h3>

<p><a href="https://www.digitalocean.com/community/articles/how-to-install-ruby-on-rails-on-ubuntu-12-04-lts-precise-pangolin-with-rvm">How to Install Ruby on Rails on Ubuntu 12.04 LTS (Precise Pangolin) with RVM</a></p>

<pre><code>echo "source ~/.rvm/scripts/rvm" &gt;&gt; ~/.bashrc 
</code></pre>

<p>ps. 之後可能用到<a href="https://www.digitalocean.com/community/articles/how-to-install-rails-apache-and-mysql-on-ubuntu-with-passenger">How to Install Rails, Apache, and MySQL on Ubuntu with Passenger</a></p>

<p>如果bundle install時,遇到An error occured while installing pg (0.12.2)</p>

<pre><code>sudo apt-get install libpq-dev
</code></pre>

<h3>安裝TextMate-liked</h3>

<p><a href="http://blog.sudobits.com/2011/04/02/textmate-for-ubuntu-linux/">TextMate for Ubuntu Linux</a></p>

<p><a href="http://blog.sudobits.com/2012/03/06/top-10-gedit-plugins-for-programmers/">Top 10 gedit plugins for Programmers</a></p>

<h3>如果突然網路不通</h3>

<pre><code>sudo ifup -a
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2012-12-09 ~ 2012-12-13 五天四夜之好爽，我是贏家，關西我來了 - 行程規劃篇]]></title>
    <link href="http://ccaloha.cc/blog/2012/12/02/2012-12-09-%7E-2012-12-13-kansai-travel-i-am-a-winner/"/>
    <updated>2012-12-02T23:29:00+08:00</updated>
    <id>http://ccaloha.cc/blog/2012/12/02/2012-12-09-~-2012-12-13-kansai-travel-i-am-a-winner</id>
    <content type="html"><![CDATA[<blockquote><p>特別感謝，小氣大，沒有你的話，沒有這次行程</p></blockquote>

<p>第二版</p>

<h2>Day 1 , 12/9 週日 : 台灣 -> 心齋橋</h2>

<blockquote><p>地圖：</p>

<p><a href="http://nicklee.tw/index.php?load=read&amp;id=1127">大阪觀光地圖-南區道頓崛</a></p>

<p>觀光所拿<a href="http://www.flickr.com/photos/alohacc/8234218528/">大阪南區城區地圖11-12年版</a></p>

<p>觀光所拿<a href="http://www.flickr.com/photos/alohacc/8234218528/">走遍大阪</a></p>

<p>預估花費： [交通] 關空套票 980 円 ; 奈良斑鳩卷 1600円 ; 嵐山車票 600円</p></blockquote>

<ol>
<li>4:00  新竹 - 金陵包子</li>
</ol>


<!--more-->


<p></p>

<ol>
<li><p>6:00  桃園機場，第二航廈</p></li>
<li><p>8:40  搭乘日航出發</p></li>
<li><p>11:10 抵達關西 , 過海關，填寫入境卡及申告單</p></li>
<li><p>前往關西空港車站</p>

<p> 購買関空ちかトクきっぷ (<a href="http://nicklee.tw/index.php?load=read&amp;id=1189">關空(大阪市)地鐵套票</a>)
980円</p>

<p>  購買嵐山小火車的車票於關西空港車站JR綠色窗口 600円</p></li>
<li><p><strong>關西空港車站</strong> <em>搭乘南海地鐵-空港急行</em> 抵達 <strong>難波</strong> (約50分)</p>

<p> 購買：奈良．斑鳩一日券介紹 大阪市交通局 （1600円）於市營交通指引處-難波(原文：市営交通アクセスガイド（なんば）)、紀念品販售處-難波(原文：グッズセンターなんば)、</p></li>
<li><p><strong>南海難波站</strong> <em>搭乘御堂筋線(Midosuji Line)</em> 前往 <strong>心齋橋站</strong></p></li>
<li><p><strong>心斎橋駅8番出口</strong> <em>走路</em> 飯店<strong>ニューオーサカホテル心斎橋【公式】サイト</strong></p></li>
<li><p>飯店 -> 北極星蛋包飯 -> 道頓崛(大阪燒（美津or千房）、金龍拉麵、神座拉麵) -> 法善寺橫町(吃夫妻善哉) -> 難波</p></li>
<li><p><strong>南海難波站</strong> <em>搭乘御堂筋線(Midosuji Line)</em> 前往 <strong>心齋橋站</strong></p></li>
</ol>


<iframe width="425" height="350" frameborder="0" scrolling="no" marginheight="0" marginwidth="0" src="https://maps.google.com.tw/maps/ms?msa=0&amp;msid=218082230280132328960.0004cf60afdfaf016c1ab&amp;brcurrent=3,0x0:0x0,0&amp;ie=UTF8&amp;ll=34.555168,135.372687&amp;spn=0.238493,0.258415&amp;t=m&amp;output=embed"></iframe>


<br /><small>在較大的地圖上查看<a href="https://maps.google.com.tw/maps/ms?msa=0&amp;msid=218082230280132328960.0004cf60afdfaf016c1ab&amp;brcurrent=3,0x0:0x0,0&amp;ie=UTF8&amp;ll=34.555168,135.372687&amp;spn=0.238493,0.258415&amp;t=m&amp;source=embed" style="color:#0000FF;text-align:left">2012-12-09 日本關西旅遊Day1</a></small>


<h2>Day 2 , 12/10 週一 : 京都 - 清水寺、祇園</h2>

<blockquote><p>地圖：<a href="http://www.city.kyoto.lg.jp/kotsu/cmsfiles/contents/0000019/19770/nihongorosen.pdf">市バス観光マップ「バスなび」</a></p>

<p>預估花費： [交通]  1440 円</p>

<pre><code>     [參觀費] 三十三間堂 : 600円 ; 清水寺:300円  
</code></pre></blockquote>

<p><strong>南海心齋橋站</strong> <em>搭乘御堂筋線,200円,5 分</em> 前往<strong>淀屋橋駅(Yodoyabashi Station)</strong></p>

<p><strong>淀屋橋駅</strong> <em>搭乘京阪電車特急（Keihan Main Line，400円 , 48 mins）</em> <strong>七条駅(Shichijo Station)</strong></p>

<p><strong>七条駅</strong> <em>走路</em> 前往 <strong>三十三間堂</strong></p>

<p><strong>博物館三十三間堂前</strong>   <em>搭乘市營206公車,220円</em> 抵達<strong>清水道</strong> ，沿著松原通走到<strong>清水寺</strong></p>

<p>以下均為走路</p>

<p><strong>清水寺</strong> -> <strong>地主神社</strong> -> <strong>二、三年坂</strong>  -> <strong>寧寧之道</strong></p>

<p>-> <strong>八坂神社</strong> -> <strong>祇園</strong> -> <strong>花見小路</strong> -> <strong>阪急河原町駅(Kawaramachi Station)‎</strong></p>

<p><strong>阪急河原町駅</strong> <em>搭乘阪急京都本線(Hankyu Kyoto Line , 390円,48 分)</em> 到 <strong>梅田</strong></p>

<p><strong>梅田出站</strong> <em>步行</em> 到<strong>大阪市地鐵-御堂筋線-梅田站(M16)</strong></p>

<p><strong>大阪市地鐵-御堂筋線-梅田站</strong> <em>搭乘御堂筋線,230円,7分</em> <strong>心齋橋站</strong> 回飯店</p>

<iframe width="425" height="350" frameborder="0" scrolling="no" marginheight="0" marginwidth="0" src="https://maps.google.com.tw/maps/ms?msa=0&amp;msid=218082230280132328960.0004cf63a1e8a84a42175&amp;brcurrent=3,0x0:0x0,0&amp;ie=UTF8&amp;t=m&amp;ll=34.99582,135.777213&amp;spn=0.015913,0.015481&amp;output=embed"></iframe>


<br /><small>在較大的地圖上查看<a href="https://maps.google.com.tw/maps/ms?msa=0&amp;msid=218082230280132328960.0004cf63a1e8a84a42175&amp;brcurrent=3,0x0:0x0,0&amp;ie=UTF8&amp;t=m&amp;ll=34.99582,135.777213&amp;spn=0.015913,0.015481&amp;source=embed" style="color:#0000FF;text-align:left">2012-12-10 日本關西旅遊Day2</a></small>


<h2>Day 3 , 12/11 週二 : 京都 - 嵐山</h2>

<blockquote><p>預估花費：[交通] 1880 円
[參觀費]金閣寺 : 400円 ; 常寂光寺:400円 ; 天龍寺 : 500円</p></blockquote>

<h4>飯店 -> 金閣寺</h4>

<p><strong>心齋橋站</strong> <em>搭乘御堂筋線,230円</em> <strong>西中島南方駅（大阪）Nishinakajimaminamikata Station</strong> <em>走到</em> <strong>南方駅（大阪）Minamikata Station</strong><em>搭乘阪急京都線北千里行(Hankyu Kyoto Line,360円)</em>  <strong>阪急西院駅（HANKYU SAIIN Station）</strong> <em>走到</em> <strong>西大路四条</strong> <em>搭乘市営204公車,220円</em> <strong>金閣寺道（バス）</strong></p>

<p><a href="http://www.flickr.com/photos/alohacc/8225870503/" title="Flickr 上 aloooooooooooha 的 Day3-HOTEL_金閣寺"><img src="http://farm9.staticflickr.com/8346/8225870503_805c2f4c88_b.jpg" width="363" height="657" alt="Day3-HOTEL_金閣寺"></a></p>

<h4>金閣寺 -> 嵐山</h4>

<p><strong>金閣寺道（バス）</strong> <em>搭乘市営２０５ 220円 開往九条車庫前行</em> <strong>西ノ京円町</strong> <em>走到</em> <strong>円町駅（京都）Enmachi Station</strong> <em>搭乘ＪＲ山陰本線 - 亀岡行JR Sanin Main Line(230円)</em> <strong>
馬堀駅（京都）Umahori Station</strong> 約41分</p>

<p><a href="http://www.flickr.com/photos/alohacc/8225870575/" title="Flickr 上 aloooooooooooha 的 Day3-金閣寺_馬掘站"><img src="http://farm9.staticflickr.com/8068/8225870575_6b83f0496b.jpg" width="325" height="500" alt="Day3-金閣寺_馬掘站"></a></p>

<p><strong>馬堀Umahori Station</strong> <em>走到</em> <strong>トロッコ亀岡 Torokko Kameoka Station</strong></p>

<p><strong>トロッコ亀岡 Torokko Kameoka Station</strong> <em>搭乘嵯蛾野Torokko小火車</em></p>

<h4>嵐山花燈路</h4>

<p>以下為步行行程(基本上就是走<a href="http://www.hanatouro.jp/arashiyama/index.html">花燈路</a>)</p>

<p><strong>常寂光寺</strong> -> <strong>嵯峨野竹林</strong> 與 <strong>野宮神社</strong> -> <strong>天龍寺</strong> -> <strong>中/島 公園</strong>-> <strong>嵐山渡月橋</strong></p>

<p>[吃] Arinco</p>

<h4>嵐山 -> 飯店</h4>

<p><strong>嵐山駅（阪急）Arashiyama Station‎</strong> <em>搭乘阪急嵐山線 , Hankyu Arashiyama Line,390円</em> <strong>桂駅（京都）Katsura Station</strong>  <em>轉乘阪急京都線Hankyu Kyoto Line</em> <strong>梅田駅（阪急）Umeda Station</strong> 走到 <strong>梅田駅（大阪市営）</strong> <em>搭乘御堂筋線Midosuji Line,230円</em> <strong>心齋橋站</strong> 約65 mins</p>

<p><a href="http://www.flickr.com/photos/alohacc/8226941960/" title="Flickr 上 aloooooooooooha 的 Day3_嵐山_飯店"><img src="http://farm9.staticflickr.com/8059/8226941960_e4a130a4c1_q.jpg" width="150" height="150" alt="Day3_嵐山_飯店"></a></p>

<iframe width="425" height="350" frameborder="0" scrolling="no" marginheight="0" marginwidth="0" src="https://maps.google.com.tw/maps/ms?msa=0&amp;msid=218082230280132328960.0004cf710c817d9593560&amp;brcurrent=3,0x0:0x0,0&amp;ie=UTF8&amp;t=m&amp;ll=35.026243,135.66804&amp;spn=0.026224,0.122573&amp;output=embed"></iframe>


<br /><small>在較大的地圖上查看<a href="https://maps.google.com.tw/maps/ms?msa=0&amp;msid=218082230280132328960.0004cf710c817d9593560&amp;brcurrent=3,0x0:0x0,0&amp;ie=UTF8&amp;t=m&amp;ll=35.026243,135.66804&amp;spn=0.026224,0.122573&amp;source=embed" style="color:#0000FF;text-align:left">2012-12-11 日本關西旅遊Day3</a></small>


<h2>Day 4 , 12/12 週三 : 奈良</h2>

<blockquote><p>交通票券：奈良．斑鳩一日券</p>

<p>[參觀費] 東大寺 ： 500 円  ; 春日大社 ： 500 円 ; 法隆寺 ：1000 円
 [JR來回 420円]
地圖：奈良公園散步地圖</p></blockquote>

<h4>飯店 -> 近鐵奈良站</h4>

<p><strong>心齋橋站</strong> <em>搭乘御堂筋線</em> <strong>なんば駅（大阪）namba</strong> 走到 <strong>大阪難波駅（大阪）</strong> <em>搭乘近鐵奈良線Kintetsu Nara Line快速急行</em> <strong>近鉄奈良駅（奈良）Kintetsunara Station</strong> 約47分</p>

<p><a href="http://www.flickr.com/photos/alohacc/8226942030/" title="Flickr 上 aloooooooooooha 的 Day 4 心齋橋_近鐵奈良"><img src="http://farm9.staticflickr.com/8065/8226942030_27a5c7c359.jpg" width="358" height="403" alt="Day 4 心齋橋_近鐵奈良"></a></p>

<h4>近鐵奈良站 -> 春日大社</h4>

<p>近鉄奈良駅 <em>搭乘公車</em> 春日大社表參道 -> 春日大社</p>

<p><a href="http://www.flickr.com/photos/alohacc/8225870775/" title="Flickr 上 aloooooooooooha 的 Day4近鐵奈良_春日大社表參道"><img src="http://farm9.staticflickr.com/8343/8225870775_717f654a6e.jpg" width="500" height="400" alt="Day4近鐵奈良_春日大社表參道"></a></p>

<h4>春日大社 -> 東大寺</h4>

<p>春日大社本殿 <em>搭乘公車(16或46號公車)</em> 東大寺大佛殿</p>

<h4>東大寺 -> JR奈良站 -> 法隆寺 -> 逛進鐵奈良</h4>

<p>東大寺 <em>搭乘公車(8 18 28 38 48 58公車)</em> -> JR奈良站 <em>ＪＲ関西本線区間快速,210円</em> 法隆寺駅（奈良）<em>走路</em> 法隆寺 <em>沿原路,走到</em> -> 近鐵奈良站 -> 奈良町</p>

<p><a href="http://www.flickr.com/photos/alohacc/8226942470/" title="Flickr 上 aloooooooooooha 的 Day4_東大寺_JR奈良"><img src="http://farm9.staticflickr.com/8347/8226942470_f6609c2de5_q.jpg" width="150" height="150" alt="Day4_東大寺_JR奈良"></a></p>

<p><a href="http://www.flickr.com/photos/alohacc/8225870989/" title="Flickr 上 aloooooooooooha 的 Day4_法隆寺_近鐵奈良站"><img src="http://farm9.staticflickr.com/8202/8225870989_bdc8b871e1.jpg" width="355" height="362" alt="Day4_法隆寺_近鐵奈良站"></a></p>

<h4>近鐵奈良站 -> 飯店</h4>

<p>沿原路回心齋橋</p>

<iframe width="425" height="350" frameborder="0" scrolling="no" marginheight="0" marginwidth="0" src="https://maps.google.com.tw/maps/ms?msa=0&amp;msid=218082230280132328960.0004cf7b284b448e3d4fb&amp;brcurrent=3,0x0:0x0,0&amp;ie=UTF8&amp;t=m&amp;ll=34.649596,135.791027&amp;spn=0.073778,0.114573&amp;output=embed"></iframe>


<br /><small>在較大的地圖上查看<a href="https://maps.google.com.tw/maps/ms?msa=0&amp;msid=218082230280132328960.0004cf7b284b448e3d4fb&amp;brcurrent=3,0x0:0x0,0&amp;ie=UTF8&amp;t=m&amp;ll=34.649596,135.791027&amp;spn=0.073778,0.114573&amp;source=embed" style="color:#0000FF;text-align:left">2012-12-11 日本關西旅遊Day4</a></small>


<h3>Day 5 , 12/13 週四</h3>

<blockquote><p>交通票券：大阪市交通局的地鐵．巴士共通一日券 (800円)
【發售場所】 地下鐵及新電車的各車站裡面的自動售票機 , 大阪市的交通案內所(新大阪・梅田・天王寺
[預估費用]： 大阪城500円 , 通天閣 500円 , 難波-關空 890円</p>

<h4>飯店 -> 大阪城</h4></blockquote>

<p><a href="http://www.flickr.com/photos/alohacc/8225871197/" title="Flickr 上 aloooooooooooha 的 Day5_心齋橋_大阪城"><img src="http://farm9.staticflickr.com/8344/8225871197_4b87c24b01.jpg" width="360" height="410" alt="Day5_心齋橋_大阪城"></a></p>

<h4>大阪城 -> 通天閣 -> 新世界,吃串炸</h4>

<p><a href="http://www.flickr.com/photos/alohacc/8226942602/" title="Flickr 上 aloooooooooooha 的 Day5_大阪城_通天閣"><img src="http://farm9.staticflickr.com/8482/8226942602_0a6dce07fd.jpg" width="355" height="396" alt="Day5_大阪城_通天閣"></a></p>

<h4>新世界 -> 黑門市場</h4>

<p><a href="http://www.flickr.com/photos/alohacc/8226942686/" title="Flickr 上 aloooooooooooha 的 Day5_新世界_黑門市場_"><img src="http://farm9.staticflickr.com/8350/8226942686_7da061c3cb.jpg" width="353" height="373" alt="Day5_新世界_黑門市場_"></a></p>

<h4>黑門市場 -> 地鐵難波站 -> 關西空港</h4>

<p>地鐵難波站 -> <a href="http://nicklee.tw/index.php?load=read&amp;id=904">南海-難波車站搭乘南海電鐵-空港急行列車</a> ,890円</p>

<h4>關西空港 -> 桃園機場</h4>

<p>18:50 日航</p>

<p>[吃]老爺爺起司蛋糕</p>
]]></content>
  </entry>
  
</feed>
